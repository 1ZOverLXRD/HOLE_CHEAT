#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_LevelManager

#include "Basic.hpp"

#include "BPI_LevelManager_classes.hpp"
#include "BPI_LevelManager_parameters.hpp"


namespace SDK
{

// Function BPI_LevelManager.BPI_LevelManager_C.CheckTotalWeaponLight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanLightON                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_LevelManager_C::CheckTotalWeaponLight(bool* CanLightON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LevelManager_C", "CheckTotalWeaponLight");

	Params::BPI_LevelManager_C_CheckTotalWeaponLight Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanLightON != nullptr)
		*CanLightON = Parms.CanLightON;
}


// Function BPI_LevelManager.BPI_LevelManager_C.CountWeaponLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_LevelManager_C::CountWeaponLight(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LevelManager_C", "CountWeaponLight");

	Params::BPI_LevelManager_C_CountWeaponLight Parms{};

	Parms.Amount = Amount;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_LevelManager.BPI_LevelManager_C.KillCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHeadShotKill                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NPCRowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ShootingLevel                        SootingLevel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAddKillLog                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_LevelManager_C::KillCount(bool IsHeadShotKill, const struct FVector& HitPosition, const struct FVector& KillLocation, const struct FVector& KillDirection, class FName NPCRowName, EN_ShootingLevel SootingLevel, int32 Hit, bool IsAddKillLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LevelManager_C", "KillCount");

	Params::BPI_LevelManager_C_KillCount Parms{};

	Parms.IsHeadShotKill = IsHeadShotKill;
	Parms.HitPosition = std::move(HitPosition);
	Parms.KillLocation = std::move(KillLocation);
	Parms.KillDirection = std::move(KillDirection);
	Parms.NPCRowName = NPCRowName;
	Parms.SootingLevel = SootingLevel;
	Parms.Hit = Hit;
	Parms.IsAddKillLog = IsAddKillLog;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_LevelManager.BPI_LevelManager_C.ObjectDestroyCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ObjectRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DestroyLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DestroyDirection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HiitPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHeadShot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_LevelManager_C::ObjectDestroyCount(class FName ObjectRowName, const struct FVector& DestroyLocation, const struct FVector& DestroyDirection, const struct FVector& HiitPosition, bool IsHeadShot, int32 Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LevelManager_C", "ObjectDestroyCount");

	Params::BPI_LevelManager_C_ObjectDestroyCount Parms{};

	Parms.ObjectRowName = ObjectRowName;
	Parms.DestroyLocation = std::move(DestroyLocation);
	Parms.DestroyDirection = std::move(DestroyDirection);
	Parms.HiitPosition = std::move(HiitPosition);
	Parms.IsHeadShot = IsHeadShot;
	Parms.Hit = Hit;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_LevelManager.BPI_LevelManager_C.OpenResults
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGameOver                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_LevelManager_C::OpenResults(bool IsGameOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LevelManager_C", "OpenResults");

	Params::BPI_LevelManager_C_OpenResults Parms{};

	Parms.IsGameOver = IsGameOver;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_LevelManager.BPI_LevelManager_C.StartObjectEvent
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_LevelManager_C::StartObjectEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_LevelManager_C", "StartObjectEvent");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

