#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AmmoBase

#include "Basic.hpp"

#include "BP_AmmoBase_classes.hpp"
#include "BP_AmmoBase_parameters.hpp"


namespace SDK
{

// Function BP_AmmoBase.BP_AmmoBase_C.GetFireParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 AmmoJamRate_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 AmmoRecoil_V_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 AmmoRecoil_H_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 AmmoLoudness_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 AmmoHeat_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmmoBase_C::GetFireParameter(double* AmmoJamRate_0, double* AmmoRecoil_V_0, double* AmmoRecoil_H_0, double* AmmoLoudness_0, double* AmmoHeat_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "GetFireParameter");

	Params::BP_AmmoBase_C_GetFireParameter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AmmoJamRate_0 != nullptr)
		*AmmoJamRate_0 = Parms.AmmoJamRate_0;

	if (AmmoRecoil_V_0 != nullptr)
		*AmmoRecoil_V_0 = Parms.AmmoRecoil_V_0;

	if (AmmoRecoil_H_0 != nullptr)
		*AmmoRecoil_H_0 = Parms.AmmoRecoil_H_0;

	if (AmmoLoudness_0 != nullptr)
		*AmmoLoudness_0 = Parms.AmmoLoudness_0;

	if (AmmoHeat_0 != nullptr)
		*AmmoHeat_0 = Parms.AmmoHeat_0;
}


// Function BP_AmmoBase.BP_AmmoBase_C.InitilizeGunParts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlayerWeapon                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmmoBase_C::InitilizeGunParts(bool IsPlayerWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "InitilizeGunParts");

	Params::BP_AmmoBase_C_InitilizeGunParts Parms{};

	Parms.IsPlayerWeapon = IsPlayerWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmmoBase.BP_AmmoBase_C.InitializeAmmo
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AmmoBase_C::InitializeAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "InitializeAmmo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.InitializeBullet
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AmmoBase_C::InitializeBullet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "InitializeBullet");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_AmmoBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_AmmoBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.Ammo_Fire
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AmmoBase_C::Ammo_Fire()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "Ammo_Fire");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.Ammo_EjectShell
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   WeaponVelocity                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UArrowComponent*                  EjectDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    IsManualUnload                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  EjectPower                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmmoBase_C::Ammo_EjectShell(const struct FVector& WeaponVelocity, class UArrowComponent* EjectDirection, bool IsManualUnload, double EjectPower)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "Ammo_EjectShell");

	Params::BP_AmmoBase_C_Ammo_EjectShell Parms{};

	Parms.WeaponVelocity = std::move(WeaponVelocity);
	Parms.EjectDirection = EjectDirection;
	Parms.IsManualUnload = IsManualUnload;
	Parms.EjectPower = EjectPower;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmmoBase.BP_AmmoBase_C.DestroyEvent
// (BlueprintCallable, BlueprintEvent)

void ABP_AmmoBase_C::DestroyEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "DestroyEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.Ammo_Clear
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AmmoBase_C::Ammo_Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "Ammo_Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.Ammo_Drop
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_AmmoBase_C::Ammo_Drop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "Ammo_Drop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AmmoBase.BP_AmmoBase_C.BndEvt__BP_BaseAmmo_ShellCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   NormalImpulse                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_AmmoBase_C::BndEvt__BP_BaseAmmo_ShellCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "BndEvt__BP_BaseAmmo_ShellCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature");

	Params::BP_AmmoBase_C_BndEvt__BP_BaseAmmo_ShellCollision_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AmmoBase.BP_AmmoBase_C.ExecuteUbergraph_BP_AmmoBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_AmmoBase_C::ExecuteUbergraph_BP_AmmoBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AmmoBase_C", "ExecuteUbergraph_BP_AmmoBase");

	Params::BP_AmmoBase_C_ExecuteUbergraph_BP_AmmoBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

