#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerObjectAction

#include "Basic.hpp"

#include "BPI_PlayerObjectAction_classes.hpp"
#include "BPI_PlayerObjectAction_parameters.hpp"


namespace SDK
{

// Function BPI_PlayerObjectAction.BPI_PlayerObjectAction_C.GetPlayerCameraPositionAndDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraFOV                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerObjectAction_C::GetPlayerCameraPositionAndDirection(struct FVector* position, struct FVector* Direction, double* CameraFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerObjectAction_C", "GetPlayerCameraPositionAndDirection");

	Params::BPI_PlayerObjectAction_C_GetPlayerCameraPositionAndDirection Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (position != nullptr)
		*position = std::move(Parms.position);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);

	if (CameraFOV != nullptr)
		*CameraFOV = Parms.CameraFOV;
}


// Function BPI_PlayerObjectAction.BPI_PlayerObjectAction_C.OBJ001_SetMovieOpacity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Opacity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNothing                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerObjectAction_C::OBJ001_SetMovieOpacity(double Opacity, bool IsNothing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerObjectAction_C", "OBJ001_SetMovieOpacity");

	Params::BPI_PlayerObjectAction_C_OBJ001_SetMovieOpacity Parms{};

	Parms.Opacity = Opacity;
	Parms.IsNothing = IsNothing;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerObjectAction.BPI_PlayerObjectAction_C.OBJ002_LightNoise
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_PlayerObjectAction_C::OBJ002_LightNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerObjectAction_C", "OBJ002_LightNoise");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_PlayerObjectAction.BPI_PlayerObjectAction_C.OBJ003_SightControl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CameraMoveIntensity                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Entity                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerObjectAction_C::OBJ003_SightControl(double CameraMoveIntensity, double Damage, class AActor* Entity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerObjectAction_C", "OBJ003_SightControl");

	Params::BPI_PlayerObjectAction_C_OBJ003_SightControl Parms{};

	Parms.CameraMoveIntensity = CameraMoveIntensity;
	Parms.Damage = Damage;
	Parms.Entity = Entity;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

