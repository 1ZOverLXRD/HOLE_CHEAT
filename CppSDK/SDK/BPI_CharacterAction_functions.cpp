#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CharacterAction

#include "Basic.hpp"

#include "BPI_CharacterAction_classes.hpp"
#include "BPI_CharacterAction_parameters.hpp"


namespace SDK
{

// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_AimMotion
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AimIN                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MuteSE                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_AimMotion(bool AimIN, bool MuteSE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_AimMotion");

	Params::BPI_CharacterAction_C_PlayerInput_AimMotion Parms{};

	Parms.AimIN = AimIN;
	Parms.MuteSE = MuteSE;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_AimMotion_CanAim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanAim                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_AimMotion_CanAim(bool* CanAim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_AimMotion_CanAim");

	Params::BPI_CharacterAction_C_PlayerInput_AimMotion_CanAim Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanAim != nullptr)
		*CanAim = Parms.CanAim;
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_Charge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Press_Released                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_Charge(bool Press_Released)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_Charge");

	Params::BPI_CharacterAction_C_PlayerInput_Charge Parms{};

	Parms.Press_Released = Press_Released;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_HoldBreath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_HoldBreath(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_HoldBreath");

	Params::BPI_CharacterAction_C_PlayerInput_HoldBreath Parms{};

	Parms.Enable = Enable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_Interact
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::PlayerInput_Interact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_Interact");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_Lean
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_Lean(bool In, bool IsRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_Lean");

	Params::BPI_CharacterAction_C_PlayerInput_Lean Parms{};

	Parms.In = In;
	Parms.IsRight = IsRight;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_MeleeAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Press_Released                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_MeleeAttack(bool Press_Released)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_MeleeAttack");

	Params::BPI_CharacterAction_C_PlayerInput_MeleeAttack Parms{};

	Parms.Press_Released = Press_Released;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_ReloadWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_CharacterAction_C::PlayerInput_ReloadWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_ReloadWeapon");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_ScrollWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUp                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_ScrollWeapon(bool IsUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_ScrollWeapon");

	Params::BPI_CharacterAction_C_PlayerInput_ScrollWeapon Parms{};

	Parms.IsUp = IsUp;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_SwitchLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPressed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_SwitchLight(bool IsPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_SwitchLight");

	Params::BPI_CharacterAction_C_PlayerInput_SwitchLight Parms{};

	Parms.IsPressed = IsPressed;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_SwitchWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector                         SwitchTo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_SwitchWeapon(EWeaponSelector SwitchTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_SwitchWeapon");

	Params::BPI_CharacterAction_C_PlayerInput_SwitchWeapon Parms{};

	Parms.SwitchTo = SwitchTo;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_CharacterAction.BPI_CharacterAction_C.PlayerInput_UseWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Press_Released                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CharacterAction_C::PlayerInput_UseWeapon(bool Press_Released)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CharacterAction_C", "PlayerInput_UseWeapon");

	Params::BPI_CharacterAction_C_PlayerInput_UseWeapon Parms{};

	Parms.Press_Released = Press_Released;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

