#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Magazine

#include "Basic.hpp"

#include "BPI_Magazine_classes.hpp"
#include "BPI_Magazine_parameters.hpp"


namespace SDK
{

// Function BPI_Magazine.BPI_Magazine_C.CarrierUpShell
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   RelativeLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  RelativeRotation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Magazine_C::CarrierUpShell(const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "CarrierUpShell");

	Params::BPI_Magazine_C_CarrierUpShell Parms{};

	Parms.RelativeLocation = std::move(RelativeLocation);
	Parms.RelativeRotation = std::move(RelativeRotation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Magazine.BPI_Magazine_C.ChamberingOneRound
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  AttachPoint                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ABP_AmmoBase_C**                  Ammo                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsEmpty                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Magazine_C::ChamberingOneRound(class USceneComponent* AttachPoint, class ABP_AmmoBase_C** Ammo, bool* IsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "ChamberingOneRound");

	Params::BPI_Magazine_C_ChamberingOneRound Parms{};

	Parms.AttachPoint = AttachPoint;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Ammo != nullptr)
		*Ammo = Parms.Ammo;

	if (IsEmpty != nullptr)
		*IsEmpty = Parms.IsEmpty;
}


// Function BPI_Magazine.BPI_Magazine_C.DestroyMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Magazine_C::DestroyMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "DestroyMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Magazine.BPI_Magazine_C.DropMagazine
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Magazine_C::DropMagazine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "DropMagazine");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Magazine.BPI_Magazine_C.EmptyMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Magazine_C::EmptyMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "EmptyMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Magazine.BPI_Magazine_C.GetAttachPoint_Mag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent**                 MagPoint                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Magazine_C::GetAttachPoint_Mag(class USceneComponent** MagPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "GetAttachPoint_Mag");

	Params::BPI_Magazine_C_GetAttachPoint_Mag Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (MagPoint != nullptr)
		*MagPoint = Parms.MagPoint;
}


// Function BPI_Magazine.BPI_Magazine_C.GetAttachPoint_ReloadHand
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent**                 ReloadHandPoint                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Magazine_C::GetAttachPoint_ReloadHand(class USceneComponent** ReloadHandPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "GetAttachPoint_ReloadHand");

	Params::BPI_Magazine_C_GetAttachPoint_ReloadHand Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ReloadHandPoint != nullptr)
		*ReloadHandPoint = Parms.ReloadHandPoint;
}


// Function BPI_Magazine.BPI_Magazine_C.GetCurrentAmmoInMagazine
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  AmmoInMagazine                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Magazine_C::GetCurrentAmmoInMagazine(int32* AmmoInMagazine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "GetCurrentAmmoInMagazine");

	Params::BPI_Magazine_C_GetCurrentAmmoInMagazine Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (AmmoInMagazine != nullptr)
		*AmmoInMagazine = Parms.AmmoInMagazine;
}


// Function BPI_Magazine.BPI_Magazine_C.GetMagazineCapacity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  MagCapacity                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Magazine_C::GetMagazineCapacity(int32* MagCapacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "GetMagazineCapacity");

	Params::BPI_Magazine_C_GetMagazineCapacity Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (MagCapacity != nullptr)
		*MagCapacity = Parms.MagCapacity;
}


// Function BPI_Magazine.BPI_Magazine_C.LoadFullAmmo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LoadAmmoNum                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Magazine_C::LoadFullAmmo(int32 LoadAmmoNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "LoadFullAmmo");

	Params::BPI_Magazine_C_LoadFullAmmo Parms{};

	Parms.LoadAmmoNum = LoadAmmoNum;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Magazine.BPI_Magazine_C.LoadSingleAmmo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_AmmoBase_C*                   AmmoObj                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Magazine_C::LoadSingleAmmo(class ABP_AmmoBase_C* AmmoObj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Magazine_C", "LoadSingleAmmo");

	Params::BPI_Magazine_C_LoadSingleAmmo Parms{};

	Parms.AmmoObj = AmmoObj;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

