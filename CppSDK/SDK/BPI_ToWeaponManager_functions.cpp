#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ToWeaponManager

#include "Basic.hpp"

#include "BPI_ToWeaponManager_classes.hpp"
#include "BPI_ToWeaponManager_parameters.hpp"


namespace SDK
{

// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Chambering_BoltCatchRelease
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Chambering_BoltCatchRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Chambering_BoltCatchRelease");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.ChangeEquipWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector                         WeaponSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_ToWeaponManager_C::ChangeEquipWeapon(EWeaponSelector WeaponSlot, class UClass* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "ChangeEquipWeapon");

	Params::BPI_ToWeaponManager_C_ChangeEquipWeapon Parms{};

	Parms.WeaponSlot = WeaponSlot;
	Parms.Weapon = Weapon;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.GetCurrentWeaponSelector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector*                        CurrentWeaponSelector                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ToWeaponManager_C::GetCurrentWeaponSelector(EWeaponSelector* CurrentWeaponSelector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "GetCurrentWeaponSelector");

	Params::BPI_ToWeaponManager_C_GetCurrentWeaponSelector Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CurrentWeaponSelector != nullptr)
		*CurrentWeaponSelector = Parms.CurrentWeaponSelector;
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.GetEquipWeaponNames
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<EWeaponSelector, class FName>*     EquipWeapon                                            (Parm, OutParm)

void IBPI_ToWeaponManager_C::GetEquipWeaponNames(TMap<EWeaponSelector, class FName>* EquipWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "GetEquipWeaponNames");

	Params::BPI_ToWeaponManager_C_GetEquipWeaponNames Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (EquipWeapon != nullptr)
		*EquipWeapon = std::move(Parms.EquipWeapon);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.OpenShellCarrier
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::OpenShellCarrier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "OpenShellCarrier");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.RefreshWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::RefreshWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "RefreshWeapon");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_DetachMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_DetachMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_DetachMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_DropMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_DropMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_DropMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_InsertMag_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_InsertMag_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_InsertMag_Begin");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_InsertMag_Block
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_InsertMag_Block()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_InsertMag_Block");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_InsertMag_End
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_InsertMag_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_InsertMag_End");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_InsertShell_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_InsertShell_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_InsertShell_Begin");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_InsertShell_End
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_InsertShell_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_InsertShell_End");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_TakeNewMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_TakeNewMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_TakeNewMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_ToWeaponManager.BPI_ToWeaponManager_C.Reload_TakeNewShell
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_ToWeaponManager_C::Reload_TakeNewShell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ToWeaponManager_C", "Reload_TakeNewShell");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

