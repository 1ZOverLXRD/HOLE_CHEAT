#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LCBP_LocalPostProcess

#include "Basic.hpp"

#include "LCBP_LocalPostProcess_classes.hpp"
#include "LCBP_LocalPostProcess_parameters.hpp"


namespace SDK
{

// Function LCBP_LocalPostProcess.LCBP_LocalPostProcess_C.CustomEvent
// (BlueprintCallable, BlueprintEvent)

void ALCBP_LocalPostProcess_C::CustomEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LCBP_LocalPostProcess_C", "CustomEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LCBP_LocalPostProcess.LCBP_LocalPostProcess_C.ExecuteUbergraph_LCBP_LocalPostProcess
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ALCBP_LocalPostProcess_C::ExecuteUbergraph_LCBP_LocalPostProcess(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LCBP_LocalPostProcess_C", "ExecuteUbergraph_LCBP_LocalPostProcess");

	Params::LCBP_LocalPostProcess_C_ExecuteUbergraph_LCBP_LocalPostProcess Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LCBP_LocalPostProcess.LCBP_LocalPostProcess_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ALCBP_LocalPostProcess_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LCBP_LocalPostProcess_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LCBP_LocalPostProcess.LCBP_LocalPostProcess_C.SetBaseValue
// (BlueprintCallable, BlueprintEvent)

void ALCBP_LocalPostProcess_C::SetBaseValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LCBP_LocalPostProcess_C", "SetBaseValue");

	UObject::ProcessEvent(Func, nullptr);
}

}

