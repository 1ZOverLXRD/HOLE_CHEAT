#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_FocusLocator

#include "Basic.hpp"

#include "BPI_FocusLocator_classes.hpp"
#include "BPI_FocusLocator_parameters.hpp"


namespace SDK
{

// Function BPI_FocusLocator.BPI_FocusLocator_C.GetCurrentFocusLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         FocusLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_FocusLocator_C::GetCurrentFocusLocation(struct FVector* FocusLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FocusLocator_C", "GetCurrentFocusLocation");

	Params::BPI_FocusLocator_C_GetCurrentFocusLocation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (FocusLocation != nullptr)
		*FocusLocation = std::move(Parms.FocusLocation);
}


// Function BPI_FocusLocator.BPI_FocusLocator_C.InitializeFocusLocator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BaseFocusSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BrainActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_FocusLocator_C::InitializeFocusLocator(double BaseFocusSpeed, class AActor* BrainActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FocusLocator_C", "InitializeFocusLocator");

	Params::BPI_FocusLocator_C_InitializeFocusLocator Parms{};

	Parms.BaseFocusSpeed = BaseFocusSpeed;
	Parms.BrainActor = BrainActor;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_FocusLocator.BPI_FocusLocator_C.SendFocusData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FocusTargetLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_LocatorMoveMode                      FocusMoveMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  FluctuationFactor                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_FocusLocator_C::SendFocusData(const struct FVector& FocusTargetLocation, EN_LocatorMoveMode FocusMoveMode, double FluctuationFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FocusLocator_C", "SendFocusData");

	Params::BPI_FocusLocator_C_SendFocusData Parms{};

	Parms.FocusTargetLocation = std::move(FocusTargetLocation);
	Parms.FocusMoveMode = FocusMoveMode;
	Parms.FluctuationFactor = FluctuationFactor;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_FocusLocator.BPI_FocusLocator_C.SetLookForwardMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLookForwardMode                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_FocusLocator_C::SetLookForwardMode(bool IsLookForwardMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FocusLocator_C", "SetLookForwardMode");

	Params::BPI_FocusLocator_C_SetLookForwardMode Parms{};

	Parms.IsLookForwardMode = IsLookForwardMode;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

