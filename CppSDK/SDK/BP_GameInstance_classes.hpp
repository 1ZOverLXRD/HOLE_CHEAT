#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameInstance

#include "Basic.hpp"

#include "EN_GunPartsCategory_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "Str_DebugLogSetting_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "JsonUtilities_structs.hpp"
#include "InputCore_structs.hpp"
#include "EN_Faction_structs.hpp"
#include "Str_Faction_Relationship_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "EN_WeaponPartsCategory_structs.hpp"
#include "WeaponSelector_structs.hpp"
#include "EN_WindowMode_structs.hpp"
#include "EN_DisplayResolution_structs.hpp"
#include "EN_FPSLimit_structs.hpp"
#include "EN_SaveGameObjType_structs.hpp"
#include "EN_Language_structs.hpp"
#include "EN_UserType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameInstance.BP_GameInstance_C
// 0x0330 (0x04F0 - 0x01C0)
class UBP_GameInstance_C final : public UGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<int32>                                 CollectionData;                                    // 0x01C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FString                                 SlotName_SaveData;                                 // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SlotName_ConfigData;                               // 0x01E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SlotName_KeymapData;                               // 0x01F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 SlotName_ReadOnlyData;                             // 0x0208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UPDA_GameVersionInfo_C*                 CurrentGameVersion;                                // 0x0218(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FStr_DebugLogSetting                   DebugLogSetting;                                   // 0x0220(0x0006)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FireTrace;                                         // 0x0226(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BulletSpeed;                                       // 0x0227(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AimAngleOutLog;                                    // 0x0228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CameraShake;                                       // 0x0229(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USGO_ReadOnlyData_C*                    ReadOnlyData;                                      // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USGO_SaveData_C*                        SaveData;                                          // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USGO_ConfigData_C*                      ConfigData;                                        // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USGO_KeymapData_C*                      KeymapData;                                        // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           LoadActionNames;                                   // 0x0250(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<class FName>                           LoadAxisNames;                                     // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	struct FLinearColor                           PrimaryColor;                                      // 0x0270(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SecondaryColor;                                    // 0x0280(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextColor;                                         // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextDeactiveColor;                                 // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             WeaponDB;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             GunBaseSpecDB;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             MeleeBaseSpecDB;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             SkillDB;                                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             GunPartsDB;                                        // 0x02D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             MeleePartsDB;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             AmmoDB;                                            // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsEqual;                                           // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             LevelDB;                                           // 0x02F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReturnToTitle;                                   // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             TaskDB;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             TaskItemDB;                                        // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ShopMachine;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RejectColor;                                       // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             ObjectDB;                                          // 0x0328(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             NPCDB;                                             // 0x0330(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<struct FKey, TSoftObjectPtr<class UTexture>> InputKeyIconDB;                                // 0x0338(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	class UDataTable*                             CashItemDB;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DataItemDB;                                        // 0x0390(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         RaytraceGroupID_Temp;                              // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsColorTeamMode;                                   // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPCFocusRender;                                    // 0x039D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPCTaskView;                                       // 0x039E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NPCAutoMantle;                                     // 0x039F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             OnceItemDB;                                        // 0x03A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             DiscDB;                                            // 0x03A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             HomeFacilityDB;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<EN_Faction, struct FStr_Faction_Relationship> Faction_Relationship_Frendry;                 // 0x03B8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                          IsSaveDataLoaded;                                  // 0x0408(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_409[0x7];                                      // 0x0409(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             FridgeDB;                                          // 0x0410(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           BlockWeaponPartsList;                              // 0x0418(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	bool                                          IsSendPlayData_GameEnd;                            // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FJsonObjectWrapper                     ApiRequestBodyJson;                                // 0x0430(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FJsonObjectWrapper                     Loot_Counts;                                       // 0x0450(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FJsonObjectWrapper                     Player_Weapon_Ids;                                 // 0x0470(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FJsonObjectWrapper                     Player_Death_Reason;                               // 0x0490(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           LoadActionNames_GP;                                // 0x04B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	TArray<class FName>                           LoadAxisNames_GP;                                  // 0x04C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance)
	uint8                                         SaveProgressCue;                                   // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ResultBody;                                        // 0x04D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsGamapadMode;                                     // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddActionKM(const struct FStr_ActionKeymap& ActionKeyMap);
	void AddAxisKM(const struct FStr_AxisKeymap& AxisKeyMap);
	void AddCollectionItem(int32 Collection_ID);
	void Apply_ConfigData();
	void Apply_KeymapData();
	void ApplyConfigData();
	void ApplyConfigData_Audio(uint8 Master, uint8 BGM, uint8 SE, uint8 UI);
	void ApplyConfigData_Control(int32 Sensitivity, int32 Sensitivity_ADS, int32 Sensitivity_ADS_Scope2x, int32 Sensitivity_ADS_Scope4x, bool InvertVerticalLook, bool ToggleSprint, bool ToggleWalk, bool ToggleAim, bool ToggleCrouch, bool ToggleLean, bool EnableWeaponScroll, bool InvertWeaponScroll, bool MouseSmoothing, bool DisableControlAxisRotationInLean, double GP_MovementDeadzone, double GP_LookDeadzone, double GP_ResponseCurve);
	void ApplyConfigData_Game(EN_Language Language, bool SendPlayData);
	void ApplyConfigData_Graphics(EN_WindowMode WindowMode, EN_DisplayResolution DisplayResolution, double Brightness, int32 FOV, EN_FPSLimit FPSLimit, bool RetroEffect, double CameraShake_0, bool VSync, bool DGI);
	void ApplyConfigData_UI(bool Crosshair, uint8 TaskIcon, uint8 HUDMode);
	void ApplyKeymapData_Gamepad(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap_Gamepad, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap_Gamepad);
	void ApplyKeymapData_KBM(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap);
	void Check_DataVersion(class UBase_SaveGameObject_C* SaveGameObject, bool* Need_to_Convert);
	void CheckGameSaveDataIsLoaded(bool* IsLoaded);
	void CheckSaveDataLoaded();
	void Create_NewData(EN_SaveGameObjType DataType);
	void ExecuteUbergraph_BP_GameInstance(int32 EntryPoint);
	void GetAAOLForFunctionLibrary(bool* AimAngleOutLog_0);
	void GetActionKeyDisplayName(const struct FStr_ActionKeymap& Key, class FName* Name_0);
	void GetAllEventProgress(TMap<class FName, int32>* EventProgress, bool* Success);
	void GetAllOnceItemDropRateFromDB(TMap<class FName, double>* AllOnceItemData, bool* Success);
	void GetAllSkillNameFromDB(TArray<class FName>* SkillRowName);
	void GetAllWeaponNameAndCategoryFromDB(bool* Success, TMap<class FName, struct FStr_WeaponNameAndSubCategory>* AllData);
	void GetAmmoSpecDataFromDB(class FName AmmoRowName, struct FStr_AmmoData* AmmoData, bool* Success);
	void GetArmorPointData(EPhysicalSurface SurfaceType, int32* ArmorPoint);
	void GetCashItemDataFromDB(class FName CashItemRowName, bool* Success, struct FStr_CashItemData* CashItemData);
	void GetCollectionItem(TArray<int32>* CollectionItem);
	void GetColorTeamMode(bool* IsColorTeamMode_0);
	void GetConfigData_All(class USGO_ConfigData_C** ConfigData_0);
	void GetConfigData_Game(uint8* Language, bool* SendPlayData);
	void GetConfigData_UI(bool* EnableCrosshair, uint8* TaskIcon, uint8* HUDMode);
	void GetDataItemDataFromDB(class FName DataItemRowName, bool* Success, struct FStr_DataItemData* DataItemData);
	void GetDebugFocusRender(bool* IsDebug);
	void GetDefaultConfigData(TMap<class FName, bool>* DefaultBool, TMap<class FName, uint8>* DefaultByte, TMap<class FName, int32>* DefaultInteger, TMap<class FName, double>* DefaultFloat);
	void GetDefaultKeymapData(TMap<class FName, struct FStr_AxisKeymap>* DefaultAxis_KBM, TMap<class FName, struct FStr_ActionKeymap>* DefaultAction_KBM, TMap<class FName, struct FStr_AxisKeymap>* DefaultAxis_GP, TMap<class FName, struct FStr_ActionKeymap>* DefaultAction_GP);
	void GetDiscDataFromDB(class FName DiscRowName, bool* Success, struct FStr_DiscType* DiscData);
	void GetDLSForFunctionLibrary(struct FStr_DebugLogSetting* DebugLogSetting_0);
	void GetEventProgress(class FName EventName, int32* Progress);
	void GetFactionalRelationShip(EN_Faction SelfFaction, EN_Faction OtherFaction, bool* IsFrendry);
	void GetFridgeDataFromDB(class FName FridgeRowName, struct FStr_FridgeData* FridgeData, bool* Success);
	void GetFTSForFunctionLibrary(bool* FireTrace_0, bool* BulletSpeed_0);
	void GetGunBaseSpecFromDB(class FName WeaponRowName, struct FStr_GunSpecData* GunBaseSpec, bool* Success);
	void GetGunPartsDataByCategoryFromDB(class FName WeaponRowName, EN_GunPartsCategory PartsCategory, TArray<class FName>* GunPartsRowNames, bool* Success);
	void GetGunPartsDataFromDB(class FName GunPartsRowName, struct FStr_GunPartsData* GunPartsData, bool* Success);
	void GetHitDamageMultiplierData(EPhysicalSurface HitSurfaceType, bool IsArmorPenetrated, double* DamageMultiplier);
	void GetHitStunDamageMultiplierData(EPhysicalSurface HitSurface, double* Multiplier);
	void GetHomeFacilityDataFromDB(class FName FacilityRowName, struct FStr_HomeFacilityData* FacilityData, bool* Success);
	void GetInputKeyByActionName(class FName ActionName, struct FStr_ActionKeymap* Key, bool* Success);
	void GetInputKeyIconMode(bool* IsGamepadMode);
	void GetIsReturnToTitle(bool* IsReturnToTitle_0);
	void GetKeyIconFromDB(const struct FKey& Key, class UTexture** Icon, bool* Success);
	void GetKeymapData_All(class USGO_KeymapData_C** KeymapData_0);
	void GetLevelDataImageFromDB(class FName AreaRowName, class UTexture2D** Image, bool* Success);
	void GetLevelNameFromDB(class FName AreaRowName, class FText* Name_0, bool* Success);
	void GetLockedWeaponPartsOnlyUnlockedWeapon(TArray<class FName>* WeaponPartsRowNames, bool* Success);
	void GetMeleeBaseSpecFromDB(class FName WeaponRowName, struct FStr_MeleeBaseSpecData* BaseSpec, bool* Success);
	void GetMeleePartsDataFromDB(class FName MeleePartsRowName, struct FStr_MeleePartsData* MeleePartsData, bool* Success);
	void GetNewTaskFromDB(class FName* NewTaskRowName, bool* IsRepeatTask, bool* Success);
	void GetNPCAutoMantle(bool* IsAutoMantle);
	void GetNPCDataFromDB(class FName NPCRowName, bool* Success, struct FStr_NPCData* NPC_Data);
	void GetNPCTaskViewMode(bool* IsEnable);
	void GetObjectDataFromDB(class FName ObjectRowName, struct FStr_ObjectData* ObjectData, bool* Success);
	void GetOnceItemDataFromDB(class FName OnceItemRowName, bool* Success, struct FStr_OnceItemData* OnceItemData);
	void GetPrototypeConfigData(bool* CameraShake_0);
	void GetRaytraceGropIDsFromGameInstance(int32* ID);
	void GetReward(const struct FStr_TaskReward& Reward);
	void GetSaveData_AreaUnlockData(TSet<class FName>* AreaUnlocked);
	void GetSaveData_ClearTaskCount(class FName TaskID, int32* Count);
	void GetSaveData_CurrentAmmo(TMap<EWeaponSelector, struct FStr_CurrentAmmo>* CurrentAmmo, bool* Success);
	void GetSaveData_CurrentTask(TMap<uint8, struct FStr_TaskCardState>* Task, bool* Success);
	void GetSaveData_CurrentTaskItems(class FName TaskItemRowName, int32* Amount);
	void GetSaveData_CurrentWeapon(EWeaponSelector* CurrentWeaponSelector);
	void GetSaveData_EquipWeaponData(TMap<EWeaponSelector, class FName>* WeaponData);
	void GetSaveData_IsClearedAllTask(bool* IsAllClear);
	void GetSaveData_IsUnlockedShopItem(class FName SkillRowName, bool* IsUnlocked);
	void GetSaveData_IsUnlockedWeaponPartsBlueprint(class FName WeaponPartsRowName, bool* IsUnlocked);
	void GetSaveData_PlayerStats(int32* Cash, int32* Data, TMap<class FName, int32>* Disc);
	void GetSaveData_PurchasedWeaponParts(TSet<class FName>* WeaponPartsRowName, bool* Success);
	void GetSaveData_RoomKeyUnlockData(class FName KeyName, bool* IsUnlocked);
	void GetSaveData_SkillLevel_Activated(class FName SkillRowName, bool* Success, int32* SkillLv);
	void GetSaveData_SkillLevel_Unlocked(class FName SkillRowName, bool* Success, int32* SkillLv);
	void GetSaveData_SkillLevel_UnlockedAll(TMap<class FName, int32>* Skill, bool* Success);
	void GetSaveData_UnlockGunIDList(TArray<class FName>* GunRowName, bool* Success);
	void GetSaveData_UnlockGunIDList_Length(int32* Length);
	void GetSaveData_UnlockWeapon(class FName WeaponRowName, bool* IsUnlock);
	void GetSaveData_WeaponCustomMetaData(class FName WeaponRowName, bool* Success, struct FStr_WeaponCustomMetaData* WeaponCustomMetaData);
	void GetSaveData_WeaponCustomSaveData(class FName WeaponRowName, bool* Success, struct FStr_WeaponCustomSaveData_Temp* WeaponCustomSaveData);
	void GetSkillDataFromDB(class FName RowName, bool* Success, struct FStr_SkillData* SkillData);
	void GetTaskDataFromDB(class FName TaskRowName, struct FStr_TaskData* TaskData, bool* Success);
	void GetTaskItemDataFromDB(class FName TaskItemRowName, struct FStr_TaskItemData* TaskItemData, bool* Success);
	void GetUIColor(struct FLinearColor* PrimaryColor_0, struct FLinearColor* SecondaryColor_0, struct FLinearColor* TextActiveColor, struct FLinearColor* TextDeactiveColor_0, struct FLinearColor* RejectColor_0);
	void GetWeaponDataFromDB(class FName RowName, bool* Success, struct FStr_WeaponData* WeaponData);
	void GetWeaponPartsDataFromDB(class FName WeaponPartsRowName, EN_WeaponPartsCategory* WeaponPartsCategory, struct FStr_GunPartsData* GunPartsData, struct FStr_MeleePartsData* MeleePartsData, bool* Success);
	void HandOverTaskItem(const TMap<class FName, int32>& RequireItem);
	void Initialize_SGOData();
	void InitializeRaytraceGroupID();
	void LinkCheckDB();
	void Load_ConfigData(class USGO_ConfigData_C* ConfigData_0);
	void Load_KeymapData(class USGO_KeymapData_C* KeymapData_0);
	void Load_ReadOnlyData(class USGO_ReadOnlyData_C* ReadOnlyData_0);
	void Load_SaveData(class USGO_SaveData_C* SaveData_0);
	void Load_SGO(const class FString& SlotName, bool* Success, class UBase_SaveGameObject_C** LoadedSGO);
	void LoadCollectionData();
	void OnRequestComplete_09D7BE344661219168791889D67AA0CD(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader);
	void OnRequestComplete_576344C64ADCF71BB00D18A97E797E82(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader);
	void OnRequestComplete_A09BEA034B038482C19200BB8AB62FED(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader);
	void OnRequestComplete_DB2E9F6E4F78A622F4A1F79948D87521(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader);
	void ReceiveInit();
	void RecoveryLostData_ConfigData(class FName Key);
	void RemoveAllKeyMapping();
	void ResetSaveData();
	void ResetSaveData_PlayerStats();
	void ResetSGOData();
	void Save_ConfigData(bool* Success);
	void Save_KeymapData(bool* Success);
	void Save_ReadOnlyData(bool* Success);
	void Save_SaveData(bool* Success);
	void SaveCollectionData();
	void SaveProgressCue_Add();
	void SaveProgressCue_Remove();
	void SaveProgressCue_Reset();
	void SaveSaveData_All(bool* Success);
	void SendPlayData_GameEnd();
	void SendPlayData_GameStart();
	void SendPlayData_Initialize();
	void SendPlayData_Result(const struct FStr_SendPlayData_Result& ResultData);
	void Set_ConfigData_Audio(uint8 Master, uint8 BGM, uint8 SE, uint8 UI);
	void Set_ConfigData_Control(int32 Sensitivity, int32 Sensitivity_ADS, int32 Sensitivity_ADS_Scope2x, int32 Sensitivity_ADS_Scope4x, bool InvertVerticalLook, bool ToggleSprint, bool ToggleWalk, bool ToggleAim, bool ToggleCrouch, bool ToggleLean, bool EnableWeaponScroll, bool InvertWeaponScroll, bool MouseSmoothing, bool DisableControlAxisRotationInLean, double GP_MovementDeadzone, double GP_LookDeadzone, double GP_ResponseCurve);
	void Set_ConfigData_Game(uint8 Language, bool SendPlayData);
	void Set_ConfigData_Graphics(EN_WindowMode WindowMode, EN_DisplayResolution DisplayResolution, double Brightness, int32 FOV, EN_FPSLimit FPSLimit, bool RetroEffect, double CameraShake_0, bool VSync, bool DGI);
	void Set_ConfigData_UI(bool Crosshair, uint8 TaskIcon, const uint8& HUDMode);
	void Set_KeymapData_Gamepad(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap_Gamepad, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap_Gamepad);
	void Set_KeymapData_KBM(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap_KBM, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap_KBM);
	void Set_ReadOnlyData(const class FString& UserId);
	void SetColorTeamMode(bool IsColorTeamMode_0);
	void SetEventProgress(class FName EventName, int32 Progress);
	void SetInputKeyIconMode(bool IsGamapadMode_0);
	void SetIsReturnToTitle(bool IsReturnToTitle_0);
	void SetSaveData_AddAllPurchasedWeaponParts();
	void SetSaveData_AddClearTaskCounts(class FName Task);
	void SetSaveData_AddPurchasedWeaponParts(const TArray<class FName>& WeaponPartsRowName);
	void SetSaveData_CurrentAmmo(const TMap<EWeaponSelector, struct FStr_CurrentAmmo>& CurrentAmmo);
	void SetSaveData_CurrentTask(const TMap<uint8, struct FStr_TaskCardState>& CurrentTask);
	void SetSaveData_CurrentTaskItems(class FName TaskItemRowName, int32 Amount);
	void SetSaveData_CurrentWeapon();
	void SetSaveData_EquipWeaponData();
	void SetSaveData_PlayerStats(int32 Cash, int32 Data, const TMap<class FName, int32>& Disc);
	void SetSaveData_SkillLevel_Activated(class FName SkillRowName, int32 SkillLv);
	void SetSaveData_SkillLevel_Unlocked(class FName SkillRowName, int32 SkillLv);
	void SetSaveData_UnlockedAllWeaponPartsBlueprint();
	void SetSaveData_UnlockedWeaponPartsBlueprint(class FName PartsRowName);
	void SetSaveData_UnlockWeapon(class FName WeaponRowName, bool IsUnlock);
	void SetSaveData_WeaponCustomSaveData(class FName WeaponRowName, const struct FStr_WeaponCustomSaveData_Temp& WeaponCustomSaveData, bool* Success);
	void SetShopMachine(class AActor* Machine);
	void TempApply_Graphics_Brightness(double Brightness);
	void TempApply_Graphics_FOV(int32 FieldOfView);
	void TempApply_Graphics_RetroEffect(bool RetroEffect);
	void UnlockMultiParts(class FName WeaponPartsRowName);
	void Update_ConfigData(class UBase_SaveGameObject_C* SaveGameObject, class USGO_ConfigData_C** CovertedData);
	void Update_KeymapData(class UBase_SaveGameObject_C* SaveGameObject, class USGO_KeymapData_C** CovertedData);
	void Update_SaveData(class UBase_SaveGameObject_C* SaveGameObject, class USGO_SaveData_C** CovertedData);
	void UseCash(int32 Cash, bool* Success);
	void UseConsole();
	void UseData(int32 Data, bool* Success);
	void UseDisc(const struct FStr_DiscType_Amount& Disc, bool* Success);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BP_GameInstance_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BP_GameInstance_C")
	}
	static class UBP_GameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameInstance_C>();
	}
};
DUMPER7_ASSERTS_UBP_GameInstance_C;

}

