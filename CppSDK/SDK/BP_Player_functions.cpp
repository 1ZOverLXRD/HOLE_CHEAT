#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Player

#include "Basic.hpp"

#include "BP_Player_classes.hpp"
#include "BP_Player_parameters.hpp"


namespace SDK
{

// Function BP_Player.BP_Player_C.ActivateCamera
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Camera                               ActivateCamera_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::ActivateCamera(EN_Camera ActivateCamera_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ActivateCamera");

	Params::BP_Player_C_ActivateCamera Parms{};

	Parms.ActivateCamera_0 = ActivateCamera_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.AimCameraControl
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSecond                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::AimCameraControl(double DeltaSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "AimCameraControl");

	Params::BP_Player_C_AimCameraControl Parms{};

	Parms.DeltaSecond = DeltaSecond;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.AimCameraControl_WeaponSwitch
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::AimCameraControl_WeaponSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "AimCameraControl_WeaponSwitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_12_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Player_C::BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_12_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_12_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_Player_C_BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_12_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_13_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_13_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_13_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_Player_C_BndEvt__BP_Player_CapsuleComponent_K2Node_ComponentBoundEvent_13_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Player_C::BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_Player_C_BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_14_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_15_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_15_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_15_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_Player_C_BndEvt__BP_Player_ItemMagnetCollision_K2Node_ComponentBoundEvent_15_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_16_ComponentBeginOverlapSignature__DelegateSignature
// (HasOutParams, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Player_C::BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_16_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_16_ComponentBeginOverlapSignature__DelegateSignature");

	Params::BP_Player_C_BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_16_ComponentBeginOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_17_ComponentEndOverlapSignature__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_17_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_17_ComponentEndOverlapSignature__DelegateSignature");

	Params::BP_Player_C_BndEvt__BP_Player_ItemOutlineCollision_K2Node_ComponentBoundEvent_17_ComponentEndOverlapSignature__DelegateSignature Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_StateManager_K2Node_ComponentBoundEvent_11_HealHP_Call__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_StateManager_K2Node_ComponentBoundEvent_11_HealHP_Call__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_StateManager_K2Node_ComponentBoundEvent_11_HealHP_Call__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_StateManager_K2Node_ComponentBoundEvent_5_RegenerateHP_Call__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_StateManager_K2Node_ComponentBoundEvent_5_RegenerateHP_Call__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_StateManager_K2Node_ComponentBoundEvent_5_RegenerateHP_Call__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_0_SwitchedWeapon__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_0_SwitchedWeapon__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_0_SwitchedWeapon__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_10_RefreshWeapon__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_10_RefreshWeapon__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_10_RefreshWeapon__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_1_FiredWeapon__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_1_FiredWeapon__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_1_FiredWeapon__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_2_ReloadStart__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_2_ReloadStart__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_2_ReloadStart__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_3_ReloadEnd__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_3_ReloadEnd__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_3_ReloadEnd__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_4_ChamberActionEnd__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_4_ChamberActionEnd__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_4_ChamberActionEnd__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_6_InitializeCurrentAmmo__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_6_InitializeCurrentAmmo__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_6_InitializeCurrentAmmo__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_7_SwitchedFireMode__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_7_SwitchedFireMode__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_7_SwitchedFireMode__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_8_SwitchedWeaponLight__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_8_SwitchedWeaponLight__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_8_SwitchedWeaponLight__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_9_GunStopped__DelegateSignature
// (BlueprintEvent)

void ABP_Player_C::BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_9_GunStopped__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BndEvt__BP_Player_WeaponManager_K2Node_ComponentBoundEvent_9_GunStopped__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.BPI_Get_3P_PivotTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform ABP_Player_C::BPI_Get_3P_PivotTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BPI_Get_3P_PivotTarget");

	Params::BP_Player_C_BPI_Get_3P_PivotTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Player.BP_Player_C.BPI_Get_3P_TraceParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         TraceOrigin                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 TraceRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery*                        TraceChannel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BPI_Get_3P_TraceParams");

	Params::BP_Player_C_BPI_Get_3P_TraceParams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TraceOrigin != nullptr)
		*TraceOrigin = std::move(Parms.TraceOrigin);

	if (TraceRadius != nullptr)
		*TraceRadius = Parms.TraceRadius;

	if (TraceChannel != nullptr)
		*TraceChannel = Parms.TraceChannel;
}


// Function BP_Player.BP_Player_C.BPI_Get_CurrentStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode*                          PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState*                     MovementState_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState*                     PrevMovementState_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementAction*                    MovementAction_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_RotationMode*                      RotationMode_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait*                              ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Stance*                            ActualStance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_ViewMode*                          ViewMode_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState*                      OverlayState_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELeanState*                             LeanState_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponMotionState*                     WeaponMotionState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState_0, EALS_MovementState* PrevMovementState_0, EALS_MovementAction* MovementAction_0, EALS_RotationMode* RotationMode_0, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode_0, EALS_OverlayState* OverlayState_0, ELeanState* LeanState_0, EWeaponMotionState* WeaponMotionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BPI_Get_CurrentStates");

	Params::BP_Player_C_BPI_Get_CurrentStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (MovementState_0 != nullptr)
		*MovementState_0 = Parms.MovementState_0;

	if (PrevMovementState_0 != nullptr)
		*PrevMovementState_0 = Parms.PrevMovementState_0;

	if (MovementAction_0 != nullptr)
		*MovementAction_0 = Parms.MovementAction_0;

	if (RotationMode_0 != nullptr)
		*RotationMode_0 = Parms.RotationMode_0;

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;

	if (ActualStance != nullptr)
		*ActualStance = Parms.ActualStance;

	if (ViewMode_0 != nullptr)
		*ViewMode_0 = Parms.ViewMode_0;

	if (OverlayState_0 != nullptr)
		*OverlayState_0 = Parms.OverlayState_0;

	if (LeanState_0 != nullptr)
		*LeanState_0 = Parms.LeanState_0;

	if (WeaponMotionState != nullptr)
		*WeaponMotionState = Parms.WeaponMotionState;
}


// Function BP_Player.BP_Player_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Acceleration_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsMoving_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasMovementInput_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MovementInputAmount_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        AimingRotation_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 AimYawRate_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraRollAngle_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraPitchAngle_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 RecoilHandAngle_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTriggerPull                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTriggerOFF                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HandIK_Location_L_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        HandIK_Rotation_L_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 HoldBreathFactor_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 LeanAlpha_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   WeaponAttachHandIsRight                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsPlayer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 PlayerHeadBobAlpha_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_KickAnimValue*              KickAnimValue_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration_0, struct FVector* MovementInput, bool* IsMoving_0, bool* HasMovementInput_0, double* Speed_0, double* MovementInputAmount_0, struct FRotator* AimingRotation_0, double* AimYawRate_0, double* CameraRollAngle_0, double* CameraPitchAngle_0, double* RecoilHandAngle_0, bool* IsTriggerPull, bool* IsTriggerOFF, struct FVector* HandIK_Location_L_0, struct FRotator* HandIK_Rotation_L_0, double* HoldBreathFactor_0, double* LeanAlpha_0, bool* WeaponAttachHandIsRight, bool* IsPlayer, double* PlayerHeadBobAlpha_0, struct FStr_KickAnimValue* KickAnimValue_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BPI_Get_EssentialValues");

	Params::BP_Player_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration_0 != nullptr)
		*Acceleration_0 = std::move(Parms.Acceleration_0);

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (IsMoving_0 != nullptr)
		*IsMoving_0 = Parms.IsMoving_0;

	if (HasMovementInput_0 != nullptr)
		*HasMovementInput_0 = Parms.HasMovementInput_0;

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (MovementInputAmount_0 != nullptr)
		*MovementInputAmount_0 = Parms.MovementInputAmount_0;

	if (AimingRotation_0 != nullptr)
		*AimingRotation_0 = std::move(Parms.AimingRotation_0);

	if (AimYawRate_0 != nullptr)
		*AimYawRate_0 = Parms.AimYawRate_0;

	if (CameraRollAngle_0 != nullptr)
		*CameraRollAngle_0 = Parms.CameraRollAngle_0;

	if (CameraPitchAngle_0 != nullptr)
		*CameraPitchAngle_0 = Parms.CameraPitchAngle_0;

	if (RecoilHandAngle_0 != nullptr)
		*RecoilHandAngle_0 = Parms.RecoilHandAngle_0;

	if (IsTriggerPull != nullptr)
		*IsTriggerPull = Parms.IsTriggerPull;

	if (IsTriggerOFF != nullptr)
		*IsTriggerOFF = Parms.IsTriggerOFF;

	if (HandIK_Location_L_0 != nullptr)
		*HandIK_Location_L_0 = std::move(Parms.HandIK_Location_L_0);

	if (HandIK_Rotation_L_0 != nullptr)
		*HandIK_Rotation_L_0 = std::move(Parms.HandIK_Rotation_L_0);

	if (HoldBreathFactor_0 != nullptr)
		*HoldBreathFactor_0 = Parms.HoldBreathFactor_0;

	if (LeanAlpha_0 != nullptr)
		*LeanAlpha_0 = Parms.LeanAlpha_0;

	if (WeaponAttachHandIsRight != nullptr)
		*WeaponAttachHandIsRight = Parms.WeaponAttachHandIsRight;

	if (IsPlayer != nullptr)
		*IsPlayer = Parms.IsPlayer;

	if (PlayerHeadBobAlpha_0 != nullptr)
		*PlayerHeadBobAlpha_0 = Parms.PlayerHeadBobAlpha_0;

	if (KickAnimValue_0 != nullptr)
		*KickAnimValue_0 = std::move(Parms.KickAnimValue_0);
}


// Function BP_Player.BP_Player_C.BPI_Get_FP_CameraTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_Player_C::BPI_Get_FP_CameraTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BPI_Get_FP_CameraTarget");

	Params::BP_Player_C_BPI_Get_FP_CameraTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Player.BP_Player_C.BPI_TeleportCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Player_C::BPI_TeleportCharacter(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BPI_TeleportCharacter");

	Params::BP_Player_C_BPI_TeleportCharacter Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.BulletHitEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HitDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HitStunPower                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Damage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Stun                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Time                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Interval                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPenetrated                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   AttackLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ShooterActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMultipleShot                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ShotID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AmmoRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::BulletHitEvent(const struct FVector& HitLocation, const struct FVector& HitDirection, double HitDamage, double HitStunPower, double DoT_Damage, double DoT_Stun, double DoT_Time, double DoT_Interval, bool IsPenetrated, class FName HitBoneName, const struct FVector& AttackLocation, class AActor* ShooterActor, EPhysicalSurface HitSurfaceType, bool IsMultipleShot, class FName ShotID, class FName AmmoRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "BulletHitEvent");

	Params::BP_Player_C_BulletHitEvent Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDirection = std::move(HitDirection);
	Parms.HitDamage = HitDamage;
	Parms.HitStunPower = HitStunPower;
	Parms.DoT_Damage = DoT_Damage;
	Parms.DoT_Stun = DoT_Stun;
	Parms.DoT_Time = DoT_Time;
	Parms.DoT_Interval = DoT_Interval;
	Parms.IsPenetrated = IsPenetrated;
	Parms.HitBoneName = HitBoneName;
	Parms.AttackLocation = std::move(AttackLocation);
	Parms.ShooterActor = ShooterActor;
	Parms.HitSurfaceType = HitSurfaceType;
	Parms.IsMultipleShot = IsMultipleShot;
	Parms.ShotID = ShotID;
	Parms.AmmoRowName = AmmoRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.CameraShakeSwitch
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::CameraShakeSwitch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "CameraShakeSwitch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Chambering_BoltCatchRelease
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Chambering_BoltCatchRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Chambering_BoltCatchRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ChangeEquipWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector                         WeaponSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::ChangeEquipWeapon(EWeaponSelector WeaponSlot, class UClass* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ChangeEquipWeapon");

	Params::BP_Player_C_ChangeEquipWeapon Parms{};

	Parms.WeaponSlot = WeaponSlot;
	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.CheckInventoryItemByID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::CheckInventoryItemByID(class FName ItemId, int32* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "CheckInventoryItemByID");

	Params::BP_Player_C_CheckInventoryItemByID Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function BP_Player.BP_Player_C.CheckIsIndoor
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::CheckIsIndoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "CheckIsIndoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.CheckWeaponIsLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::CheckWeaponIsLoaded(bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "CheckWeaponIsLoaded");

	Params::BP_Player_C_CheckWeaponIsLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_Player.BP_Player_C.ClearShotData
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::ClearShotData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ClearShotData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ConevertIntegerToFloatRate
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   inInt                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Rate                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::ConevertIntegerToFloatRate(int32 inInt, double* Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ConevertIntegerToFloatRate");

	Params::BP_Player_C_ConevertIntegerToFloatRate Parms{};

	Parms.inInt = inInt;

	UObject::ProcessEvent(Func, &Parms);

	if (Rate != nullptr)
		*Rate = Parms.Rate;
}


// Function BP_Player.BP_Player_C.CountTargetKill
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AliveTarget                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::CountTargetKill(int32 AliveTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "CountTargetKill");

	Params::BP_Player_C_CountTargetKill Parms{};

	Parms.AliveTarget = AliveTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.DamagePPEffect
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::DamagePPEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "DamagePPEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.DoTEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Stun                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttackerRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AmmoRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::DoTEvent(double Damage, double Stun, class FName AttackerRowName, class FName AmmoRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "DoTEvent");

	Params::BP_Player_C_DoTEvent Parms{};

	Parms.Damage = Damage;
	Parms.Stun = Stun;
	Parms.AttackerRowName = AttackerRowName;
	Parms.AmmoRowName = AmmoRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.EndTutorial
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::EndTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "EndTutorial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.EndTutorial_Meta
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::EndTutorial_Meta()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "EndTutorial_Meta");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ExecuteUbergraph_BP_Player
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::ExecuteUbergraph_BP_Player(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ExecuteUbergraph_BP_Player");

	Params::BP_Player_C_ExecuteUbergraph_BP_Player Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.FireAngleDebug
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::FireAngleDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "FireAngleDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.FireAngleDebugUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::FireAngleDebugUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "FireAngleDebugUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.GetBodyPartsLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_BodyPartsName                        Parts                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetBodyPartsLocation(EN_BodyPartsName Parts, struct FVector* Location, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetBodyPartsLocation");

	Params::BP_Player_C_GetBodyPartsLocation Parms{};

	Parms.Parts = Parts;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_Player.BP_Player_C.GetCurrentAmmoFromPlayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<EWeaponSelector, struct FStr_CurrentAmmo>*CurrentAmmo                                            (Parm, OutParm)

void ABP_Player_C::GetCurrentAmmoFromPlayer(TMap<EWeaponSelector, struct FStr_CurrentAmmo>* CurrentAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetCurrentAmmoFromPlayer");

	Params::BP_Player_C_GetCurrentAmmoFromPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentAmmo != nullptr)
		*CurrentAmmo = std::move(Parms.CurrentAmmo);
}


// Function BP_Player.BP_Player_C.GetCurrentWeaponSelector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector*                        CurrentWeaponSelector                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetCurrentWeaponSelector(EWeaponSelector* CurrentWeaponSelector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetCurrentWeaponSelector");

	Params::BP_Player_C_GetCurrentWeaponSelector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentWeaponSelector != nullptr)
		*CurrentWeaponSelector = Parms.CurrentWeaponSelector;
}


// Function BP_Player.BP_Player_C.GetDebugMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_DebugMode*                           DebugMode_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetDebugMode(EN_DebugMode* DebugMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetDebugMode");

	Params::BP_Player_C_GetDebugMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DebugMode_0 != nullptr)
		*DebugMode_0 = Parms.DebugMode_0;
}


// Function BP_Player.BP_Player_C.GetEquipWeaponNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<EWeaponSelector, class FName>*     EquipWeapon                                            (Parm, OutParm)

void ABP_Player_C::GetEquipWeaponNames(TMap<EWeaponSelector, class FName>* EquipWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetEquipWeaponNames");

	Params::BP_Player_C_GetEquipWeaponNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EquipWeapon != nullptr)
		*EquipWeapon = std::move(Parms.EquipWeapon);
}


// Function BP_Player.BP_Player_C.GetFaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Faction*                             Faction_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetFaction(EN_Faction* Faction_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetFaction");

	Params::BP_Player_C_GetFaction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Faction_0 != nullptr)
		*Faction_0 = Parms.Faction_0;
}


// Function BP_Player.BP_Player_C.GetFootSoundVolumeMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetFootSoundVolumeMultiplier(double* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetFootSoundVolumeMultiplier");

	Params::BP_Player_C_GetFootSoundVolumeMultiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function BP_Player.BP_Player_C.GetGetUpAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RagdollFaceUp_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* ABP_Player_C::GetGetUpAnimation(bool RagdollFaceUp_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetGetUpAnimation");

	Params::BP_Player_C_GetGetUpAnimation Parms{};

	Parms.RagdollFaceUp_0 = RagdollFaceUp_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Player.BP_Player_C.GetHP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 HP                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MaxHP_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetHP(double* HP, double* MaxHP_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetHP");

	Params::BP_Player_C_GetHP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HP != nullptr)
		*HP = Parms.HP;

	if (MaxHP_0 != nullptr)
		*MaxHP_0 = Parms.MaxHP_0;
}


// Function BP_Player.BP_Player_C.GetIsIndoor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsIndoor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetIsIndoor(bool* IsIndoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetIsIndoor");

	Params::BP_Player_C_GetIsIndoor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsIndoor != nullptr)
		*IsIndoor = Parms.IsIndoor;
}


// Function BP_Player.BP_Player_C.GetMantleAsset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMantle_Asset                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FMantle_Asset ABP_Player_C::GetMantleAsset(EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetMantleAsset");

	Params::BP_Player_C_GetMantleAsset Parms{};

	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Player.BP_Player_C.GetPlayerCameraPositionAndDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         position                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Direction                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraFOV                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::GetPlayerCameraPositionAndDirection(struct FVector* position, struct FVector* Direction, double* CameraFOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetPlayerCameraPositionAndDirection");

	Params::BP_Player_C_GetPlayerCameraPositionAndDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (position != nullptr)
		*position = std::move(Parms.position);

	if (Direction != nullptr)
		*Direction = std::move(Parms.Direction);

	if (CameraFOV != nullptr)
		*CameraFOV = Parms.CameraFOV;
}


// Function BP_Player.BP_Player_C.GetRollAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* ABP_Player_C::GetRollAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "GetRollAnimation");

	Params::BP_Player_C_GetRollAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Player.BP_Player_C.HealHP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::HealHP(double HealAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HealHP");

	Params::BP_Player_C_HealHP Parms{};

	Parms.HealAmount = HealAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.HideCashData
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::HideCashData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HideCashData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.HideCrosshair
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::HideCrosshair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HideCrosshair");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.HideHud
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::HideHud()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HideHud");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.HideInteractUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAnim                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::HideInteractUI(bool IsAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HideInteractUI");

	Params::BP_Player_C_HideInteractUI Parms{};

	Parms.IsAnim = IsAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.HitPPEfect
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::HitPPEfect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HitPPEfect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.HUD_SetBarrelHeat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Heat                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Normalized                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::HUD_SetBarrelHeat(double Heat, double Normalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HUD_SetBarrelHeat");

	Params::BP_Player_C_HUD_SetBarrelHeat Parms{};

	Parms.Heat = Heat;
	Parms.Normalized = Normalized;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.HUD_SetHoleProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::HUD_SetHoleProgress(double Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HUD_SetHoleProgress");

	Params::BP_Player_C_HUD_SetHoleProgress Parms{};

	Parms.Percent = Percent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.HUD_SetTask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_TaskUI                               Task                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::HUD_SetTask(EN_TaskUI Task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "HUD_SetTask");

	Params::BP_Player_C_HUD_SetTask Parms{};

	Parms.Task = Task;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.InitializeHUD
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FirstVisibility                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_TaskUI                               StartTask                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::InitializeHUD(bool FirstVisibility, EN_TaskUI StartTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "InitializeHUD");

	Params::BP_Player_C_InitializeHUD Parms{};

	Parms.FirstVisibility = FirstVisibility;
	Parms.StartTask = StartTask;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.InpActEvt_CheckNavigationIcon_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Player_C::InpActEvt_CheckNavigationIcon_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "InpActEvt_CheckNavigationIcon_K2Node_InputActionEvent_0");

	Params::BP_Player_C_InpActEvt_CheckNavigationIcon_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.InpActEvt_End_K2Node_InputDebugKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_Player_C::InpActEvt_End_K2Node_InputDebugKeyEvent_0(const struct FKey& Key, const struct FInputActionValue& ActionValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "InpActEvt_End_K2Node_InputDebugKeyEvent_0");

	Params::BP_Player_C_InpActEvt_End_K2Node_InputDebugKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);
	Parms.ActionValue = std::move(ActionValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Player_C::InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_0");

	Params::BP_Player_C_InpActEvt_Gamepad_DPad_Down_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Player_C::InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_1");

	Params::BP_Player_C_InpActEvt_Gamepad_DPad_Up_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.InpActEvt_Home_K2Node_InputDebugKeyEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void ABP_Player_C::InpActEvt_Home_K2Node_InputDebugKeyEvent_1(const struct FKey& Key, const struct FInputActionValue& ActionValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "InpActEvt_Home_K2Node_InputDebugKeyEvent_1");

	Params::BP_Player_C_InpActEvt_Home_K2Node_InputDebugKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);
	Parms.ActionValue = std::move(ActionValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.Cancel_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Player_C::Cancel_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Cancel_K2Node_InputActionEvent_1");

	Params::BP_Player_C_Cancel_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.InpActEvt_SwitchFireMode_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_Player_C::InpActEvt_SwitchFireMode_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "InpActEvt_SwitchFireMode_K2Node_InputActionEvent_2");

	Params::BP_Player_C_InpActEvt_SwitchFireMode_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.KickTrace
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::KickTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "KickTrace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.LeanAlphaControl
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::LeanAlphaControl(bool In, bool IsRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "LeanAlphaControl");

	Params::BP_Player_C_LeanAlphaControl Parms{};

	Parms.In = In;
	Parms.IsRight = IsRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.MantleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::MantleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "MantleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.MantleStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MantleHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FALS_ComponentAndTransform&MantleLedgeWS                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "MantleStart");

	Params::BP_Player_C_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.OBJ001_SetMovieOpacity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Opacity                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNothing                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::OBJ001_SetMovieOpacity(double Opacity, bool IsNothing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "OBJ001_SetMovieOpacity");

	Params::BP_Player_C_OBJ001_SetMovieOpacity Parms{};

	Parms.Opacity = Opacity;
	Parms.IsNothing = IsNothing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.OBJ002_LightNoise
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::OBJ002_LightNoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "OBJ002_LightNoise");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.OBJ003_SightControl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CameraMoveIntensity                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Entity                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::OBJ003_SightControl(double CameraMoveIntensity, double Damage, class AActor* Entity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "OBJ003_SightControl");

	Params::BP_Player_C_OBJ003_SightControl Parms{};

	Parms.CameraMoveIntensity = CameraMoveIntensity;
	Parms.Damage = Damage;
	Parms.Entity = Entity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.OnOverlayStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::OnOverlayStateChanged(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "OnOverlayStateChanged");

	Params::BP_Player_C_OnOverlayStateChanged Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.OpenShellCarrier
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::OpenShellCarrier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "OpenShellCarrier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.PlayerInput_AimMotion
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AimIN                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MuteSE                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_AimMotion(bool AimIN, bool MuteSE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_AimMotion");

	Params::BP_Player_C_PlayerInput_AimMotion Parms{};

	Parms.AimIN = AimIN;
	Parms.MuteSE = MuteSE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_AimMotion_CanAim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanAim                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_AimMotion_CanAim(bool* CanAim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_AimMotion_CanAim");

	Params::BP_Player_C_PlayerInput_AimMotion_CanAim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanAim != nullptr)
		*CanAim = Parms.CanAim;
}


// Function BP_Player.BP_Player_C.PlayerInput_Charge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Press_Released                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_Charge(bool Press_Released)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_Charge");

	Params::BP_Player_C_PlayerInput_Charge Parms{};

	Parms.Press_Released = Press_Released;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_HoldBreath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_HoldBreath(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_HoldBreath");

	Params::BP_Player_C_PlayerInput_HoldBreath Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_Interact
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::PlayerInput_Interact()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_Interact");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.PlayerInput_Lean
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsRight                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_Lean(bool In, bool IsRight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_Lean");

	Params::BP_Player_C_PlayerInput_Lean Parms{};

	Parms.In = In;
	Parms.IsRight = IsRight;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_MeleeAttack
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Press_Released                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_MeleeAttack(bool Press_Released)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_MeleeAttack");

	Params::BP_Player_C_PlayerInput_MeleeAttack Parms{};

	Parms.Press_Released = Press_Released;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_ReloadWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::PlayerInput_ReloadWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_ReloadWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.PlayerInput_ScrollWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUp                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_ScrollWeapon(bool IsUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_ScrollWeapon");

	Params::BP_Player_C_PlayerInput_ScrollWeapon Parms{};

	Parms.IsUp = IsUp;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_SwitchLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPressed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_SwitchLight(bool IsPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_SwitchLight");

	Params::BP_Player_C_PlayerInput_SwitchLight Parms{};

	Parms.IsPressed = IsPressed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_SwitchWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector                         SwitchTo                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_SwitchWeapon(EWeaponSelector SwitchTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_SwitchWeapon");

	Params::BP_Player_C_PlayerInput_SwitchWeapon Parms{};

	Parms.SwitchTo = SwitchTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.PlayerInput_UseWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Press_Released                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::PlayerInput_UseWeapon(bool Press_Released)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "PlayerInput_UseWeapon");

	Params::BP_Player_C_PlayerInput_UseWeapon Parms{};

	Parms.Press_Released = Press_Released;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.RagdollEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::RagdollEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "RagdollEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.RagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "RagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Player_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ReceiveEndPlay");

	Params::BP_Player_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ReceiveTick");

	Params::BP_Player_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.ReCheckIsIndoor
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::ReCheckIsIndoor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ReCheckIsIndoor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Recoil
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Recoil_Horizontal                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Recoil_Vertical                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::Recoil(double Recoil_Horizontal, double Recoil_Vertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Recoil");

	Params::BP_Player_C_Recoil Parms{};

	Parms.Recoil_Horizontal = Recoil_Horizontal;
	Parms.Recoil_Vertical = Recoil_Vertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.RefreshCashData
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::RefreshCashData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "RefreshCashData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.RefreshHUD
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Crosshair                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   TaskIcon                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   HUDMode                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::RefreshHUD(bool Crosshair, uint8 TaskIcon, uint8 HUDMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "RefreshHUD");

	Params::BP_Player_C_RefreshHUD Parms{};

	Parms.Crosshair = Crosshair;
	Parms.TaskIcon = TaskIcon;
	Parms.HUDMode = HUDMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.RefreshWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::RefreshWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "RefreshWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.RefreshWeaponCustomData
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::RefreshWeaponCustomData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "RefreshWeaponCustomData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_DetachMag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_DetachMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_DetachMag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_DropMag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_DropMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_DropMag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_InsertMag_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_InsertMag_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_InsertMag_Begin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_InsertMag_Block
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_InsertMag_Block()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_InsertMag_Block");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_InsertMag_End
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_InsertMag_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_InsertMag_End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_InsertShell_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_InsertShell_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_InsertShell_Begin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_InsertShell_End
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_InsertShell_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_InsertShell_End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_TakeNewMag
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_TakeNewMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_TakeNewMag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Reload_TakeNewShell
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::Reload_TakeNewShell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Reload_TakeNewShell");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ResetInteractLineTrace
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::ResetInteractLineTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ResetInteractLineTrace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SendShotData
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SendShotData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SendShotData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ResetColors
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::ResetColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ResetColors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetBaseBrightness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BaseBrightness                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetBaseBrightness(double BaseBrightness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetBaseBrightness");

	Params::BP_Player_C_SetBaseBrightness Parms{};

	Parms.BaseBrightness = BaseBrightness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetBrightness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Brightness                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetBrightness(double Brightness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetBrightness");

	Params::BP_Player_C_SetBrightness Parms{};

	Parms.Brightness = Brightness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetCameraShake
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CameraShake_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetCameraShake(double CameraShake_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetCameraShake");

	Params::BP_Player_C_SetCameraShake Parms{};

	Parms.CameraShake_0 = CameraShake_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetCapture2D
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetCapture2D(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetCapture2D");

	Params::BP_Player_C_SetCapture2D Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetCurrentAmmoToPlayer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EWeaponSelector, struct FStr_CurrentAmmo>&CurrentAmmo                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Player_C::SetCurrentAmmoToPlayer(const TMap<EWeaponSelector, struct FStr_CurrentAmmo>& CurrentAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetCurrentAmmoToPlayer");

	Params::BP_Player_C_SetCurrentAmmoToPlayer Parms{};

	Parms.CurrentAmmo = std::move(CurrentAmmo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetDebugCameraMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Camera                               CameraPosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetDebugCameraMode(EN_Camera CameraPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetDebugCameraMode");

	Params::BP_Player_C_SetDebugCameraMode Parms{};

	Parms.CameraPosition = CameraPosition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetDebugMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_DebugMode                            DebugMode_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetDebugMode(EN_DebugMode DebugMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetDebugMode");

	Params::BP_Player_C_SetDebugMode Parms{};

	Parms.DebugMode_0 = DebugMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetDebugPlayerVisibility
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetDebugPlayerVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetDebugPlayerVisibility");

	Params::BP_Player_C_SetDebugPlayerVisibility Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetDGI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetDGI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetDGI");

	Params::BP_Player_C_SetDGI Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetDisableControlAxisRotationInLean
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DisableControlAxisRotationInLean                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetDisableControlAxisRotationInLean(bool DisableControlAxisRotationInLean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetDisableControlAxisRotationInLean");

	Params::BP_Player_C_SetDisableControlAxisRotationInLean Parms{};

	Parms.DisableControlAxisRotationInLean = DisableControlAxisRotationInLean;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetDynamicMaterials
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetDynamicMaterials()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetDynamicMaterials");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetEnableWeaponScroll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableWeaponScroll_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetEnableWeaponScroll(bool EnableWeaponScroll_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetEnableWeaponScroll");

	Params::BP_Player_C_SetEnableWeaponScroll Parms{};

	Parms.EnableWeaponScroll_0 = EnableWeaponScroll_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetFOV
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetFOV(int32 FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetFOV");

	Params::BP_Player_C_SetFOV Parms{};

	Parms.FOV = FOV;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetFridgeProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Wave                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetFridgeProgress(double Progress, int32 Wave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetFridgeProgress");

	Params::BP_Player_C_SetFridgeProgress Parms{};

	Parms.Progress = Progress;
	Parms.Wave = Wave;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetInvertVerticalLook
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InvertVerticalLook                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetInvertVerticalLook(bool InvertVerticalLook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetInvertVerticalLook");

	Params::BP_Player_C_SetInvertVerticalLook Parms{};

	Parms.InvertVerticalLook = InvertVerticalLook;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetInvertWeaponScroll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InvertWeaponScroll_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetInvertWeaponScroll(bool InvertWeaponScroll_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetInvertWeaponScroll");

	Params::BP_Player_C_SetInvertWeaponScroll Parms{};

	Parms.InvertWeaponScroll_0 = InvertWeaponScroll_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetIsIndoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsIndoor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetIsIndoor(bool IsIndoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetIsIndoor");

	Params::BP_Player_C_SetIsIndoor Parms{};

	Parms.IsIndoor = IsIndoor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetLookDeadzone
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LookDeadzone                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetLookDeadzone(double LookDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetLookDeadzone");

	Params::BP_Player_C_SetLookDeadzone Parms{};

	Parms.LookDeadzone = LookDeadzone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetMouseSmoothing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MouseSmoothing                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetMouseSmoothing(bool MouseSmoothing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetMouseSmoothing");

	Params::BP_Player_C_SetMouseSmoothing Parms{};

	Parms.MouseSmoothing = MouseSmoothing;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetMovementDeadzone
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MovementDeadzone                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetMovementDeadzone(double MovementDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetMovementDeadzone");

	Params::BP_Player_C_SetMovementDeadzone Parms{};

	Parms.MovementDeadzone = MovementDeadzone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetPlayerInHole
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetPlayerInHole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetPlayerInHole");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetResponseCurve
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ResponseCurve                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetResponseCurve(double ResponseCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetResponseCurve");

	Params::BP_Player_C_SetResponseCurve Parms{};

	Parms.ResponseCurve = ResponseCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetRetroEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetroEffect                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetRetroEffect(bool RetroEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetRetroEffect");

	Params::BP_Player_C_SetRetroEffect Parms{};

	Parms.RetroEffect = RetroEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetSensitivity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetSensitivity(int32 Sensitivity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetSensitivity");

	Params::BP_Player_C_SetSensitivity Parms{};

	Parms.Sensitivity_0 = Sensitivity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetSensitivity_ADS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetSensitivity_ADS(int32 Sensitivity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetSensitivity_ADS");

	Params::BP_Player_C_SetSensitivity_ADS Parms{};

	Parms.Sensitivity_0 = Sensitivity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetSensitivity_ADS_Scope2x
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetSensitivity_ADS_Scope2x(int32 Sensitivity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetSensitivity_ADS_Scope2x");

	Params::BP_Player_C_SetSensitivity_ADS_Scope2x Parms{};

	Parms.Sensitivity_0 = Sensitivity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetSensitivity_ADS_Scope4x
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetSensitivity_ADS_Scope4x(int32 Sensitivity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetSensitivity_ADS_Scope4x");

	Params::BP_Player_C_SetSensitivity_ADS_Scope4x Parms{};

	Parms.Sensitivity_0 = Sensitivity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetShadowGamma
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ShadowGamma_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetShadowGamma(double ShadowGamma_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetShadowGamma");

	Params::BP_Player_C_SetShadowGamma Parms{};

	Parms.ShadowGamma_0 = ShadowGamma_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetShootingTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Timer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetShootingTimer(class AActor* Timer, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetShootingTimer");

	Params::BP_Player_C_SetShootingTimer Parms{};

	Parms.Timer = Timer;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_Player.BP_Player_C.SetSmoothCameraMove
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetSmoothCameraMove(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetSmoothCameraMove");

	Params::BP_Player_C_SetSmoothCameraMove Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetToggleAim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleAim_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetToggleAim(bool ToggleAim_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetToggleAim");

	Params::BP_Player_C_SetToggleAim Parms{};

	Parms.ToggleAim_0 = ToggleAim_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetToggleCrouch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleCrouch_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetToggleCrouch(bool ToggleCrouch_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetToggleCrouch");

	Params::BP_Player_C_SetToggleCrouch Parms{};

	Parms.ToggleCrouch_0 = ToggleCrouch_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetToggleLean
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleLean_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetToggleLean(bool ToggleLean_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetToggleLean");

	Params::BP_Player_C_SetToggleLean Parms{};

	Parms.ToggleLean_0 = ToggleLean_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetToggleSprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleSprint_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetToggleSprint(bool ToggleSprint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetToggleSprint");

	Params::BP_Player_C_SetToggleSprint Parms{};

	Parms.ToggleSprint_0 = ToggleSprint_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetToggleWalk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleWalk_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::SetToggleWalk(bool ToggleWalk_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetToggleWalk");

	Params::BP_Player_C_SetToggleWalk Parms{};

	Parms.ToggleWalk_0 = ToggleWalk_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.SetupCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetupCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetupCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetupDummyHead
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetupDummyHead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetupDummyHead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetupFlyingMode
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetupFlyingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetupFlyingMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetupPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetupPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetupPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetupPlayerSkill
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetupPlayerSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetupPlayerSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.SetupSkillBySaveData
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::SetupSkillBySaveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "SetupSkillBySaveData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ShowCashData
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::ShowCashData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ShowCashData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ShowCrosshair
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::ShowCrosshair()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ShowCrosshair");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ShowHUD
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::ShowHUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ShowHUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.ShowInteractUI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<struct FStr_InteractUIText>&Text                                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Player_C::ShowInteractUI(const TArray<struct FStr_InteractUIText>& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ShowInteractUI");

	Params::BP_Player_C_ShowInteractUI Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.ShowPopup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTexture2D*                       Icon                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class FText&                      Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    IsStack                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             StackID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   StackAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFitIcon_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::ShowPopup(class UTexture2D* Icon, const class FText& Text, bool IsStack, class FName StackID, int32 StackAmount, bool IsFitIcon_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "ShowPopup");

	Params::BP_Player_C_ShowPopup Parms{};

	Parms.Icon = Icon;
	Parms.Text = std::move(Text);
	Parms.IsStack = IsStack;
	Parms.StackID = StackID;
	Parms.StackAmount = StackAmount;
	Parms.IsFitIcon_ = IsFitIcon_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.Timeline__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::Timeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Timeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Timeline__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::Timeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Timeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ArmRecoil_Down__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ArmRecoil_Down__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ArmRecoil_Down__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ArmRecoil_Down__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ArmRecoil_Down__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ArmRecoil_Down__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ArmRecoil_Up__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ArmRecoil_Up__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ArmRecoil_Up__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ArmRecoil_Up__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ArmRecoil_Up__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ArmRecoil_Up__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_CameraRecoil_Down__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_CameraRecoil_Down__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_CameraRecoil_Down__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_CameraRecoil_Down__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_CameraRecoil_Down__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_CameraRecoil_Down__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_CameraRecoil_Up__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_CameraRecoil_Up__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_CameraRecoil_Up__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_CameraRecoil_Up__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_CameraRecoil_Up__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_CameraRecoil_Up__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_Down__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_Down__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_Down__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_Down__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_Down__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_Down__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_FullAutoRecoilConvergence__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_FullAutoRecoilConvergence__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_FullAutoRecoilConvergence__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_FullAutoRecoilConvergence__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_FullAutoRecoilConvergence__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_FullAutoRecoilConvergence__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_StopConvergence__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_StopConvergence__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_StopConvergence__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_StopConvergence__StopConvergence__EventFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_StopConvergence__StopConvergence__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_StopConvergence__StopConvergence__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_StopConvergence__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_StopConvergence__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_StopConvergence__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_Up__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_Up__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_Up__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_ControllerRecoil_Up__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_ControllerRecoil_Up__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_ControllerRecoil_Up__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreath__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreath__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreath__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreath__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreath__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreath__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreathOutSound__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreathOutSound__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreathOutSound__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreathOutSound__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreathOutSound__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreathOutSound__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreathTimer__BreathOut__EventFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreathTimer__BreathOut__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreathTimer__BreathOut__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreathTimer__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreathTimer__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreathTimer__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreathTimer__OutSound Enable__EventFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreathTimer__OutSound_Enable__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreathTimer__OutSound Enable__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_HoldBreathTimer__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_HoldBreathTimer__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_HoldBreathTimer__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_Kick__End__EventFunc
// (BlueprintEvent)

void ABP_Player_C::TL_Kick__End__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_Kick__End__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_Kick__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_Kick__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_Kick__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_Kick__KickSound__EventFunc
// (BlueprintEvent)

void ABP_Player_C::TL_Kick__KickSound__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_Kick__KickSound__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_Kick__KickTrace__EventFunc
// (BlueprintEvent)

void ABP_Player_C::TL_Kick__KickTrace__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_Kick__KickTrace__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_Kick__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_Kick__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_Kick__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_Lean__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_Lean__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_Lean__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_Lean__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_Lean__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_Lean__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_LeanBlendAlpha__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_LeanBlendAlpha__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_LeanBlendAlpha__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_LeanBlendAlpha__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_LeanBlendAlpha__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_LeanBlendAlpha__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_SelfHitEffect__FinishedFunc
// (BlueprintEvent)

void ABP_Player_C::TL_SelfHitEffect__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_SelfHitEffect__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.TL_SelfHitEffect__UpdateFunc
// (BlueprintEvent)

void ABP_Player_C::TL_SelfHitEffect__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "TL_SelfHitEffect__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.Update Camera Roll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Update_Delta_Time                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::Update_Camera_Roll(double Update_Delta_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "Update Camera Roll");

	Params::BP_Player_C_Update_Camera_Roll Parms{};

	Parms.Update_Delta_Time = Update_Delta_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UpdateCameraPitchLimit
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Update_Delta_Time                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::UpdateCameraPitchLimit(double Update_Delta_Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateCameraPitchLimit");

	Params::BP_Player_C_UpdateCameraPitchLimit Parms{};

	Parms.Update_Delta_Time = Update_Delta_Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UpdateColoringSystem
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::UpdateColoringSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateColoringSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.UpdateDummyHead
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::UpdateDummyHead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateDummyHead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.UpdateHandIK
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::UpdateHandIK(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateHandIK");

	Params::BP_Player_C_UpdateHandIK Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UpdateInteractLineTrace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Reset                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::UpdateInteractLineTrace(bool Reset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateInteractLineTrace");

	Params::BP_Player_C_UpdateInteractLineTrace Parms{};

	Parms.Reset = Reset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UpdateItemMagnet
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::UpdateItemMagnet(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateItemMagnet");

	Params::BP_Player_C_UpdateItemMagnet Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UpdateLayeringColors
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::UpdateLayeringColors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateLayeringColors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.UpdatePostProcess
// (BlueprintCallable, BlueprintEvent)

void ABP_Player_C::UpdatePostProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdatePostProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Player.BP_Player_C.UpdateRecoilRecover
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::UpdateRecoilRecover(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateRecoilRecover");

	Params::BP_Player_C_UpdateRecoilRecover Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UpdateSavePopup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_SaveState                            SaveState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::UpdateSavePopup(EN_SaveState SaveState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateSavePopup");

	Params::BP_Player_C_UpdateSavePopup Parms{};

	Parms.SaveState = SaveState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UpdateSmoothCameraInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Player_C::UpdateSmoothCameraInput(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UpdateSmoothCameraInput");

	Params::BP_Player_C_UpdateSmoothCameraInput Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Player.BP_Player_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Player_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Player_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

