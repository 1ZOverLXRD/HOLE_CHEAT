#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Character_BPI

#include "Basic.hpp"

#include "ALS_Character_BPI_classes.hpp"
#include "ALS_Character_BPI_parameters.hpp"


namespace SDK
{

// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Get_CurrentStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode*                          PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState*                     MovementState                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState*                     PrevMovementState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementAction*                    MovementAction                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_RotationMode*                      RotationMode                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait*                              ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Stance*                            ActualStance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_ViewMode*                          ViewMode                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState*                      OverlayState                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELeanState*                             LeanState                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponMotionState*                     WeaponMotionState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState, EALS_MovementState* PrevMovementState, EALS_MovementAction* MovementAction, EALS_RotationMode* RotationMode, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode, EALS_OverlayState* OverlayState, ELeanState* LeanState, EWeaponMotionState* WeaponMotionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Get_CurrentStates");

	Params::ALS_Character_BPI_C_BPI_Get_CurrentStates Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (MovementState != nullptr)
		*MovementState = Parms.MovementState;

	if (PrevMovementState != nullptr)
		*PrevMovementState = Parms.PrevMovementState;

	if (MovementAction != nullptr)
		*MovementAction = Parms.MovementAction;

	if (RotationMode != nullptr)
		*RotationMode = Parms.RotationMode;

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;

	if (ActualStance != nullptr)
		*ActualStance = Parms.ActualStance;

	if (ViewMode != nullptr)
		*ViewMode = Parms.ViewMode;

	if (OverlayState != nullptr)
		*OverlayState = Parms.OverlayState;

	if (LeanState != nullptr)
		*LeanState = Parms.LeanState;

	if (WeaponMotionState != nullptr)
		*WeaponMotionState = Parms.WeaponMotionState;
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Acceleration                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsMoving                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasMovementInput                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MovementInputAmount                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        AimingRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 AimYawRate                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraRollAngle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraPitchAngle                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 RecoilHandAngle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTriggerPull                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTriggerOFF                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HandIK_Location_L                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        HandIK_Rotation_L                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 HoldBreathFactor                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 LeanAlpha                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   WeaponAttachHandIsRight                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsPlayer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 PlayerHeadBobAlpha                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_KickAnimValue*              KickAnimValue                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration, struct FVector* MovementInput, bool* IsMoving, bool* HasMovementInput, double* Speed, double* MovementInputAmount, struct FRotator* AimingRotation, double* AimYawRate, double* CameraRollAngle, double* CameraPitchAngle, double* RecoilHandAngle, bool* IsTriggerPull, bool* IsTriggerOFF, struct FVector* HandIK_Location_L, struct FRotator* HandIK_Rotation_L, double* HoldBreathFactor, double* LeanAlpha, bool* WeaponAttachHandIsRight, bool* IsPlayer, double* PlayerHeadBobAlpha, struct FStr_KickAnimValue* KickAnimValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Get_EssentialValues");

	Params::ALS_Character_BPI_C_BPI_Get_EssentialValues Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration != nullptr)
		*Acceleration = std::move(Parms.Acceleration);

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (IsMoving != nullptr)
		*IsMoving = Parms.IsMoving;

	if (HasMovementInput != nullptr)
		*HasMovementInput = Parms.HasMovementInput;

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (MovementInputAmount != nullptr)
		*MovementInputAmount = Parms.MovementInputAmount;

	if (AimingRotation != nullptr)
		*AimingRotation = std::move(Parms.AimingRotation);

	if (AimYawRate != nullptr)
		*AimYawRate = Parms.AimYawRate;

	if (CameraRollAngle != nullptr)
		*CameraRollAngle = Parms.CameraRollAngle;

	if (CameraPitchAngle != nullptr)
		*CameraPitchAngle = Parms.CameraPitchAngle;

	if (RecoilHandAngle != nullptr)
		*RecoilHandAngle = Parms.RecoilHandAngle;

	if (IsTriggerPull != nullptr)
		*IsTriggerPull = Parms.IsTriggerPull;

	if (IsTriggerOFF != nullptr)
		*IsTriggerOFF = Parms.IsTriggerOFF;

	if (HandIK_Location_L != nullptr)
		*HandIK_Location_L = std::move(Parms.HandIK_Location_L);

	if (HandIK_Rotation_L != nullptr)
		*HandIK_Rotation_L = std::move(Parms.HandIK_Rotation_L);

	if (HoldBreathFactor != nullptr)
		*HoldBreathFactor = Parms.HoldBreathFactor;

	if (LeanAlpha != nullptr)
		*LeanAlpha = Parms.LeanAlpha;

	if (WeaponAttachHandIsRight != nullptr)
		*WeaponAttachHandIsRight = Parms.WeaponAttachHandIsRight;

	if (IsPlayer != nullptr)
		*IsPlayer = Parms.IsPlayer;

	if (PlayerHeadBobAlpha != nullptr)
		*PlayerHeadBobAlpha = Parms.PlayerHeadBobAlpha;

	if (KickAnimValue != nullptr)
		*KickAnimValue = std::move(Parms.KickAnimValue);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_GetSkeltalMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent**          SkeletalMeshComp                                       (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_GetSkeltalMesh(class USkeletalMeshComponent** SkeletalMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_GetSkeltalMesh");

	Params::ALS_Character_BPI_C_BPI_GetSkeltalMesh Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (SkeletalMeshComp != nullptr)
		*SkeletalMeshComp = Parms.SkeletalMeshComp;
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_Gait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Set_Gait(EALS_Gait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Set_Gait");

	Params::ALS_Character_BPI_C_BPI_Set_Gait Parms{};

	Parms.NewGait = NewGait;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_LeanState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELeanState                              NewLeanState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Set_LeanState(ELeanState NewLeanState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Set_LeanState");

	Params::ALS_Character_BPI_C_BPI_Set_LeanState Parms{};

	Parms.NewLeanState = NewLeanState;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_MovementAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Set_MovementAction(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Set_MovementAction");

	Params::ALS_Character_BPI_C_BPI_Set_MovementAction Parms{};

	Parms.NewMovementAction = NewMovementAction;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_MovementState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Set_MovementState(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Set_MovementState");

	Params::ALS_Character_BPI_C_BPI_Set_MovementState Parms{};

	Parms.NewMovementState = NewMovementState;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_OverlayState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Set_OverlayState(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Set_OverlayState");

	Params::ALS_Character_BPI_C_BPI_Set_OverlayState Parms{};

	Parms.NewOverlayState = NewOverlayState;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_RotationMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Set_RotationMode(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Set_RotationMode");

	Params::ALS_Character_BPI_C_BPI_Set_RotationMode Parms{};

	Parms.NewRotationMode = NewRotationMode;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_Set_ViewMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IALS_Character_BPI_C::BPI_Set_ViewMode(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_Set_ViewMode");

	Params::ALS_Character_BPI_C_BPI_Set_ViewMode Parms{};

	Parms.NewViewMode = NewViewMode;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function ALS_Character_BPI.ALS_Character_BPI_C.BPI_TeleportCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IALS_Character_BPI_C::BPI_TeleportCharacter(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ALS_Character_BPI_C", "BPI_TeleportCharacter");

	Params::ALS_Character_BPI_C_BPI_TeleportCharacter Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

