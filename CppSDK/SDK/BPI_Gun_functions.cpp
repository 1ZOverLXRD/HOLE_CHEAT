#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Gun

#include "Basic.hpp"

#include "BPI_Gun_classes.hpp"
#include "BPI_Gun_parameters.hpp"


namespace SDK
{

// Function BPI_Gun.BPI_Gun_C.BoltCatchReleaseCancel
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::BoltCatchReleaseCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "BoltCatchReleaseCancel");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.Chambering_BoltChatchRelease
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::Chambering_BoltChatchRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "Chambering_BoltChatchRelease");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ChargeBolt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTriggerReleased                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::ChargeBolt(bool IsTriggerReleased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ChargeBolt");

	Params::BPI_Gun_C_ChargeBolt Parms{};

	Parms.IsTriggerReleased = IsTriggerReleased;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Gun.BPI_Gun_C.ClearMagazine
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ClearMagazine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ClearMagazine");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.Fire
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTriggerReleased                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::Fire(bool IsTriggerReleased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "Fire");

	Params::BPI_Gun_C_Fire Parms{};

	Parms.IsTriggerReleased = IsTriggerReleased;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Gun.BPI_Gun_C.GetADSLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         ADSLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 ADSPoint                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetADSLocation(struct FVector* ADSLocation, class USceneComponent** ADSPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetADSLocation");

	Params::BPI_Gun_C_GetADSLocation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ADSLocation != nullptr)
		*ADSLocation = std::move(Parms.ADSLocation);

	if (ADSPoint != nullptr)
		*ADSPoint = Parms.ADSPoint;
}


// Function BPI_Gun.BPI_Gun_C.GetBulletSpeedInChamber
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 BulletSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetBulletSpeedInChamber(double* BulletSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetBulletSpeedInChamber");

	Params::BPI_Gun_C_GetBulletSpeedInChamber Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (BulletSpeed != nullptr)
		*BulletSpeed = Parms.BulletSpeed;
}


// Function BPI_Gun.BPI_Gun_C.GetCanReload
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanReload                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetCanReload(bool* CanReload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetCanReload");

	Params::BPI_Gun_C_GetCanReload Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanReload != nullptr)
		*CanReload = Parms.CanReload;
}


// Function BPI_Gun.BPI_Gun_C.GetChargingHandPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Gun_C::GetChargingHandPoint(struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetChargingHandPoint");

	Params::BPI_Gun_C_GetChargingHandPoint Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPI_Gun.BPI_Gun_C.GetCurrentAmmoInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  AmmoInChamber                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  AmmoInMagazine                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsJamming                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  MagazineCapacity                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetCurrentAmmoInfo(int32* AmmoInChamber, int32* AmmoInMagazine, bool* IsJamming, int32* MagazineCapacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetCurrentAmmoInfo");

	Params::BPI_Gun_C_GetCurrentAmmoInfo Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (AmmoInChamber != nullptr)
		*AmmoInChamber = Parms.AmmoInChamber;

	if (AmmoInMagazine != nullptr)
		*AmmoInMagazine = Parms.AmmoInMagazine;

	if (IsJamming != nullptr)
		*IsJamming = Parms.IsJamming;

	if (MagazineCapacity != nullptr)
		*MagazineCapacity = Parms.MagazineCapacity;
}


// Function BPI_Gun.BPI_Gun_C.GetFireModeInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_SelectedFireMode*                    CurrentMode                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_FireModeType*                        FireModeType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetFireModeInfo(EN_SelectedFireMode* CurrentMode, EN_FireModeType* FireModeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetFireModeInfo");

	Params::BPI_Gun_C_GetFireModeInfo Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CurrentMode != nullptr)
		*CurrentMode = Parms.CurrentMode;

	if (FireModeType != nullptr)
		*FireModeType = Parms.FireModeType;
}


// Function BPI_Gun.BPI_Gun_C.GetGunMotionInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsPulledTrigger                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsFiring                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBolt_Slide_Stopped                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltCharging                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltChargingPullEnd                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltChargingPushEnd                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsReloading                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltOpen                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltCatchRelease                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetGunMotionInfo(bool* IsPulledTrigger, bool* IsFiring, bool* IsBolt_Slide_Stopped, bool* IsBoltCharging, bool* IsBoltChargingPullEnd, bool* IsBoltChargingPushEnd, bool* IsReloading, bool* IsBoltOpen, bool* IsBoltCatchRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetGunMotionInfo");

	Params::BPI_Gun_C_GetGunMotionInfo Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsPulledTrigger != nullptr)
		*IsPulledTrigger = Parms.IsPulledTrigger;

	if (IsFiring != nullptr)
		*IsFiring = Parms.IsFiring;

	if (IsBolt_Slide_Stopped != nullptr)
		*IsBolt_Slide_Stopped = Parms.IsBolt_Slide_Stopped;

	if (IsBoltCharging != nullptr)
		*IsBoltCharging = Parms.IsBoltCharging;

	if (IsBoltChargingPullEnd != nullptr)
		*IsBoltChargingPullEnd = Parms.IsBoltChargingPullEnd;

	if (IsBoltChargingPushEnd != nullptr)
		*IsBoltChargingPushEnd = Parms.IsBoltChargingPushEnd;

	if (IsReloading != nullptr)
		*IsReloading = Parms.IsReloading;

	if (IsBoltOpen != nullptr)
		*IsBoltOpen = Parms.IsBoltOpen;

	if (IsBoltCatchRelease != nullptr)
		*IsBoltCatchRelease = Parms.IsBoltCatchRelease;
}


// Function BPI_Gun.BPI_Gun_C.GetGunMotionState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_GunMotionState*                      GunMotionState                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetGunMotionState(EN_GunMotionState* GunMotionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetGunMotionState");

	Params::BPI_Gun_C_GetGunMotionState Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (GunMotionState != nullptr)
		*GunMotionState = Parms.GunMotionState;
}


// Function BPI_Gun.BPI_Gun_C.GetLightMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_IconMode*                            LightMode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetLightMode(EN_IconMode* LightMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetLightMode");

	Params::BPI_Gun_C_GetLightMode Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (LightMode != nullptr)
		*LightMode = Parms.LightMode;
}


// Function BPI_Gun.BPI_Gun_C.GetReloadSpeedMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 ReloadSpeedMultiplier                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetReloadSpeedMultiplier(double* ReloadSpeedMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetReloadSpeedMultiplier");

	Params::BPI_Gun_C_GetReloadSpeedMultiplier Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ReloadSpeedMultiplier != nullptr)
		*ReloadSpeedMultiplier = Parms.ReloadSpeedMultiplier;
}


// Function BPI_Gun.BPI_Gun_C.GetShellNumInHand
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  ShellNum                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetShellNumInHand(int32* ShellNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetShellNumInHand");

	Params::BPI_Gun_C_GetShellNumInHand Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (ShellNum != nullptr)
		*ShellNum = Parms.ShellNum;
}


// Function BPI_Gun.BPI_Gun_C.GetWeaponLightState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsON                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::GetWeaponLightState(bool* IsON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "GetWeaponLightState");

	Params::BPI_Gun_C_GetWeaponLightState Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsON != nullptr)
		*IsON = Parms.IsON;
}


// Function BPI_Gun.BPI_Gun_C.OpenShellCarrier
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::OpenShellCarrier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "OpenShellCarrier");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.RefreshGunSpec
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::RefreshGunSpec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "RefreshGunSpec");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.Reload_Start
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::Reload_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "Reload_Start");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadCancel
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadCancel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadCancel");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadMag_DetachMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadMag_DetachMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadMag_DetachMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadMag_DropMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadMag_DropMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadMag_DropMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadMag_InsertMag_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadMag_InsertMag_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadMag_InsertMag_Begin");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadMag_InsertMag_Block
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadMag_InsertMag_Block()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadMag_InsertMag_Block");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadMag_InsertMag_End
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadMag_InsertMag_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadMag_InsertMag_End");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadMag_TakeNewMag
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadMag_TakeNewMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadMag_TakeNewMag");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadShell_InsertShell_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadShell_InsertShell_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadShell_InsertShell_Begin");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadShell_InsertShell_End
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadShell_InsertShell_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadShell_InsertShell_End");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.ReloadShell_TakeNewShell
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::ReloadShell_TakeNewShell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "ReloadShell_TakeNewShell");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.SetIsBoltCharging
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBoltCharging                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::SetIsBoltCharging(bool IsBoltCharging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "SetIsBoltCharging");

	Params::BPI_Gun_C_SetIsBoltCharging Parms{};

	Parms.IsBoltCharging = IsBoltCharging;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Gun.BPI_Gun_C.SetMotionInfoByBoltCatchRelease
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBoltCatchRelease                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::SetMotionInfoByBoltCatchRelease(bool IsBoltCatchRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "SetMotionInfoByBoltCatchRelease");

	Params::BPI_Gun_C_SetMotionInfoByBoltCatchRelease Parms{};

	Parms.IsBoltCatchRelease = IsBoltCatchRelease;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Gun.BPI_Gun_C.SetupCurrentAmmo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ChamberAmmo                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MagazineAmmo                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Gun_C::SetupCurrentAmmo(int32 ChamberAmmo, int32 MagazineAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "SetupCurrentAmmo");

	Params::BPI_Gun_C_SetupCurrentAmmo Parms{};

	Parms.ChamberAmmo = ChamberAmmo;
	Parms.MagazineAmmo = MagazineAmmo;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Gun.BPI_Gun_C.SwitchFireMode
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::SwitchFireMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "SwitchFireMode");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Gun.BPI_Gun_C.SwitchWeaponLight
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Gun_C::SwitchWeaponLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Gun_C", "SwitchWeaponLight");

	AsUObject()->ProcessEvent(Func, nullptr);
}

}

