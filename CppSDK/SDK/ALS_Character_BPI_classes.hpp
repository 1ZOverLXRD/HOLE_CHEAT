#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Character_BPI

#include "Basic.hpp"

#include "ALS_Stance_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "LeanState_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "WeaponMotionState_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "Engine_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "ALS_MovementAction_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ALS_Character_BPI.ALS_Character_BPI_C
// 0x0000 (0x0000 - 0x0000)
class IALS_Character_BPI_C final
{
public:
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState, EALS_MovementState* PrevMovementState, EALS_MovementAction* MovementAction, EALS_RotationMode* RotationMode, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode, EALS_OverlayState* OverlayState, ELeanState* LeanState, EWeaponMotionState* WeaponMotionState);
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration, struct FVector* MovementInput, bool* IsMoving, bool* HasMovementInput, double* Speed, double* MovementInputAmount, struct FRotator* AimingRotation, double* AimYawRate, double* CameraRollAngle, double* CameraPitchAngle, double* RecoilHandAngle, bool* IsTriggerPull, bool* IsTriggerOFF, struct FVector* HandIK_Location_L, struct FRotator* HandIK_Rotation_L, double* HoldBreathFactor, double* LeanAlpha, bool* WeaponAttachHandIsRight, bool* IsPlayer, double* PlayerHeadBobAlpha, struct FStr_KickAnimValue* KickAnimValue);
	void BPI_GetSkeltalMesh(class USkeletalMeshComponent** SkeletalMeshComp);
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_LeanState(ELeanState NewLeanState);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);
	void BPI_TeleportCharacter(const struct FVector& Location, const struct FRotator& Rotation);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("ALS_Character_BPI_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ALS_Character_BPI_C")
	}
	static class IALS_Character_BPI_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IALS_Character_BPI_C>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IALS_Character_BPI_C;

}

