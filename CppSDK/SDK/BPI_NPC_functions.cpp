#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_NPC

#include "Basic.hpp"

#include "BPI_NPC_classes.hpp"
#include "BPI_NPC_parameters.hpp"


namespace SDK
{

// Function BPI_NPC.BPI_NPC_C.Death
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CountKill                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::Death(bool CountKill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "Death");

	Params::BPI_NPC_C_Death Parms{};

	Parms.CountKill = CountKill;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_NPC.BPI_NPC_C.GetHeadLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         HeadLocation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::GetHeadLocation(struct FVector* HeadLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "GetHeadLocation");

	Params::BPI_NPC_C_GetHeadLocation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (HeadLocation != nullptr)
		*HeadLocation = std::move(Parms.HeadLocation);
}


// Function BPI_NPC.BPI_NPC_C.GetNPCRowName
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            NPCRowName                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::GetNPCRowName(class FName* NPCRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "GetNPCRowName");

	Params::BPI_NPC_C_GetNPCRowName Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (NPCRowName != nullptr)
		*NPCRowName = Parms.NPCRowName;
}


// Function BPI_NPC.BPI_NPC_C.IsDown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsDown_0                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::IsDown(bool* IsDown_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "IsDown");

	Params::BPI_NPC_C_IsDown Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsDown_0 != nullptr)
		*IsDown_0 = Parms.IsDown_0;
}


// Function BPI_NPC.BPI_NPC_C.RefreshAITask
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::RefreshAITask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "RefreshAITask");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.StartRush
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_NPC_C::StartRush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "StartRush");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_NPC.BPI_NPC_C.WeaponLightControl
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    In                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           LightONArea                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_NPC_C::WeaponLightControl(bool In, class AActor* LightONArea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_NPC_C", "WeaponLightControl");

	Params::BPI_NPC_C_WeaponLightControl Parms{};

	Parms.In = In;
	Parms.LightONArea = LightONArea;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

