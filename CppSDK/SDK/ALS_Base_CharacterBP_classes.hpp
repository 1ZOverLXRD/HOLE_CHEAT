#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Base_CharacterBP

#include "Basic.hpp"

#include "MantleType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_MovementAction_structs.hpp"
#include "WeaponMotionState_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "LeanState_structs.hpp"
#include "MovementSettings_State_structs.hpp"
#include "MovementSettings_structs.hpp"
#include "Mantle_Params_structs.hpp"
#include "ALS_ComponentAndTransform_structs.hpp"
#include "Mantle_TraceSettings_structs.hpp"
#include "EN_WeaponSubCategory_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass ALS_Base_CharacterBP.ALS_Base_CharacterBP_C
// 0x05B0 (0x0C00 - 0x0650)
class AALS_Base_CharacterBP_C : public ACharacter
{
public:
	uint8                                         Pad_648[0x8];                                      // 0x0648(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0650(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         MantleTimeline_BlendIn_91D7A42A4A23268AEE2E28853DEE703D; // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MantleTimeline__Direction_91D7A42A4A23268AEE2E28853DEE703D; // 0x065C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MantleTimeline;                                    // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState;                                     // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState;                                 // 0x0669(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             DesiredRotationMode;                               // 0x066A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction;                                    // 0x066B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode;                                      // 0x066C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     DesiredGait;                                       // 0x066D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     Gait;                                              // 0x066E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     PreGait;                                           // 0x066F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   Stance;                                            // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode;                                          // 0x0671(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_672[0x6];                                      // 0x0672(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousVelocity;                                  // 0x0678(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration;                                      // 0x0690(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x06A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6AA[0x6];                                      // 0x06AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LastVelocityRotation;                              // 0x06B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               LastMovementInputRotation;                         // 0x06C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Speed;                                             // 0x06E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementInputAmount;                               // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PreviousAimYaw;                                    // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x06F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               InAirRotation;                                     // 0x0710(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        YawOffset;                                         // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    MovementModel;                                     // 0x0730(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FMovementSettings_State                MovementData;                                      // 0x0740(0x00C0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMovementSettings                      CurrentMovementSettings;                           // 0x0800(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMantle_Params                         MantleParams;                                      // 0x0820(0x0030)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FALS_ComponentAndTransform             MantleLedgeLS;                                     // 0x0850(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FTransform                             MantleTarget;                                      // 0x08C0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleActualStartOffset;                           // 0x0920(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             MantleAnimatedStartOffset;                         // 0x0980(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  GroundedTraceSettings;                             // 0x09E0(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  AutomaticTraceSettings;                            // 0x09F4(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMantle_TraceSettings                  FallingTraceSettings;                              // 0x0A08(0x0014)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   DesiredStance;                                     // 0x0A1C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1D[0x3];                                      // 0x0A1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimYawRate;                                        // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState;                                      // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A29[0x3];                                      // 0x0A29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimesPressedStance;                                // 0x0A2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BreakFall;                                         // 0x0A30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SprintHeld;                                        // 0x0A31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A32[0x6];                                      // 0x0A32(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          MainAnimInstance;                                  // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollOnGround;                                   // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RagdollFaceUp;                                     // 0x0A41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A42[0x6];                                      // 0x0A42(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastRagdollVelocity;                               // 0x0A48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThirdPersonFOV;                                    // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FirstPersonFOV;                                    // 0x0A68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RightShoulder;                                     // 0x0A70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ELeanState                                    LeanState;                                         // 0x0A71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeanRight;                                       // 0x0A72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLeanLeft;                                        // 0x0A73(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A74[0x4];                                      // 0x0A74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Deadzone_Movement;                                 // 0x0A78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Deadzone_Look;                                     // 0x0A80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sensitivity_LookUpDown;                            // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sensitivity_LookLeftRight;                         // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ResponseCurve_Exponent;                            // 0x0A98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ResponseCurve_Curve;                               // 0x0AA0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Input_Movement_FB;                                 // 0x0AA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Input_Movement_RL;                                 // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Input_Look_UpDown;                                 // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Input_Look_RightLeft;                              // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraRollAngle;                                   // 0x0AC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraPitchAngle;                                  // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Input_Look_UpDownRightLeft_2Vec;                   // 0x0AD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraPitchLimit;                                  // 0x0AE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch_Smoothed;                                    // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw_Smoothed;                                      // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTimeX;                                        // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputInterpSpeed;                                  // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilHandAngle;                                   // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RecoilFactor;                                      // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           ShotTag;                                           // 0x0B20(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          InverVerticalLook;                                 // 0x0B30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleSprint;                                      // 0x0B31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleWalk;                                        // 0x0B32(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleAim;                                         // 0x0B33(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleCrouch;                                      // 0x0B34(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleLean;                                        // 0x0B35(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B36[0x2];                                      // 0x0B36(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RecoilBodyAngle;                                   // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Trigger_Pull;                                   // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B41[0x7];                                      // 0x0B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EN_WeaponSubCategory, EALS_OverlayState> WeaponStanceKeymap;                                // 0x0B48(0x0050)(Edit, BlueprintVisible)
	struct FVector                                HandIK_Location_L;                                 // 0x0B98(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               HandIK_Rotation_L;                                 // 0x0BB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFlyingMode;                                      // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFlyingMode_Sprint;                               // 0x0BC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BCA[0x6];                                      // 0x0BCA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugFlyingSpeed;                                  // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DebugFlyingSprintSpeed;                            // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DebugFlyingMoveTimer;                              // 0x0BE0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSmoothCamera;                                    // 0x0BE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE9[0x7];                                      // 0x0BE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LeanAlpha;                                         // 0x0BF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChamberAction;                                   // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableMouseSmoothing;                              // 0x0BF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableControlAxisRotationWithLean;                // 0x0BFA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	struct FTransform BPI_Get_3P_PivotTarget();
	void BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel);
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState_0, EALS_MovementState* PrevMovementState_0, EALS_MovementAction* MovementAction_0, EALS_RotationMode* RotationMode_0, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode_0, EALS_OverlayState* OverlayState_0, ELeanState* LeanState_0, EWeaponMotionState* WeaponMotionState);
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration_0, struct FVector* MovementInput, bool* IsMoving_0, bool* HasMovementInput_0, double* Speed_0, double* MovementInputAmount_0, struct FRotator* AimingRotation, double* AimYawRate_0, double* CameraRollAngle_0, double* CameraPitchAngle_0, double* RecoilHandAngle_0, bool* IsTriggerPull, bool* IsTriggerOFF, struct FVector* HandIK_Location_L_0, struct FRotator* HandIK_Rotation_L_0, double* HoldBreathFactor, double* LeanAlpha_0, bool* WeaponAttachHandIsRight, bool* IsPlayer, double* PlayerHeadBobAlpha, struct FStr_KickAnimValue* KickAnimValue);
	struct FVector BPI_Get_FP_CameraTarget();
	void BPI_TeleportCharacter(const struct FVector& Location, const struct FRotator& Rotation);
	class UAnimMontage* GetGetUpAnimation(bool RagdollFaceUp_0);
	struct FMantle_Asset GetMantleAsset(EMantleType MantleType);
	class UAnimMontage* GetRollAnimation();
	void MantleEnd();
	void MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType);
	void OnOverlayStateChanged(EALS_OverlayState NewOverlayState);
	void RagdollEnd();
	void RagdollStart();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Recoil(double Recoil_Horizontal, double Recoil_Vertical);
	void ExecuteUbergraph_ALS_Base_CharacterBP(int32 EntryPoint);
	void BPI_Get_CameraParameters(double* TP_FOV, double* FP_FOV, bool* RightShoulder_0);
	void BPI_GetSkeltalMesh(class USkeletalMeshComponent** SkeletalMeshComp);
	void CalcResponseCurve(double Input, double* Output);
	void StopTaskExeWhileRagdoll();
	void PlayerMovementInput_FlyingMode(bool IsForwardAxis, bool IsUp, bool IsDown);
	void RestartTaskExeWhenRagdollEnd(double GetUpAnimEndTime);
	void OnLeanStateChanged(ELeanState NewLeanState);
	double GetMappedSpeed();
	bool CanUpdateMovingRotation();
	void OnViewModeChanged(EALS_ViewMode NewViewMode);
	void OnGaitChanged(EALS_Gait NewActualGait);
	void OnRotationModeChanged(EALS_RotationMode NewRotationMode);
	void OnStanceChanged(EALS_Stance NewStance);
	void OnMovementActionChanged(EALS_MovementAction NewMovementAction);
	void OnMovementStateChanged(EALS_MovementState NewMovementState);
	void OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void On_Begin_Play();
	double GetAnimCurveValue(class FName CurveName);
	EDrawDebugTrace GetTraceDebugType(EDrawDebugTrace ShowTraceType);
	void SetActorLocationDuringRagdoll();
	void RagdollUpdate();
	struct FVector CalculateAcceleration();
	struct FVector GetCapsuleLocationFromBase(const struct FVector& BaseLocation, double ZOffset);
	struct FVector GetCalpsuleBaseLocation(double ZOffset);
	void RightVector(struct FVector* forwardVector, struct FVector* rightVector);
	void CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, EDrawDebugTrace DebugType, bool* HasRoom);
	void MantleUpdate(double BlendIn);
	void DrawDebugShapes();
	void FixDiagonalGamepadValues(double Y_in, double X_in, double* Y_Out, double* X_Out);
	struct FVector GetPlayerMovementInput();
	void MantleCheck(const struct FMantle_TraceSettings& Trace_Settings, EDrawDebugTrace DebugType, bool* Vault);
	double CalculateGroundedRotationRate();
	bool SetActorLocationAndRotation_UpdateTarget_(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult);
	void LimitRotation(double AimYawMin, double AimYawMax, double InterpSpeed);
	void AddToCharacterRotation(const struct FRotator& DeltaRotation);
	void CanSprint(bool* CanSprint_0);
	void GetActualGait(EALS_Gait AllowedGait, EALS_Gait* ActualGait);
	void GetAllowedGait(EALS_Gait* AllowedGait);
	void GetTargetMovementSettings(struct FMovementSettings* MovementSettings);
	void UpdateDynamicMovementSettings(EALS_Gait AllowedGait);
	void UpdateCharacterMovement();
	void SetMovementModel();
	void SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_);
	void UpdateInAirRotation();
	void UpdateGroudedRotation();
	void CacheValues();
	void SetEssentialValues();
	void PlayerMovementInput(bool IsForwardAxis);
	void MantleTimeline__FinishedFunc();
	void MantleTimeline__UpdateFunc();
	void InpActEvt_LeanRight_K2Node_InputActionEvent_27(const struct FKey& Key);
	void InpActEvt_LeanRight_K2Node_InputActionEvent_26(const struct FKey& Key);
	void InpActEvt_LeanLeft_K2Node_InputActionEvent_25(const struct FKey& Key);
	void InpActEvt_LeanLeft_K2Node_InputActionEvent_24(const struct FKey& Key);
	void InpActEvt_SwitchLight_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_SwitchLight_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Interact_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Walk_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Walk_K2Node_InputActionEvent_15(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Sprint_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Aim_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Aim_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_SwitchToPrimary_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_SwitchToSecondary_K2Node_InputActionEvent_6(const struct FKey& Key);
	void InpActEvt_Charge_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_Charge_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_MeleeAttack_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_MeleeAttack_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_MeleeAttack_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_MeleeAttack_K2Node_InputActionEvent_0(const struct FKey& Key);
	void Down_K2Node_InputAxisEvent_7(float AxisValue);
	void Backwards_K2Node_InputAxisEvent_0(float AxisValue);
	void FlyingDownMovement();
	void FlyingUpMovement();
	void SmoothCameraInput_UpDown(double AxisValue);
	void SmoothCameraInput_LeftRight(double AxisValue);
	void AimOFF();
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode);
	void OnJumped();
	void OnLanded(const struct FHitResult& Hit);
	void Breakfall_Event();
	void Roll_Event();
	void Left_K2Node_InputAxisEvent_1(float AxisValue);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_LeanState(ELeanState NewLeanState);
	void Right_K2Node_InputAxisEvent_3(float AxisValue);
	void Down_K2Node_InputAxisEvent_2(float AxisValue);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("ALS_Base_CharacterBP_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"ALS_Base_CharacterBP_C")
	}
	static class AALS_Base_CharacterBP_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALS_Base_CharacterBP_C>();
	}
};
DUMPER7_ASSERTS_AALS_Base_CharacterBP_C;

}

