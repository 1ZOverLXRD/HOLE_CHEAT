#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameInstance

#include "Basic.hpp"

#include "BP_GameInstance_classes.hpp"
#include "BP_GameInstance_parameters.hpp"


namespace SDK
{

// Function BP_GameInstance.BP_GameInstance_C.AddActionKM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_ActionKeymap&         ActionKeyMap                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_GameInstance_C::AddActionKM(const struct FStr_ActionKeymap& ActionKeyMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "AddActionKM");

	Params::BP_GameInstance_C_AddActionKM Parms{};

	Parms.ActionKeyMap = std::move(ActionKeyMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.AddAxisKM
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_AxisKeymap&           AxisKeyMap                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_GameInstance_C::AddAxisKM(const struct FStr_AxisKeymap& AxisKeyMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "AddAxisKM");

	Params::BP_GameInstance_C_AddAxisKM Parms{};

	Parms.AxisKeyMap = std::move(AxisKeyMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.AddCollectionItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Collection_ID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::AddCollectionItem(int32 Collection_ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "AddCollectionItem");

	Params::BP_GameInstance_C_AddCollectionItem Parms{};

	Parms.Collection_ID = Collection_ID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Apply_ConfigData
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Apply_ConfigData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Apply_ConfigData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Apply_KeymapData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Apply_KeymapData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Apply_KeymapData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyConfigData
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::ApplyConfigData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyConfigData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyConfigData_Audio
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Master                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   BGM                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   SE                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   UI                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ApplyConfigData_Audio(uint8 Master, uint8 BGM, uint8 SE, uint8 UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyConfigData_Audio");

	Params::BP_GameInstance_C_ApplyConfigData_Audio Parms{};

	Parms.Master = Master;
	Parms.BGM = BGM;
	Parms.SE = SE;
	Parms.UI = UI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyConfigData_Control
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Sensitivity_ADS                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Sensitivity_ADS_Scope2x                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Sensitivity_ADS_Scope4x                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InvertVerticalLook                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleSprint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleWalk                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleAim                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleCrouch                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleLean                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableWeaponScroll                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InvertWeaponScroll                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MouseSmoothing                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DisableControlAxisRotationInLean                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GP_MovementDeadzone                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GP_LookDeadzone                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GP_ResponseCurve                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ApplyConfigData_Control(int32 Sensitivity, int32 Sensitivity_ADS, int32 Sensitivity_ADS_Scope2x, int32 Sensitivity_ADS_Scope4x, bool InvertVerticalLook, bool ToggleSprint, bool ToggleWalk, bool ToggleAim, bool ToggleCrouch, bool ToggleLean, bool EnableWeaponScroll, bool InvertWeaponScroll, bool MouseSmoothing, bool DisableControlAxisRotationInLean, double GP_MovementDeadzone, double GP_LookDeadzone, double GP_ResponseCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyConfigData_Control");

	Params::BP_GameInstance_C_ApplyConfigData_Control Parms{};

	Parms.Sensitivity = Sensitivity;
	Parms.Sensitivity_ADS = Sensitivity_ADS;
	Parms.Sensitivity_ADS_Scope2x = Sensitivity_ADS_Scope2x;
	Parms.Sensitivity_ADS_Scope4x = Sensitivity_ADS_Scope4x;
	Parms.InvertVerticalLook = InvertVerticalLook;
	Parms.ToggleSprint = ToggleSprint;
	Parms.ToggleWalk = ToggleWalk;
	Parms.ToggleAim = ToggleAim;
	Parms.ToggleCrouch = ToggleCrouch;
	Parms.ToggleLean = ToggleLean;
	Parms.EnableWeaponScroll = EnableWeaponScroll;
	Parms.InvertWeaponScroll = InvertWeaponScroll;
	Parms.MouseSmoothing = MouseSmoothing;
	Parms.DisableControlAxisRotationInLean = DisableControlAxisRotationInLean;
	Parms.GP_MovementDeadzone = GP_MovementDeadzone;
	Parms.GP_LookDeadzone = GP_LookDeadzone;
	Parms.GP_ResponseCurve = GP_ResponseCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyConfigData_Game
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Language                             Language                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SendPlayData                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ApplyConfigData_Game(EN_Language Language, bool SendPlayData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyConfigData_Game");

	Params::BP_GameInstance_C_ApplyConfigData_Game Parms{};

	Parms.Language = Language;
	Parms.SendPlayData = SendPlayData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyConfigData_Graphics
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_WindowMode                           WindowMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_DisplayResolution                    DisplayResolution                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Brightness                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_FPSLimit                             FPSLimit                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetroEffect                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CameraShake_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VSync                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DGI                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ApplyConfigData_Graphics(EN_WindowMode WindowMode, EN_DisplayResolution DisplayResolution, double Brightness, int32 FOV, EN_FPSLimit FPSLimit, bool RetroEffect, double CameraShake_0, bool VSync, bool DGI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyConfigData_Graphics");

	Params::BP_GameInstance_C_ApplyConfigData_Graphics Parms{};

	Parms.WindowMode = WindowMode;
	Parms.DisplayResolution = DisplayResolution;
	Parms.Brightness = Brightness;
	Parms.FOV = FOV;
	Parms.FPSLimit = FPSLimit;
	Parms.RetroEffect = RetroEffect;
	Parms.CameraShake_0 = CameraShake_0;
	Parms.VSync = VSync;
	Parms.DGI = DGI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyConfigData_UI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Crosshair                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   TaskIcon                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   HUDMode                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ApplyConfigData_UI(bool Crosshair, uint8 TaskIcon, uint8 HUDMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyConfigData_UI");

	Params::BP_GameInstance_C_ApplyConfigData_UI Parms{};

	Parms.Crosshair = Crosshair;
	Parms.TaskIcon = TaskIcon;
	Parms.HUDMode = HUDMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyKeymapData_Gamepad
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FName, struct FStr_ActionKeymap>&ActionKeyMap_Gamepad                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<class FName, struct FStr_AxisKeymap>&AxisKeyMap_Gamepad                                     (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::ApplyKeymapData_Gamepad(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap_Gamepad, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap_Gamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyKeymapData_Gamepad");

	Params::BP_GameInstance_C_ApplyKeymapData_Gamepad Parms{};

	Parms.ActionKeyMap_Gamepad = std::move(ActionKeyMap_Gamepad);
	Parms.AxisKeyMap_Gamepad = std::move(AxisKeyMap_Gamepad);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ApplyKeymapData_KBM
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FName, struct FStr_ActionKeymap>&ActionKeyMap                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<class FName, struct FStr_AxisKeymap>&AxisKeyMap                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::ApplyKeymapData_KBM(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ApplyKeymapData_KBM");

	Params::BP_GameInstance_C_ApplyKeymapData_KBM Parms{};

	Parms.ActionKeyMap = std::move(ActionKeyMap);
	Parms.AxisKeyMap = std::move(AxisKeyMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Check_DataVersion
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBase_SaveGameObject_C*           SaveGameObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Need_to_Convert                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Check_DataVersion(class UBase_SaveGameObject_C* SaveGameObject, bool* Need_to_Convert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Check_DataVersion");

	Params::BP_GameInstance_C_Check_DataVersion Parms{};

	Parms.SaveGameObject = SaveGameObject;

	UObject::ProcessEvent(Func, &Parms);

	if (Need_to_Convert != nullptr)
		*Need_to_Convert = Parms.Need_to_Convert;
}


// Function BP_GameInstance.BP_GameInstance_C.CheckGameSaveDataIsLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::CheckGameSaveDataIsLoaded(bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "CheckGameSaveDataIsLoaded");

	Params::BP_GameInstance_C_CheckGameSaveDataIsLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_GameInstance.BP_GameInstance_C.CheckSaveDataLoaded
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::CheckSaveDataLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "CheckSaveDataLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Create_NewData
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_SaveGameObjType                      DataType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Create_NewData(EN_SaveGameObjType DataType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Create_NewData");

	Params::BP_GameInstance_C_Create_NewData Parms{};

	Parms.DataType = DataType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ExecuteUbergraph_BP_GameInstance
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::ExecuteUbergraph_BP_GameInstance(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ExecuteUbergraph_BP_GameInstance");

	Params::BP_GameInstance_C_ExecuteUbergraph_BP_GameInstance Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.GetAAOLForFunctionLibrary
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   AimAngleOutLog_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetAAOLForFunctionLibrary(bool* AimAngleOutLog_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetAAOLForFunctionLibrary");

	Params::BP_GameInstance_C_GetAAOLForFunctionLibrary Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AimAngleOutLog_0 != nullptr)
		*AimAngleOutLog_0 = Parms.AimAngleOutLog_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetActionKeyDisplayName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_ActionKeymap&         Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class FName*                            Name_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetActionKeyDisplayName(const struct FStr_ActionKeymap& Key, class FName* Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetActionKeyDisplayName");

	Params::BP_GameInstance_C_GetActionKeyDisplayName Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = Parms.Name_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetAllEventProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, int32>*               EventProgress                                          (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetAllEventProgress(TMap<class FName, int32>* EventProgress, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetAllEventProgress");

	Params::BP_GameInstance_C_GetAllEventProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EventProgress != nullptr)
		*EventProgress = std::move(Parms.EventProgress);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetAllOnceItemDropRateFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, double>*              AllOnceItemData                                        (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetAllOnceItemDropRateFromDB(TMap<class FName, double>* AllOnceItemData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetAllOnceItemDropRateFromDB");

	Params::BP_GameInstance_C_GetAllOnceItemDropRateFromDB Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllOnceItemData != nullptr)
		*AllOnceItemData = std::move(Parms.AllOnceItemData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetAllSkillNameFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>*                    SkillRowName                                           (Parm, OutParm)

void UBP_GameInstance_C::GetAllSkillNameFromDB(TArray<class FName>* SkillRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetAllSkillNameFromDB");

	Params::BP_GameInstance_C_GetAllSkillNameFromDB Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkillRowName != nullptr)
		*SkillRowName = std::move(Parms.SkillRowName);
}


// Function BP_GameInstance.BP_GameInstance_C.GetAllWeaponNameAndCategoryFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, struct FStr_WeaponNameAndSubCategory>*AllData                                                (Parm, OutParm)

void UBP_GameInstance_C::GetAllWeaponNameAndCategoryFromDB(bool* Success, TMap<class FName, struct FStr_WeaponNameAndSubCategory>* AllData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetAllWeaponNameAndCategoryFromDB");

	Params::BP_GameInstance_C_GetAllWeaponNameAndCategoryFromDB Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (AllData != nullptr)
		*AllData = std::move(Parms.AllData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetAmmoSpecDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AmmoRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_AmmoData*                   AmmoData                                               (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetAmmoSpecDataFromDB(class FName AmmoRowName, struct FStr_AmmoData* AmmoData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetAmmoSpecDataFromDB");

	Params::BP_GameInstance_C_GetAmmoSpecDataFromDB Parms{};

	Parms.AmmoRowName = AmmoRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (AmmoData != nullptr)
		*AmmoData = std::move(Parms.AmmoData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetArmorPointData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        SurfaceType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ArmorPoint                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetArmorPointData(EPhysicalSurface SurfaceType, int32* ArmorPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetArmorPointData");

	Params::BP_GameInstance_C_GetArmorPointData Parms{};

	Parms.SurfaceType = SurfaceType;

	UObject::ProcessEvent(Func, &Parms);

	if (ArmorPoint != nullptr)
		*ArmorPoint = Parms.ArmorPoint;
}


// Function BP_GameInstance.BP_GameInstance_C.GetCashItemDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CashItemRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_CashItemData*               CashItemData                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetCashItemDataFromDB(class FName CashItemRowName, bool* Success, struct FStr_CashItemData* CashItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetCashItemDataFromDB");

	Params::BP_GameInstance_C_GetCashItemDataFromDB Parms{};

	Parms.CashItemRowName = CashItemRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (CashItemData != nullptr)
		*CashItemData = std::move(Parms.CashItemData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetCollectionItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>*                          CollectionItem                                         (Parm, OutParm)

void UBP_GameInstance_C::GetCollectionItem(TArray<int32>* CollectionItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetCollectionItem");

	Params::BP_GameInstance_C_GetCollectionItem Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CollectionItem != nullptr)
		*CollectionItem = std::move(Parms.CollectionItem);
}


// Function BP_GameInstance.BP_GameInstance_C.GetColorTeamMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsColorTeamMode_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetColorTeamMode(bool* IsColorTeamMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetColorTeamMode");

	Params::BP_GameInstance_C_GetColorTeamMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsColorTeamMode_0 != nullptr)
		*IsColorTeamMode_0 = Parms.IsColorTeamMode_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetConfigData_All
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USGO_ConfigData_C**               ConfigData_0                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetConfigData_All(class USGO_ConfigData_C** ConfigData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetConfigData_All");

	Params::BP_GameInstance_C_GetConfigData_All Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ConfigData_0 != nullptr)
		*ConfigData_0 = Parms.ConfigData_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetConfigData_Game
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8*                                  Language                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   SendPlayData                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetConfigData_Game(uint8* Language, bool* SendPlayData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetConfigData_Game");

	Params::BP_GameInstance_C_GetConfigData_Game Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Language != nullptr)
		*Language = Parms.Language;

	if (SendPlayData != nullptr)
		*SendPlayData = Parms.SendPlayData;
}


// Function BP_GameInstance.BP_GameInstance_C.GetConfigData_UI
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   EnableCrosshair                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8*                                  TaskIcon                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8*                                  HUDMode                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetConfigData_UI(bool* EnableCrosshair, uint8* TaskIcon, uint8* HUDMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetConfigData_UI");

	Params::BP_GameInstance_C_GetConfigData_UI Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EnableCrosshair != nullptr)
		*EnableCrosshair = Parms.EnableCrosshair;

	if (TaskIcon != nullptr)
		*TaskIcon = Parms.TaskIcon;

	if (HUDMode != nullptr)
		*HUDMode = Parms.HUDMode;
}


// Function BP_GameInstance.BP_GameInstance_C.GetDataItemDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DataItemRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_DataItemData*               DataItemData                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetDataItemDataFromDB(class FName DataItemRowName, bool* Success, struct FStr_DataItemData* DataItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetDataItemDataFromDB");

	Params::BP_GameInstance_C_GetDataItemDataFromDB Parms{};

	Parms.DataItemRowName = DataItemRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (DataItemData != nullptr)
		*DataItemData = std::move(Parms.DataItemData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetDebugFocusRender
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsDebug                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetDebugFocusRender(bool* IsDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetDebugFocusRender");

	Params::BP_GameInstance_C_GetDebugFocusRender Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDebug != nullptr)
		*IsDebug = Parms.IsDebug;
}


// Function BP_GameInstance.BP_GameInstance_C.GetDefaultConfigData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, bool>*                DefaultBool                                            (Parm, OutParm)
// TMap<class FName, uint8>*               DefaultByte                                            (Parm, OutParm)
// TMap<class FName, int32>*               DefaultInteger                                         (Parm, OutParm)
// TMap<class FName, double>*              DefaultFloat                                           (Parm, OutParm)

void UBP_GameInstance_C::GetDefaultConfigData(TMap<class FName, bool>* DefaultBool, TMap<class FName, uint8>* DefaultByte, TMap<class FName, int32>* DefaultInteger, TMap<class FName, double>* DefaultFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetDefaultConfigData");

	Params::BP_GameInstance_C_GetDefaultConfigData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DefaultBool != nullptr)
		*DefaultBool = std::move(Parms.DefaultBool);

	if (DefaultByte != nullptr)
		*DefaultByte = std::move(Parms.DefaultByte);

	if (DefaultInteger != nullptr)
		*DefaultInteger = std::move(Parms.DefaultInteger);

	if (DefaultFloat != nullptr)
		*DefaultFloat = std::move(Parms.DefaultFloat);
}


// Function BP_GameInstance.BP_GameInstance_C.GetDefaultKeymapData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FStr_AxisKeymap>*DefaultAxis_KBM                                        (Parm, OutParm)
// TMap<class FName, struct FStr_ActionKeymap>*DefaultAction_KBM                                      (Parm, OutParm)
// TMap<class FName, struct FStr_AxisKeymap>*DefaultAxis_GP                                         (Parm, OutParm)
// TMap<class FName, struct FStr_ActionKeymap>*DefaultAction_GP                                       (Parm, OutParm)

void UBP_GameInstance_C::GetDefaultKeymapData(TMap<class FName, struct FStr_AxisKeymap>* DefaultAxis_KBM, TMap<class FName, struct FStr_ActionKeymap>* DefaultAction_KBM, TMap<class FName, struct FStr_AxisKeymap>* DefaultAxis_GP, TMap<class FName, struct FStr_ActionKeymap>* DefaultAction_GP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetDefaultKeymapData");

	Params::BP_GameInstance_C_GetDefaultKeymapData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DefaultAxis_KBM != nullptr)
		*DefaultAxis_KBM = std::move(Parms.DefaultAxis_KBM);

	if (DefaultAction_KBM != nullptr)
		*DefaultAction_KBM = std::move(Parms.DefaultAction_KBM);

	if (DefaultAxis_GP != nullptr)
		*DefaultAxis_GP = std::move(Parms.DefaultAxis_GP);

	if (DefaultAction_GP != nullptr)
		*DefaultAction_GP = std::move(Parms.DefaultAction_GP);
}


// Function BP_GameInstance.BP_GameInstance_C.GetDiscDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             DiscRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_DiscType*                   DiscData                                               (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetDiscDataFromDB(class FName DiscRowName, bool* Success, struct FStr_DiscType* DiscData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetDiscDataFromDB");

	Params::BP_GameInstance_C_GetDiscDataFromDB Parms{};

	Parms.DiscRowName = DiscRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (DiscData != nullptr)
		*DiscData = std::move(Parms.DiscData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetDLSForFunctionLibrary
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStr_DebugLogSetting*            DebugLogSetting_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetDLSForFunctionLibrary(struct FStr_DebugLogSetting* DebugLogSetting_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetDLSForFunctionLibrary");

	Params::BP_GameInstance_C_GetDLSForFunctionLibrary Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DebugLogSetting_0 != nullptr)
		*DebugLogSetting_0 = std::move(Parms.DebugLogSetting_0);
}


// Function BP_GameInstance.BP_GameInstance_C.GetEventProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Progress                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetEventProgress(class FName EventName, int32* Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetEventProgress");

	Params::BP_GameInstance_C_GetEventProgress Parms{};

	Parms.EventName = EventName;

	UObject::ProcessEvent(Func, &Parms);

	if (Progress != nullptr)
		*Progress = Parms.Progress;
}


// Function BP_GameInstance.BP_GameInstance_C.GetFactionalRelationShip
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Faction                              SelfFaction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_Faction                              OtherFaction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsFrendry                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetFactionalRelationShip(EN_Faction SelfFaction, EN_Faction OtherFaction, bool* IsFrendry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetFactionalRelationShip");

	Params::BP_GameInstance_C_GetFactionalRelationShip Parms{};

	Parms.SelfFaction = SelfFaction;
	Parms.OtherFaction = OtherFaction;

	UObject::ProcessEvent(Func, &Parms);

	if (IsFrendry != nullptr)
		*IsFrendry = Parms.IsFrendry;
}


// Function BP_GameInstance.BP_GameInstance_C.GetFridgeDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FridgeRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_FridgeData*                 FridgeData                                             (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetFridgeDataFromDB(class FName FridgeRowName, struct FStr_FridgeData* FridgeData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetFridgeDataFromDB");

	Params::BP_GameInstance_C_GetFridgeDataFromDB Parms{};

	Parms.FridgeRowName = FridgeRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (FridgeData != nullptr)
		*FridgeData = std::move(Parms.FridgeData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetFTSForFunctionLibrary
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   FireTrace_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   BulletSpeed_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetFTSForFunctionLibrary(bool* FireTrace_0, bool* BulletSpeed_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetFTSForFunctionLibrary");

	Params::BP_GameInstance_C_GetFTSForFunctionLibrary Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FireTrace_0 != nullptr)
		*FireTrace_0 = Parms.FireTrace_0;

	if (BulletSpeed_0 != nullptr)
		*BulletSpeed_0 = Parms.BulletSpeed_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetGunBaseSpecFromDB
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_GunSpecData*                GunBaseSpec                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetGunBaseSpecFromDB(class FName WeaponRowName, struct FStr_GunSpecData* GunBaseSpec, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetGunBaseSpecFromDB");

	Params::BP_GameInstance_C_GetGunBaseSpecFromDB Parms{};

	Parms.WeaponRowName = WeaponRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (GunBaseSpec != nullptr)
		*GunBaseSpec = std::move(Parms.GunBaseSpec);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetGunPartsDataByCategoryFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_GunPartsCategory                     PartsCategory                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>*                    GunPartsRowNames                                       (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetGunPartsDataByCategoryFromDB(class FName WeaponRowName, EN_GunPartsCategory PartsCategory, TArray<class FName>* GunPartsRowNames, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetGunPartsDataByCategoryFromDB");

	Params::BP_GameInstance_C_GetGunPartsDataByCategoryFromDB Parms{};

	Parms.WeaponRowName = WeaponRowName;
	Parms.PartsCategory = PartsCategory;

	UObject::ProcessEvent(Func, &Parms);

	if (GunPartsRowNames != nullptr)
		*GunPartsRowNames = std::move(Parms.GunPartsRowNames);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetGunPartsDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             GunPartsRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_GunPartsData*               GunPartsData                                           (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetGunPartsDataFromDB(class FName GunPartsRowName, struct FStr_GunPartsData* GunPartsData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetGunPartsDataFromDB");

	Params::BP_GameInstance_C_GetGunPartsDataFromDB Parms{};

	Parms.GunPartsRowName = GunPartsRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (GunPartsData != nullptr)
		*GunPartsData = std::move(Parms.GunPartsData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetHitDamageMultiplierData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsArmorPenetrated                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 DamageMultiplier                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetHitDamageMultiplierData(EPhysicalSurface HitSurfaceType, bool IsArmorPenetrated, double* DamageMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetHitDamageMultiplierData");

	Params::BP_GameInstance_C_GetHitDamageMultiplierData Parms{};

	Parms.HitSurfaceType = HitSurfaceType;
	Parms.IsArmorPenetrated = IsArmorPenetrated;

	UObject::ProcessEvent(Func, &Parms);

	if (DamageMultiplier != nullptr)
		*DamageMultiplier = Parms.DamageMultiplier;
}


// Function BP_GameInstance.BP_GameInstance_C.GetHitStunDamageMultiplierData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPhysicalSurface                        HitSurface                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Multiplier                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetHitStunDamageMultiplierData(EPhysicalSurface HitSurface, double* Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetHitStunDamageMultiplierData");

	Params::BP_GameInstance_C_GetHitStunDamageMultiplierData Parms{};

	Parms.HitSurface = HitSurface;

	UObject::ProcessEvent(Func, &Parms);

	if (Multiplier != nullptr)
		*Multiplier = Parms.Multiplier;
}


// Function BP_GameInstance.BP_GameInstance_C.GetHomeFacilityDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             FacilityRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_HomeFacilityData*           FacilityData                                           (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetHomeFacilityDataFromDB(class FName FacilityRowName, struct FStr_HomeFacilityData* FacilityData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetHomeFacilityDataFromDB");

	Params::BP_GameInstance_C_GetHomeFacilityDataFromDB Parms{};

	Parms.FacilityRowName = FacilityRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (FacilityData != nullptr)
		*FacilityData = std::move(Parms.FacilityData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetInputKeyByActionName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_ActionKeymap*               Key                                                    (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetInputKeyByActionName(class FName ActionName, struct FStr_ActionKeymap* Key, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetInputKeyByActionName");

	Params::BP_GameInstance_C_GetInputKeyByActionName Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = std::move(Parms.Key);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetInputKeyIconMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsGamepadMode                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetInputKeyIconMode(bool* IsGamepadMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetInputKeyIconMode");

	Params::BP_GameInstance_C_GetInputKeyIconMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsGamepadMode != nullptr)
		*IsGamepadMode = Parms.IsGamepadMode;
}


// Function BP_GameInstance.BP_GameInstance_C.GetIsReturnToTitle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsReturnToTitle_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetIsReturnToTitle(bool* IsReturnToTitle_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetIsReturnToTitle");

	Params::BP_GameInstance_C_GetIsReturnToTitle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsReturnToTitle_0 != nullptr)
		*IsReturnToTitle_0 = Parms.IsReturnToTitle_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetKeyIconFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UTexture**                        Icon                                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetKeyIconFromDB(const struct FKey& Key, class UTexture** Icon, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetKeyIconFromDB");

	Params::BP_GameInstance_C_GetKeyIconFromDB Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (Icon != nullptr)
		*Icon = Parms.Icon;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetKeymapData_All
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USGO_KeymapData_C**               KeymapData_0                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetKeymapData_All(class USGO_KeymapData_C** KeymapData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetKeymapData_All");

	Params::BP_GameInstance_C_GetKeymapData_All Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KeymapData_0 != nullptr)
		*KeymapData_0 = Parms.KeymapData_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetLevelDataImageFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture2D**                      Image                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetLevelDataImageFromDB(class FName AreaRowName, class UTexture2D** Image, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetLevelDataImageFromDB");

	Params::BP_GameInstance_C_GetLevelDataImageFromDB Parms{};

	Parms.AreaRowName = AreaRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Image != nullptr)
		*Image = Parms.Image;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetLevelNameFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AreaRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Name_0                                                 (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetLevelNameFromDB(class FName AreaRowName, class FText* Name_0, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetLevelNameFromDB");

	Params::BP_GameInstance_C_GetLevelNameFromDB Parms{};

	Parms.AreaRowName = AreaRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Name_0 != nullptr)
		*Name_0 = std::move(Parms.Name_0);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetLockedWeaponPartsOnlyUnlockedWeapon
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>*                    WeaponPartsRowNames                                    (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetLockedWeaponPartsOnlyUnlockedWeapon(TArray<class FName>* WeaponPartsRowNames, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetLockedWeaponPartsOnlyUnlockedWeapon");

	Params::BP_GameInstance_C_GetLockedWeaponPartsOnlyUnlockedWeapon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponPartsRowNames != nullptr)
		*WeaponPartsRowNames = std::move(Parms.WeaponPartsRowNames);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetMeleeBaseSpecFromDB
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_MeleeBaseSpecData*          BaseSpec                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetMeleeBaseSpecFromDB(class FName WeaponRowName, struct FStr_MeleeBaseSpecData* BaseSpec, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetMeleeBaseSpecFromDB");

	Params::BP_GameInstance_C_GetMeleeBaseSpecFromDB Parms{};

	Parms.WeaponRowName = WeaponRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (BaseSpec != nullptr)
		*BaseSpec = std::move(Parms.BaseSpec);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetMeleePartsDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MeleePartsRowName                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_MeleePartsData*             MeleePartsData                                         (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetMeleePartsDataFromDB(class FName MeleePartsRowName, struct FStr_MeleePartsData* MeleePartsData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetMeleePartsDataFromDB");

	Params::BP_GameInstance_C_GetMeleePartsDataFromDB Parms{};

	Parms.MeleePartsRowName = MeleePartsRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (MeleePartsData != nullptr)
		*MeleePartsData = std::move(Parms.MeleePartsData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetNewTaskFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName*                            NewTaskRowName                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsRepeatTask                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetNewTaskFromDB(class FName* NewTaskRowName, bool* IsRepeatTask, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetNewTaskFromDB");

	Params::BP_GameInstance_C_GetNewTaskFromDB Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewTaskRowName != nullptr)
		*NewTaskRowName = Parms.NewTaskRowName;

	if (IsRepeatTask != nullptr)
		*IsRepeatTask = Parms.IsRepeatTask;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetNPCAutoMantle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsAutoMantle                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetNPCAutoMantle(bool* IsAutoMantle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetNPCAutoMantle");

	Params::BP_GameInstance_C_GetNPCAutoMantle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAutoMantle != nullptr)
		*IsAutoMantle = Parms.IsAutoMantle;
}


// Function BP_GameInstance.BP_GameInstance_C.GetNPCDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NPCRowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_NPCData*                    NPC_Data                                               (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetNPCDataFromDB(class FName NPCRowName, bool* Success, struct FStr_NPCData* NPC_Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetNPCDataFromDB");

	Params::BP_GameInstance_C_GetNPCDataFromDB Parms{};

	Parms.NPCRowName = NPCRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (NPC_Data != nullptr)
		*NPC_Data = std::move(Parms.NPC_Data);
}


// Function BP_GameInstance.BP_GameInstance_C.GetNPCTaskViewMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsEnable                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetNPCTaskViewMode(bool* IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetNPCTaskViewMode");

	Params::BP_GameInstance_C_GetNPCTaskViewMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEnable != nullptr)
		*IsEnable = Parms.IsEnable;
}


// Function BP_GameInstance.BP_GameInstance_C.GetObjectDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ObjectRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_ObjectData*                 ObjectData                                             (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetObjectDataFromDB(class FName ObjectRowName, struct FStr_ObjectData* ObjectData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetObjectDataFromDB");

	Params::BP_GameInstance_C_GetObjectDataFromDB Parms{};

	Parms.ObjectRowName = ObjectRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (ObjectData != nullptr)
		*ObjectData = std::move(Parms.ObjectData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetOnceItemDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             OnceItemRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_OnceItemData*               OnceItemData                                           (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetOnceItemDataFromDB(class FName OnceItemRowName, bool* Success, struct FStr_OnceItemData* OnceItemData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetOnceItemDataFromDB");

	Params::BP_GameInstance_C_GetOnceItemDataFromDB Parms{};

	Parms.OnceItemRowName = OnceItemRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (OnceItemData != nullptr)
		*OnceItemData = std::move(Parms.OnceItemData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetPrototypeConfigData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CameraShake_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetPrototypeConfigData(bool* CameraShake_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetPrototypeConfigData");

	Params::BP_GameInstance_C_GetPrototypeConfigData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraShake_0 != nullptr)
		*CameraShake_0 = Parms.CameraShake_0;
}


// Function BP_GameInstance.BP_GameInstance_C.GetRaytraceGropIDsFromGameInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetRaytraceGropIDsFromGameInstance(int32* ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetRaytraceGropIDsFromGameInstance");

	Params::BP_GameInstance_C_GetRaytraceGropIDsFromGameInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ID != nullptr)
		*ID = Parms.ID;
}


// Function BP_GameInstance.BP_GameInstance_C.GetReward
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_TaskReward&           Reward                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetReward(const struct FStr_TaskReward& Reward)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetReward");

	Params::BP_GameInstance_C_GetReward Parms{};

	Parms.Reward = std::move(Reward);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_AreaUnlockData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSet<class FName>*                      AreaUnlocked                                           (Parm, OutParm)

void UBP_GameInstance_C::GetSaveData_AreaUnlockData(TSet<class FName>* AreaUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_AreaUnlockData");

	Params::BP_GameInstance_C_GetSaveData_AreaUnlockData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AreaUnlocked != nullptr)
		*AreaUnlocked = std::move(Parms.AreaUnlocked);
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_ClearTaskCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TaskID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_ClearTaskCount(class FName TaskID, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_ClearTaskCount");

	Params::BP_GameInstance_C_GetSaveData_ClearTaskCount Parms{};

	Parms.TaskID = TaskID;

	UObject::ProcessEvent(Func, &Parms);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_CurrentAmmo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<EWeaponSelector, struct FStr_CurrentAmmo>*CurrentAmmo                                            (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_CurrentAmmo(TMap<EWeaponSelector, struct FStr_CurrentAmmo>* CurrentAmmo, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_CurrentAmmo");

	Params::BP_GameInstance_C_GetSaveData_CurrentAmmo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentAmmo != nullptr)
		*CurrentAmmo = std::move(Parms.CurrentAmmo);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_CurrentTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<uint8, struct FStr_TaskCardState>* Task                                                   (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_CurrentTask(TMap<uint8, struct FStr_TaskCardState>* Task, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_CurrentTask");

	Params::BP_GameInstance_C_GetSaveData_CurrentTask Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Task != nullptr)
		*Task = std::move(Parms.Task);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_CurrentTaskItems
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TaskItemRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Amount                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_CurrentTaskItems(class FName TaskItemRowName, int32* Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_CurrentTaskItems");

	Params::BP_GameInstance_C_GetSaveData_CurrentTaskItems Parms{};

	Parms.TaskItemRowName = TaskItemRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Amount != nullptr)
		*Amount = Parms.Amount;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_CurrentWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector*                        CurrentWeaponSelector                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_CurrentWeapon(EWeaponSelector* CurrentWeaponSelector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_CurrentWeapon");

	Params::BP_GameInstance_C_GetSaveData_CurrentWeapon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentWeaponSelector != nullptr)
		*CurrentWeaponSelector = Parms.CurrentWeaponSelector;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_EquipWeaponData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<EWeaponSelector, class FName>*     WeaponData                                             (Parm, OutParm)

void UBP_GameInstance_C::GetSaveData_EquipWeaponData(TMap<EWeaponSelector, class FName>* WeaponData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_EquipWeaponData");

	Params::BP_GameInstance_C_GetSaveData_EquipWeaponData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponData != nullptr)
		*WeaponData = std::move(Parms.WeaponData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_IsClearedAllTask
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsAllClear                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_IsClearedAllTask(bool* IsAllClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_IsClearedAllTask");

	Params::BP_GameInstance_C_GetSaveData_IsClearedAllTask Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsAllClear != nullptr)
		*IsAllClear = Parms.IsAllClear;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_IsUnlockedShopItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SkillRowName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsUnlocked                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_IsUnlockedShopItem(class FName SkillRowName, bool* IsUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_IsUnlockedShopItem");

	Params::BP_GameInstance_C_GetSaveData_IsUnlockedShopItem Parms{};

	Parms.SkillRowName = SkillRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnlocked != nullptr)
		*IsUnlocked = Parms.IsUnlocked;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_IsUnlockedWeaponPartsBlueprint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponPartsRowName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsUnlocked                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_IsUnlockedWeaponPartsBlueprint(class FName WeaponPartsRowName, bool* IsUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_IsUnlockedWeaponPartsBlueprint");

	Params::BP_GameInstance_C_GetSaveData_IsUnlockedWeaponPartsBlueprint Parms{};

	Parms.WeaponPartsRowName = WeaponPartsRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnlocked != nullptr)
		*IsUnlocked = Parms.IsUnlocked;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_PlayerStats
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  Cash                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Data                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, int32>*               Disc                                                   (Parm, OutParm)

void UBP_GameInstance_C::GetSaveData_PlayerStats(int32* Cash, int32* Data, TMap<class FName, int32>* Disc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_PlayerStats");

	Params::BP_GameInstance_C_GetSaveData_PlayerStats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Cash != nullptr)
		*Cash = Parms.Cash;

	if (Data != nullptr)
		*Data = Parms.Data;

	if (Disc != nullptr)
		*Disc = std::move(Parms.Disc);
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_PurchasedWeaponParts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSet<class FName>*                      WeaponPartsRowName                                     (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_PurchasedWeaponParts(TSet<class FName>* WeaponPartsRowName, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_PurchasedWeaponParts");

	Params::BP_GameInstance_C_GetSaveData_PurchasedWeaponParts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponPartsRowName != nullptr)
		*WeaponPartsRowName = std::move(Parms.WeaponPartsRowName);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_RoomKeyUnlockData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             KeyName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsUnlocked                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_RoomKeyUnlockData(class FName KeyName, bool* IsUnlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_RoomKeyUnlockData");

	Params::BP_GameInstance_C_GetSaveData_RoomKeyUnlockData Parms{};

	Parms.KeyName = KeyName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnlocked != nullptr)
		*IsUnlocked = Parms.IsUnlocked;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_SkillLevel_Activated
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SkillRowName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  SkillLv                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_SkillLevel_Activated(class FName SkillRowName, bool* Success, int32* SkillLv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_SkillLevel_Activated");

	Params::BP_GameInstance_C_GetSaveData_SkillLevel_Activated Parms{};

	Parms.SkillRowName = SkillRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (SkillLv != nullptr)
		*SkillLv = Parms.SkillLv;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_SkillLevel_Unlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SkillRowName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  SkillLv                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_SkillLevel_Unlocked(class FName SkillRowName, bool* Success, int32* SkillLv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_SkillLevel_Unlocked");

	Params::BP_GameInstance_C_GetSaveData_SkillLevel_Unlocked Parms{};

	Parms.SkillRowName = SkillRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (SkillLv != nullptr)
		*SkillLv = Parms.SkillLv;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_SkillLevel_UnlockedAll
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, int32>*               Skill                                                  (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_SkillLevel_UnlockedAll(TMap<class FName, int32>* Skill, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_SkillLevel_UnlockedAll");

	Params::BP_GameInstance_C_GetSaveData_SkillLevel_UnlockedAll Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Skill != nullptr)
		*Skill = std::move(Parms.Skill);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_UnlockGunIDList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>*                    GunRowName                                             (Parm, OutParm)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_UnlockGunIDList(TArray<class FName>* GunRowName, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_UnlockGunIDList");

	Params::BP_GameInstance_C_GetSaveData_UnlockGunIDList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (GunRowName != nullptr)
		*GunRowName = std::move(Parms.GunRowName);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_UnlockGunIDList_Length
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  Length                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_UnlockGunIDList_Length(int32* Length)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_UnlockGunIDList_Length");

	Params::BP_GameInstance_C_GetSaveData_UnlockGunIDList_Length Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Length != nullptr)
		*Length = Parms.Length;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_UnlockWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsUnlock                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_UnlockWeapon(class FName WeaponRowName, bool* IsUnlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_UnlockWeapon");

	Params::BP_GameInstance_C_GetSaveData_UnlockWeapon Parms{};

	Parms.WeaponRowName = WeaponRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsUnlock != nullptr)
		*IsUnlock = Parms.IsUnlock;
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_WeaponCustomMetaData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_WeaponCustomMetaData*       WeaponCustomMetaData                                   (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_WeaponCustomMetaData(class FName WeaponRowName, bool* Success, struct FStr_WeaponCustomMetaData* WeaponCustomMetaData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_WeaponCustomMetaData");

	Params::BP_GameInstance_C_GetSaveData_WeaponCustomMetaData Parms{};

	Parms.WeaponRowName = WeaponRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (WeaponCustomMetaData != nullptr)
		*WeaponCustomMetaData = std::move(Parms.WeaponCustomMetaData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetSaveData_WeaponCustomSaveData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_WeaponCustomSaveData_Temp*  WeaponCustomSaveData                                   (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSaveData_WeaponCustomSaveData(class FName WeaponRowName, bool* Success, struct FStr_WeaponCustomSaveData_Temp* WeaponCustomSaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSaveData_WeaponCustomSaveData");

	Params::BP_GameInstance_C_GetSaveData_WeaponCustomSaveData Parms{};

	Parms.WeaponRowName = WeaponRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (WeaponCustomSaveData != nullptr)
		*WeaponCustomSaveData = std::move(Parms.WeaponCustomSaveData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetSkillDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_SkillData*                  SkillData                                              (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetSkillDataFromDB(class FName RowName, bool* Success, struct FStr_SkillData* SkillData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetSkillDataFromDB");

	Params::BP_GameInstance_C_GetSkillDataFromDB Parms{};

	Parms.RowName = RowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (SkillData != nullptr)
		*SkillData = std::move(Parms.SkillData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetTaskDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TaskRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_TaskData*                   TaskData                                               (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetTaskDataFromDB(class FName TaskRowName, struct FStr_TaskData* TaskData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetTaskDataFromDB");

	Params::BP_GameInstance_C_GetTaskDataFromDB Parms{};

	Parms.TaskRowName = TaskRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (TaskData != nullptr)
		*TaskData = std::move(Parms.TaskData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetTaskItemDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TaskItemRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_TaskItemData*               TaskItemData                                           (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetTaskItemDataFromDB(class FName TaskItemRowName, struct FStr_TaskItemData* TaskItemData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetTaskItemDataFromDB");

	Params::BP_GameInstance_C_GetTaskItemDataFromDB Parms{};

	Parms.TaskItemRowName = TaskItemRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (TaskItemData != nullptr)
		*TaskItemData = std::move(Parms.TaskItemData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.GetUIColor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLinearColor*                    PrimaryColor_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    SecondaryColor_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    TextActiveColor                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    TextDeactiveColor_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FLinearColor*                    RejectColor_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetUIColor(struct FLinearColor* PrimaryColor_0, struct FLinearColor* SecondaryColor_0, struct FLinearColor* TextActiveColor, struct FLinearColor* TextDeactiveColor_0, struct FLinearColor* RejectColor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetUIColor");

	Params::BP_GameInstance_C_GetUIColor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PrimaryColor_0 != nullptr)
		*PrimaryColor_0 = std::move(Parms.PrimaryColor_0);

	if (SecondaryColor_0 != nullptr)
		*SecondaryColor_0 = std::move(Parms.SecondaryColor_0);

	if (TextActiveColor != nullptr)
		*TextActiveColor = std::move(Parms.TextActiveColor);

	if (TextDeactiveColor_0 != nullptr)
		*TextDeactiveColor_0 = std::move(Parms.TextDeactiveColor_0);

	if (RejectColor_0 != nullptr)
		*RejectColor_0 = std::move(Parms.RejectColor_0);
}


// Function BP_GameInstance.BP_GameInstance_C.GetWeaponDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_WeaponData*                 WeaponData                                             (Parm, OutParm, HasGetValueTypeHash)

void UBP_GameInstance_C::GetWeaponDataFromDB(class FName RowName, bool* Success, struct FStr_WeaponData* WeaponData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetWeaponDataFromDB");

	Params::BP_GameInstance_C_GetWeaponDataFromDB Parms{};

	Parms.RowName = RowName;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (WeaponData != nullptr)
		*WeaponData = std::move(Parms.WeaponData);
}


// Function BP_GameInstance.BP_GameInstance_C.GetWeaponPartsDataFromDB
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponPartsRowName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_WeaponPartsCategory*                 WeaponPartsCategory                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_GunPartsData*               GunPartsData                                           (Parm, OutParm, HasGetValueTypeHash)
// struct FStr_MeleePartsData*             MeleePartsData                                         (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::GetWeaponPartsDataFromDB(class FName WeaponPartsRowName, EN_WeaponPartsCategory* WeaponPartsCategory, struct FStr_GunPartsData* GunPartsData, struct FStr_MeleePartsData* MeleePartsData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "GetWeaponPartsDataFromDB");

	Params::BP_GameInstance_C_GetWeaponPartsDataFromDB Parms{};

	Parms.WeaponPartsRowName = WeaponPartsRowName;

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponPartsCategory != nullptr)
		*WeaponPartsCategory = Parms.WeaponPartsCategory;

	if (GunPartsData != nullptr)
		*GunPartsData = std::move(Parms.GunPartsData);

	if (MeleePartsData != nullptr)
		*MeleePartsData = std::move(Parms.MeleePartsData);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.HandOverTaskItem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FName, int32>&         RequireItem                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::HandOverTaskItem(const TMap<class FName, int32>& RequireItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "HandOverTaskItem");

	Params::BP_GameInstance_C_HandOverTaskItem Parms{};

	Parms.RequireItem = std::move(RequireItem);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Initialize_SGOData
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::Initialize_SGOData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Initialize_SGOData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.InitializeRaytraceGroupID
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::InitializeRaytraceGroupID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "InitializeRaytraceGroupID");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.LinkCheckDB
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::LinkCheckDB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "LinkCheckDB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Load_ConfigData
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USGO_ConfigData_C*                ConfigData_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Load_ConfigData(class USGO_ConfigData_C* ConfigData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Load_ConfigData");

	Params::BP_GameInstance_C_Load_ConfigData Parms{};

	Parms.ConfigData_0 = ConfigData_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Load_KeymapData
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USGO_KeymapData_C*                KeymapData_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Load_KeymapData(class USGO_KeymapData_C* KeymapData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Load_KeymapData");

	Params::BP_GameInstance_C_Load_KeymapData Parms{};

	Parms.KeymapData_0 = KeymapData_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Load_ReadOnlyData
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USGO_ReadOnlyData_C*              ReadOnlyData_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Load_ReadOnlyData(class USGO_ReadOnlyData_C* ReadOnlyData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Load_ReadOnlyData");

	Params::BP_GameInstance_C_Load_ReadOnlyData Parms{};

	Parms.ReadOnlyData_0 = ReadOnlyData_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Load_SaveData
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USGO_SaveData_C*                  SaveData_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Load_SaveData(class USGO_SaveData_C* SaveData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Load_SaveData");

	Params::BP_GameInstance_C_Load_SaveData Parms{};

	Parms.SaveData_0 = SaveData_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Load_SGO
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    SlotName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBase_SaveGameObject_C**          LoadedSGO                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Load_SGO(const class FString& SlotName, bool* Success, class UBase_SaveGameObject_C** LoadedSGO)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Load_SGO");

	Params::BP_GameInstance_C_Load_SGO Parms{};

	Parms.SlotName = std::move(SlotName);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (LoadedSGO != nullptr)
		*LoadedSGO = Parms.LoadedSGO;
}


// Function BP_GameInstance.BP_GameInstance_C.LoadCollectionData
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::LoadCollectionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "LoadCollectionData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.OnRequestComplete_09D7BE344661219168791889D67AA0CD
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Response                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bSuccessful                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHttpHeader&               OutHeader                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::OnRequestComplete_09D7BE344661219168791889D67AA0CD(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnRequestComplete_09D7BE344661219168791889D67AA0CD");

	Params::BP_GameInstance_C_OnRequestComplete_09D7BE344661219168791889D67AA0CD Parms{};

	Parms.Response = std::move(Response);
	Parms.bSuccessful = bSuccessful;
	Parms.OutHeader = std::move(OutHeader);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnRequestComplete_576344C64ADCF71BB00D18A97E797E82
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Response                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bSuccessful                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHttpHeader&               OutHeader                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::OnRequestComplete_576344C64ADCF71BB00D18A97E797E82(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnRequestComplete_576344C64ADCF71BB00D18A97E797E82");

	Params::BP_GameInstance_C_OnRequestComplete_576344C64ADCF71BB00D18A97E797E82 Parms{};

	Parms.Response = std::move(Response);
	Parms.bSuccessful = bSuccessful;
	Parms.OutHeader = std::move(OutHeader);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnRequestComplete_A09BEA034B038482C19200BB8AB62FED
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Response                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bSuccessful                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHttpHeader&               OutHeader                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::OnRequestComplete_A09BEA034B038482C19200BB8AB62FED(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnRequestComplete_A09BEA034B038482C19200BB8AB62FED");

	Params::BP_GameInstance_C_OnRequestComplete_A09BEA034B038482C19200BB8AB62FED Parms{};

	Parms.Response = std::move(Response);
	Parms.bSuccessful = bSuccessful;
	Parms.OutHeader = std::move(OutHeader);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.OnRequestComplete_DB2E9F6E4F78A622F4A1F79948D87521
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Response                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    bSuccessful                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHttpHeader&               OutHeader                                              (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::OnRequestComplete_DB2E9F6E4F78A622F4A1F79948D87521(const class FString& Response, bool bSuccessful, const struct FHttpHeader& OutHeader)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "OnRequestComplete_DB2E9F6E4F78A622F4A1F79948D87521");

	Params::BP_GameInstance_C_OnRequestComplete_DB2E9F6E4F78A622F4A1F79948D87521 Parms{};

	Parms.Response = std::move(Response);
	Parms.bSuccessful = bSuccessful;
	Parms.OutHeader = std::move(OutHeader);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.ReceiveInit
// (Event, Public, BlueprintEvent)

void UBP_GameInstance_C::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ReceiveInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.RecoveryLostData_ConfigData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::RecoveryLostData_ConfigData(class FName Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "RecoveryLostData_ConfigData");

	Params::BP_GameInstance_C_RecoveryLostData_ConfigData Parms{};

	Parms.Key = Key;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.RemoveAllKeyMapping
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::RemoveAllKeyMapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "RemoveAllKeyMapping");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.ResetSaveData
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::ResetSaveData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ResetSaveData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.ResetSaveData_PlayerStats
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::ResetSaveData_PlayerStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ResetSaveData_PlayerStats");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.ResetSGOData
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::ResetSGOData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "ResetSGOData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.Save_ConfigData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Save_ConfigData(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Save_ConfigData");

	Params::BP_GameInstance_C_Save_ConfigData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.Save_KeymapData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Save_KeymapData(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Save_KeymapData");

	Params::BP_GameInstance_C_Save_KeymapData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.Save_ReadOnlyData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Save_ReadOnlyData(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Save_ReadOnlyData");

	Params::BP_GameInstance_C_Save_ReadOnlyData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.Save_SaveData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Save_SaveData(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Save_SaveData");

	Params::BP_GameInstance_C_Save_SaveData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.SaveCollectionData
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SaveCollectionData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SaveCollectionData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SaveProgressCue_Add
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SaveProgressCue_Add()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SaveProgressCue_Add");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SaveProgressCue_Remove
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SaveProgressCue_Remove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SaveProgressCue_Remove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SaveProgressCue_Reset
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SaveProgressCue_Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SaveProgressCue_Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SaveSaveData_All
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SaveSaveData_All(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SaveSaveData_All");

	Params::BP_GameInstance_C_SaveSaveData_All Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.SendPlayData_GameEnd
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SendPlayData_GameEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SendPlayData_GameEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SendPlayData_GameStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SendPlayData_GameStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SendPlayData_GameStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SendPlayData_Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SendPlayData_Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SendPlayData_Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SendPlayData_Result
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_SendPlayData_Result&  ResultData                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_GameInstance_C::SendPlayData_Result(const struct FStr_SendPlayData_Result& ResultData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SendPlayData_Result");

	Params::BP_GameInstance_C_SendPlayData_Result Parms{};

	Parms.ResultData = std::move(ResultData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_ConfigData_Audio
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Master                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   BGM                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   SE                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   UI                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Set_ConfigData_Audio(uint8 Master, uint8 BGM, uint8 SE, uint8 UI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_ConfigData_Audio");

	Params::BP_GameInstance_C_Set_ConfigData_Audio Parms{};

	Parms.Master = Master;
	Parms.BGM = BGM;
	Parms.SE = SE;
	Parms.UI = UI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_ConfigData_Control
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Sensitivity_ADS                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Sensitivity_ADS_Scope2x                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Sensitivity_ADS_Scope4x                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InvertVerticalLook                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleSprint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleWalk                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleAim                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleCrouch                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ToggleLean                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnableWeaponScroll                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InvertWeaponScroll                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    MouseSmoothing                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DisableControlAxisRotationInLean                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GP_MovementDeadzone                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GP_LookDeadzone                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  GP_ResponseCurve                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Set_ConfigData_Control(int32 Sensitivity, int32 Sensitivity_ADS, int32 Sensitivity_ADS_Scope2x, int32 Sensitivity_ADS_Scope4x, bool InvertVerticalLook, bool ToggleSprint, bool ToggleWalk, bool ToggleAim, bool ToggleCrouch, bool ToggleLean, bool EnableWeaponScroll, bool InvertWeaponScroll, bool MouseSmoothing, bool DisableControlAxisRotationInLean, double GP_MovementDeadzone, double GP_LookDeadzone, double GP_ResponseCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_ConfigData_Control");

	Params::BP_GameInstance_C_Set_ConfigData_Control Parms{};

	Parms.Sensitivity = Sensitivity;
	Parms.Sensitivity_ADS = Sensitivity_ADS;
	Parms.Sensitivity_ADS_Scope2x = Sensitivity_ADS_Scope2x;
	Parms.Sensitivity_ADS_Scope4x = Sensitivity_ADS_Scope4x;
	Parms.InvertVerticalLook = InvertVerticalLook;
	Parms.ToggleSprint = ToggleSprint;
	Parms.ToggleWalk = ToggleWalk;
	Parms.ToggleAim = ToggleAim;
	Parms.ToggleCrouch = ToggleCrouch;
	Parms.ToggleLean = ToggleLean;
	Parms.EnableWeaponScroll = EnableWeaponScroll;
	Parms.InvertWeaponScroll = InvertWeaponScroll;
	Parms.MouseSmoothing = MouseSmoothing;
	Parms.DisableControlAxisRotationInLean = DisableControlAxisRotationInLean;
	Parms.GP_MovementDeadzone = GP_MovementDeadzone;
	Parms.GP_LookDeadzone = GP_LookDeadzone;
	Parms.GP_ResponseCurve = GP_ResponseCurve;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_ConfigData_Game
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   Language                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SendPlayData                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Set_ConfigData_Game(uint8 Language, bool SendPlayData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_ConfigData_Game");

	Params::BP_GameInstance_C_Set_ConfigData_Game Parms{};

	Parms.Language = Language;
	Parms.SendPlayData = SendPlayData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_ConfigData_Graphics
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_WindowMode                           WindowMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_DisplayResolution                    DisplayResolution                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Brightness                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_FPSLimit                             FPSLimit                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RetroEffect                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CameraShake_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    VSync                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    DGI                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Set_ConfigData_Graphics(EN_WindowMode WindowMode, EN_DisplayResolution DisplayResolution, double Brightness, int32 FOV, EN_FPSLimit FPSLimit, bool RetroEffect, double CameraShake_0, bool VSync, bool DGI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_ConfigData_Graphics");

	Params::BP_GameInstance_C_Set_ConfigData_Graphics Parms{};

	Parms.WindowMode = WindowMode;
	Parms.DisplayResolution = DisplayResolution;
	Parms.Brightness = Brightness;
	Parms.FOV = FOV;
	Parms.FPSLimit = FPSLimit;
	Parms.RetroEffect = RetroEffect;
	Parms.CameraShake_0 = CameraShake_0;
	Parms.VSync = VSync;
	Parms.DGI = DGI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_ConfigData_UI
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Crosshair                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   TaskIcon                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const uint8&                            HUDMode                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Set_ConfigData_UI(bool Crosshair, uint8 TaskIcon, const uint8& HUDMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_ConfigData_UI");

	Params::BP_GameInstance_C_Set_ConfigData_UI Parms{};

	Parms.Crosshair = Crosshair;
	Parms.TaskIcon = TaskIcon;
	Parms.HUDMode = HUDMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_KeymapData_Gamepad
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FName, struct FStr_ActionKeymap>&ActionKeyMap_Gamepad                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<class FName, struct FStr_AxisKeymap>&AxisKeyMap_Gamepad                                     (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::Set_KeymapData_Gamepad(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap_Gamepad, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap_Gamepad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_KeymapData_Gamepad");

	Params::BP_GameInstance_C_Set_KeymapData_Gamepad Parms{};

	Parms.ActionKeyMap_Gamepad = std::move(ActionKeyMap_Gamepad);
	Parms.AxisKeyMap_Gamepad = std::move(AxisKeyMap_Gamepad);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_KeymapData_KBM
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<class FName, struct FStr_ActionKeymap>&ActionKeyMap_KBM                                       (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<class FName, struct FStr_AxisKeymap>&AxisKeyMap_KBM                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::Set_KeymapData_KBM(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap_KBM, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap_KBM)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_KeymapData_KBM");

	Params::BP_GameInstance_C_Set_KeymapData_KBM Parms{};

	Parms.ActionKeyMap_KBM = std::move(ActionKeyMap_KBM);
	Parms.AxisKeyMap_KBM = std::move(AxisKeyMap_KBM);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Set_ReadOnlyData
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    UserId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Set_ReadOnlyData(const class FString& UserId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Set_ReadOnlyData");

	Params::BP_GameInstance_C_Set_ReadOnlyData Parms{};

	Parms.UserId = std::move(UserId);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetColorTeamMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsColorTeamMode_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetColorTeamMode(bool IsColorTeamMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetColorTeamMode");

	Params::BP_GameInstance_C_SetColorTeamMode Parms{};

	Parms.IsColorTeamMode_0 = IsColorTeamMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetEventProgress
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Progress                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetEventProgress(class FName EventName, int32 Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetEventProgress");

	Params::BP_GameInstance_C_SetEventProgress Parms{};

	Parms.EventName = EventName;
	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetInputKeyIconMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGamapadMode_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetInputKeyIconMode(bool IsGamapadMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetInputKeyIconMode");

	Params::BP_GameInstance_C_SetInputKeyIconMode Parms{};

	Parms.IsGamapadMode_0 = IsGamapadMode_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetIsReturnToTitle
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsReturnToTitle_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetIsReturnToTitle(bool IsReturnToTitle_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetIsReturnToTitle");

	Params::BP_GameInstance_C_SetIsReturnToTitle Parms{};

	Parms.IsReturnToTitle_0 = IsReturnToTitle_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_AddAllPurchasedWeaponParts
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SetSaveData_AddAllPurchasedWeaponParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_AddAllPurchasedWeaponParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_AddClearTaskCounts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Task                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetSaveData_AddClearTaskCounts(class FName Task)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_AddClearTaskCounts");

	Params::BP_GameInstance_C_SetSaveData_AddClearTaskCounts Parms{};

	Parms.Task = Task;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_AddPurchasedWeaponParts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class FName>&              WeaponPartsRowName                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_GameInstance_C::SetSaveData_AddPurchasedWeaponParts(const TArray<class FName>& WeaponPartsRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_AddPurchasedWeaponParts");

	Params::BP_GameInstance_C_SetSaveData_AddPurchasedWeaponParts Parms{};

	Parms.WeaponPartsRowName = std::move(WeaponPartsRowName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_CurrentAmmo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EWeaponSelector, struct FStr_CurrentAmmo>&CurrentAmmo                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::SetSaveData_CurrentAmmo(const TMap<EWeaponSelector, struct FStr_CurrentAmmo>& CurrentAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_CurrentAmmo");

	Params::BP_GameInstance_C_SetSaveData_CurrentAmmo Parms{};

	Parms.CurrentAmmo = std::move(CurrentAmmo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_CurrentTask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<uint8, struct FStr_TaskCardState>&CurrentTask                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::SetSaveData_CurrentTask(const TMap<uint8, struct FStr_TaskCardState>& CurrentTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_CurrentTask");

	Params::BP_GameInstance_C_SetSaveData_CurrentTask Parms{};

	Parms.CurrentTask = std::move(CurrentTask);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_CurrentTaskItems
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             TaskItemRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetSaveData_CurrentTaskItems(class FName TaskItemRowName, int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_CurrentTaskItems");

	Params::BP_GameInstance_C_SetSaveData_CurrentTaskItems Parms{};

	Parms.TaskItemRowName = TaskItemRowName;
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_CurrentWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SetSaveData_CurrentWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_CurrentWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_EquipWeaponData
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SetSaveData_EquipWeaponData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_EquipWeaponData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_PlayerStats
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Cash                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TMap<class FName, int32>&         Disc                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_GameInstance_C::SetSaveData_PlayerStats(int32 Cash, int32 Data, const TMap<class FName, int32>& Disc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_PlayerStats");

	Params::BP_GameInstance_C_SetSaveData_PlayerStats Parms{};

	Parms.Cash = Cash;
	Parms.Data = Data;
	Parms.Disc = std::move(Disc);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_SkillLevel_Activated
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SkillRowName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillLv                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetSaveData_SkillLevel_Activated(class FName SkillRowName, int32 SkillLv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_SkillLevel_Activated");

	Params::BP_GameInstance_C_SetSaveData_SkillLevel_Activated Parms{};

	Parms.SkillRowName = SkillRowName;
	Parms.SkillLv = SkillLv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_SkillLevel_Unlocked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SkillRowName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SkillLv                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetSaveData_SkillLevel_Unlocked(class FName SkillRowName, int32 SkillLv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_SkillLevel_Unlocked");

	Params::BP_GameInstance_C_SetSaveData_SkillLevel_Unlocked Parms{};

	Parms.SkillRowName = SkillRowName;
	Parms.SkillLv = SkillLv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_UnlockedAllWeaponPartsBlueprint
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::SetSaveData_UnlockedAllWeaponPartsBlueprint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_UnlockedAllWeaponPartsBlueprint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_UnlockedWeaponPartsBlueprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             PartsRowName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetSaveData_UnlockedWeaponPartsBlueprint(class FName PartsRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_UnlockedWeaponPartsBlueprint");

	Params::BP_GameInstance_C_SetSaveData_UnlockedWeaponPartsBlueprint Parms{};

	Parms.PartsRowName = PartsRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_UnlockWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUnlock                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetSaveData_UnlockWeapon(class FName WeaponRowName, bool IsUnlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_UnlockWeapon");

	Params::BP_GameInstance_C_SetSaveData_UnlockWeapon Parms{};

	Parms.WeaponRowName = WeaponRowName;
	Parms.IsUnlock = IsUnlock;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.SetSaveData_WeaponCustomSaveData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FStr_WeaponCustomSaveData_Temp&WeaponCustomSaveData                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetSaveData_WeaponCustomSaveData(class FName WeaponRowName, const struct FStr_WeaponCustomSaveData_Temp& WeaponCustomSaveData, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetSaveData_WeaponCustomSaveData");

	Params::BP_GameInstance_C_SetSaveData_WeaponCustomSaveData Parms{};

	Parms.WeaponRowName = WeaponRowName;
	Parms.WeaponCustomSaveData = std::move(WeaponCustomSaveData);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.SetShopMachine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Machine                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::SetShopMachine(class AActor* Machine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "SetShopMachine");

	Params::BP_GameInstance_C_SetShopMachine Parms{};

	Parms.Machine = Machine;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.TempApply_Graphics_Brightness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Brightness                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::TempApply_Graphics_Brightness(double Brightness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "TempApply_Graphics_Brightness");

	Params::BP_GameInstance_C_TempApply_Graphics_Brightness Parms{};

	Parms.Brightness = Brightness;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.TempApply_Graphics_FOV
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FieldOfView                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::TempApply_Graphics_FOV(int32 FieldOfView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "TempApply_Graphics_FOV");

	Params::BP_GameInstance_C_TempApply_Graphics_FOV Parms{};

	Parms.FieldOfView = FieldOfView;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.TempApply_Graphics_RetroEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetroEffect                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::TempApply_Graphics_RetroEffect(bool RetroEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "TempApply_Graphics_RetroEffect");

	Params::BP_GameInstance_C_TempApply_Graphics_RetroEffect Parms{};

	Parms.RetroEffect = RetroEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.UnlockMultiParts
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponPartsRowName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::UnlockMultiParts(class FName WeaponPartsRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "UnlockMultiParts");

	Params::BP_GameInstance_C_UnlockMultiParts Parms{};

	Parms.WeaponPartsRowName = WeaponPartsRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameInstance.BP_GameInstance_C.Update_ConfigData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBase_SaveGameObject_C*           SaveGameObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USGO_ConfigData_C**               CovertedData                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Update_ConfigData(class UBase_SaveGameObject_C* SaveGameObject, class USGO_ConfigData_C** CovertedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Update_ConfigData");

	Params::BP_GameInstance_C_Update_ConfigData Parms{};

	Parms.SaveGameObject = SaveGameObject;

	UObject::ProcessEvent(Func, &Parms);

	if (CovertedData != nullptr)
		*CovertedData = Parms.CovertedData;
}


// Function BP_GameInstance.BP_GameInstance_C.Update_KeymapData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBase_SaveGameObject_C*           SaveGameObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USGO_KeymapData_C**               CovertedData                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Update_KeymapData(class UBase_SaveGameObject_C* SaveGameObject, class USGO_KeymapData_C** CovertedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Update_KeymapData");

	Params::BP_GameInstance_C_Update_KeymapData Parms{};

	Parms.SaveGameObject = SaveGameObject;

	UObject::ProcessEvent(Func, &Parms);

	if (CovertedData != nullptr)
		*CovertedData = Parms.CovertedData;
}


// Function BP_GameInstance.BP_GameInstance_C.Update_SaveData
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBase_SaveGameObject_C*           SaveGameObject                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USGO_SaveData_C**                 CovertedData                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::Update_SaveData(class UBase_SaveGameObject_C* SaveGameObject, class USGO_SaveData_C** CovertedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "Update_SaveData");

	Params::BP_GameInstance_C_Update_SaveData Parms{};

	Parms.SaveGameObject = SaveGameObject;

	UObject::ProcessEvent(Func, &Parms);

	if (CovertedData != nullptr)
		*CovertedData = Parms.CovertedData;
}


// Function BP_GameInstance.BP_GameInstance_C.UseCash
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Cash                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::UseCash(int32 Cash, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "UseCash");

	Params::BP_GameInstance_C_UseCash Parms{};

	Parms.Cash = Cash;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.UseConsole
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameInstance_C::UseConsole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "UseConsole");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameInstance.BP_GameInstance_C.UseData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Data                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::UseData(int32 Data, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "UseData");

	Params::BP_GameInstance_C_UseData Parms{};

	Parms.Data = Data;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_GameInstance.BP_GameInstance_C.UseDisc
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FStr_DiscType_Amount&      Disc                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameInstance_C::UseDisc(const struct FStr_DiscType_Amount& Disc, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameInstance_C", "UseDisc");

	Params::BP_GameInstance_C_UseDisc Parms{};

	Parms.Disc = std::move(Disc);

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

