#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ALS_Base_CharacterBP

#include "Basic.hpp"

#include "ALS_Base_CharacterBP_classes.hpp"
#include "ALS_Base_CharacterBP_parameters.hpp"


namespace SDK
{

// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_3P_PivotTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform AALS_Base_CharacterBP_C::BPI_Get_3P_PivotTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_3P_PivotTarget");

	Params::ALS_Base_CharacterBP_C_BPI_Get_3P_PivotTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_3P_TraceParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         TraceOrigin                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 TraceRadius                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ETraceTypeQuery*                        TraceChannel                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_3P_TraceParams(struct FVector* TraceOrigin, double* TraceRadius, ETraceTypeQuery* TraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_3P_TraceParams");

	Params::ALS_Base_CharacterBP_C_BPI_Get_3P_TraceParams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TraceOrigin != nullptr)
		*TraceOrigin = std::move(Parms.TraceOrigin);

	if (TraceRadius != nullptr)
		*TraceRadius = Parms.TraceRadius;

	if (TraceChannel != nullptr)
		*TraceChannel = Parms.TraceChannel;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_CurrentStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode*                          PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState*                     MovementState_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState*                     PrevMovementState_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementAction*                    MovementAction_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_RotationMode*                      RotationMode_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait*                              ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Stance*                            ActualStance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_ViewMode*                          ViewMode_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState*                      OverlayState_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ELeanState*                             LeanState_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponMotionState*                     WeaponMotionState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState_0, EALS_MovementState* PrevMovementState_0, EALS_MovementAction* MovementAction_0, EALS_RotationMode* RotationMode_0, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode_0, EALS_OverlayState* OverlayState_0, ELeanState* LeanState_0, EWeaponMotionState* WeaponMotionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_CurrentStates");

	Params::ALS_Base_CharacterBP_C_BPI_Get_CurrentStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (MovementState_0 != nullptr)
		*MovementState_0 = Parms.MovementState_0;

	if (PrevMovementState_0 != nullptr)
		*PrevMovementState_0 = Parms.PrevMovementState_0;

	if (MovementAction_0 != nullptr)
		*MovementAction_0 = Parms.MovementAction_0;

	if (RotationMode_0 != nullptr)
		*RotationMode_0 = Parms.RotationMode_0;

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;

	if (ActualStance != nullptr)
		*ActualStance = Parms.ActualStance;

	if (ViewMode_0 != nullptr)
		*ViewMode_0 = Parms.ViewMode_0;

	if (OverlayState_0 != nullptr)
		*OverlayState_0 = Parms.OverlayState_0;

	if (LeanState_0 != nullptr)
		*LeanState_0 = Parms.LeanState_0;

	if (WeaponMotionState != nullptr)
		*WeaponMotionState = Parms.WeaponMotionState;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Acceleration_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsMoving_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasMovementInput_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MovementInputAmount_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        AimingRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 AimYawRate_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraRollAngle_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CameraPitchAngle_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 RecoilHandAngle_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTriggerPull                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsTriggerOFF                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HandIK_Location_L_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        HandIK_Rotation_L_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double*                                 HoldBreathFactor                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 LeanAlpha_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   WeaponAttachHandIsRight                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsPlayer                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 PlayerHeadBobAlpha                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FStr_KickAnimValue*              KickAnimValue                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration_0, struct FVector* MovementInput, bool* IsMoving_0, bool* HasMovementInput_0, double* Speed_0, double* MovementInputAmount_0, struct FRotator* AimingRotation, double* AimYawRate_0, double* CameraRollAngle_0, double* CameraPitchAngle_0, double* RecoilHandAngle_0, bool* IsTriggerPull, bool* IsTriggerOFF, struct FVector* HandIK_Location_L_0, struct FRotator* HandIK_Rotation_L_0, double* HoldBreathFactor, double* LeanAlpha_0, bool* WeaponAttachHandIsRight, bool* IsPlayer, double* PlayerHeadBobAlpha, struct FStr_KickAnimValue* KickAnimValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_EssentialValues");

	Params::ALS_Base_CharacterBP_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration_0 != nullptr)
		*Acceleration_0 = std::move(Parms.Acceleration_0);

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (IsMoving_0 != nullptr)
		*IsMoving_0 = Parms.IsMoving_0;

	if (HasMovementInput_0 != nullptr)
		*HasMovementInput_0 = Parms.HasMovementInput_0;

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (MovementInputAmount_0 != nullptr)
		*MovementInputAmount_0 = Parms.MovementInputAmount_0;

	if (AimingRotation != nullptr)
		*AimingRotation = std::move(Parms.AimingRotation);

	if (AimYawRate_0 != nullptr)
		*AimYawRate_0 = Parms.AimYawRate_0;

	if (CameraRollAngle_0 != nullptr)
		*CameraRollAngle_0 = Parms.CameraRollAngle_0;

	if (CameraPitchAngle_0 != nullptr)
		*CameraPitchAngle_0 = Parms.CameraPitchAngle_0;

	if (RecoilHandAngle_0 != nullptr)
		*RecoilHandAngle_0 = Parms.RecoilHandAngle_0;

	if (IsTriggerPull != nullptr)
		*IsTriggerPull = Parms.IsTriggerPull;

	if (IsTriggerOFF != nullptr)
		*IsTriggerOFF = Parms.IsTriggerOFF;

	if (HandIK_Location_L_0 != nullptr)
		*HandIK_Location_L_0 = std::move(Parms.HandIK_Location_L_0);

	if (HandIK_Rotation_L_0 != nullptr)
		*HandIK_Rotation_L_0 = std::move(Parms.HandIK_Rotation_L_0);

	if (HoldBreathFactor != nullptr)
		*HoldBreathFactor = Parms.HoldBreathFactor;

	if (LeanAlpha_0 != nullptr)
		*LeanAlpha_0 = Parms.LeanAlpha_0;

	if (WeaponAttachHandIsRight != nullptr)
		*WeaponAttachHandIsRight = Parms.WeaponAttachHandIsRight;

	if (IsPlayer != nullptr)
		*IsPlayer = Parms.IsPlayer;

	if (PlayerHeadBobAlpha != nullptr)
		*PlayerHeadBobAlpha = Parms.PlayerHeadBobAlpha;

	if (KickAnimValue != nullptr)
		*KickAnimValue = std::move(Parms.KickAnimValue);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_FP_CameraTarget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::BPI_Get_FP_CameraTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_FP_CameraTarget");

	Params::ALS_Base_CharacterBP_C_BPI_Get_FP_CameraTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_TeleportCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AALS_Base_CharacterBP_C::BPI_TeleportCharacter(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_TeleportCharacter");

	Params::ALS_Base_CharacterBP_C_BPI_TeleportCharacter Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetGetUpAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RagdollFaceUp_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* AALS_Base_CharacterBP_C::GetGetUpAnimation(bool RagdollFaceUp_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetGetUpAnimation");

	Params::ALS_Base_CharacterBP_C_GetGetUpAnimation Parms{};

	Parms.RagdollFaceUp_0 = RagdollFaceUp_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetMantleAsset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMantle_Asset                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

struct FMantle_Asset AALS_Base_CharacterBP_C::GetMantleAsset(EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetMantleAsset");

	Params::ALS_Base_CharacterBP_C_GetMantleAsset Parms{};

	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetRollAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* AALS_Base_CharacterBP_C::GetRollAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetRollAnimation");

	Params::ALS_Base_CharacterBP_C_GetRollAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::MantleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MantleHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FALS_ComponentAndTransform&MantleLedgeWS                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::MantleStart(double MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleStart");

	Params::ALS_Base_CharacterBP_C_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnOverlayStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnOverlayStateChanged(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnOverlayStateChanged");

	Params::ALS_Base_CharacterBP_C_OnOverlayStateChanged Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RagdollEnd
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::RagdollEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RagdollEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void AALS_Base_CharacterBP_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ReceiveTick");

	Params::ALS_Base_CharacterBP_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Recoil
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Recoil_Horizontal                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Recoil_Vertical                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Recoil(double Recoil_Horizontal, double Recoil_Vertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Recoil");

	Params::ALS_Base_CharacterBP_C_Recoil Parms{};

	Parms.Recoil_Horizontal = Recoil_Horizontal;
	Parms.Recoil_Vertical = Recoil_Vertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.ExecuteUbergraph_ALS_Base_CharacterBP
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::ExecuteUbergraph_ALS_Base_CharacterBP(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "ExecuteUbergraph_ALS_Base_CharacterBP");

	Params::ALS_Base_CharacterBP_C_ExecuteUbergraph_ALS_Base_CharacterBP Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Get_CameraParameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 TP_FOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 FP_FOV                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   RightShoulder_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Get_CameraParameters(double* TP_FOV, double* FP_FOV, bool* RightShoulder_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Get_CameraParameters");

	Params::ALS_Base_CharacterBP_C_BPI_Get_CameraParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TP_FOV != nullptr)
		*TP_FOV = Parms.TP_FOV;

	if (FP_FOV != nullptr)
		*FP_FOV = Parms.FP_FOV;

	if (RightShoulder_0 != nullptr)
		*RightShoulder_0 = Parms.RightShoulder_0;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_GetSkeltalMesh
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent**          SkeletalMeshComp                                       (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_GetSkeltalMesh(class USkeletalMeshComponent** SkeletalMeshComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_GetSkeltalMesh");

	Params::ALS_Base_CharacterBP_C_BPI_GetSkeltalMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SkeletalMeshComp != nullptr)
		*SkeletalMeshComp = Parms.SkeletalMeshComp;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CalcResponseCurve
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::CalcResponseCurve(double Input, double* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CalcResponseCurve");

	Params::ALS_Base_CharacterBP_C_CalcResponseCurve Parms{};

	Parms.Input = Input;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.StopTaskExeWhileRagdoll
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::StopTaskExeWhileRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "StopTaskExeWhileRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.PlayerMovementInput_FlyingMode
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsForwardAxis                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsUp                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDown                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::PlayerMovementInput_FlyingMode(bool IsForwardAxis, bool IsUp, bool IsDown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "PlayerMovementInput_FlyingMode");

	Params::ALS_Base_CharacterBP_C_PlayerMovementInput_FlyingMode Parms{};

	Parms.IsForwardAxis = IsForwardAxis;
	Parms.IsUp = IsUp;
	Parms.IsDown = IsDown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RestartTaskExeWhenRagdollEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  GetUpAnimEndTime                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::RestartTaskExeWhenRagdollEnd(double GetUpAnimEndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RestartTaskExeWhenRagdollEnd");

	Params::ALS_Base_CharacterBP_C_RestartTaskExeWhenRagdollEnd Parms{};

	Parms.GetUpAnimEndTime = GetUpAnimEndTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnLeanStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELeanState                              NewLeanState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnLeanStateChanged(ELeanState NewLeanState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnLeanStateChanged");

	Params::ALS_Base_CharacterBP_C_OnLeanStateChanged Parms{};

	Parms.NewLeanState = NewLeanState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetMappedSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::GetMappedSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetMappedSpeed");

	Params::ALS_Base_CharacterBP_C_GetMappedSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CanUpdateMovingRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AALS_Base_CharacterBP_C::CanUpdateMovingRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CanUpdateMovingRotation");

	Params::ALS_Base_CharacterBP_C_CanUpdateMovingRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnViewModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnViewModeChanged(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnViewModeChanged");

	Params::ALS_Base_CharacterBP_C_OnViewModeChanged Parms{};

	Parms.NewViewMode = NewViewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnGaitChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewActualGait                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnGaitChanged(EALS_Gait NewActualGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnGaitChanged");

	Params::ALS_Base_CharacterBP_C_OnGaitChanged Parms{};

	Parms.NewActualGait = NewActualGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnRotationModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnRotationModeChanged(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnRotationModeChanged");

	Params::ALS_Base_CharacterBP_C_OnRotationModeChanged Parms{};

	Parms.NewRotationMode = NewRotationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnStanceChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Stance                             NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnStanceChanged(EALS_Stance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnStanceChanged");

	Params::ALS_Base_CharacterBP_C_OnStanceChanged Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnMovementActionChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnMovementActionChanged(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnMovementActionChanged");

	Params::ALS_Base_CharacterBP_C_OnMovementActionChanged Parms{};

	Parms.NewMovementAction = NewMovementAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnMovementStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnMovementStateChanged(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnMovementStateChanged");

	Params::ALS_Base_CharacterBP_C_OnMovementStateChanged Parms{};

	Parms.NewMovementState = NewMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnCharacterMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnCharacterMovementModeChanged");

	Params::ALS_Base_CharacterBP_C_OnCharacterMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.On Begin Play
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::On_Begin_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "On Begin Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetAnimCurveValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             CurveName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::GetAnimCurveValue(class FName CurveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetAnimCurveValue");

	Params::ALS_Base_CharacterBP_C_GetAnimCurveValue Parms{};

	Parms.CurveName = CurveName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetTraceDebugType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EDrawDebugTrace                         ShowTraceType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EDrawDebugTrace AALS_Base_CharacterBP_C::GetTraceDebugType(EDrawDebugTrace ShowTraceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetTraceDebugType");

	Params::ALS_Base_CharacterBP_C_GetTraceDebugType Parms{};

	Parms.ShowTraceType = ShowTraceType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetActorLocationDuringRagdoll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::SetActorLocationDuringRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetActorLocationDuringRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RagdollUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::RagdollUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RagdollUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CalculateAcceleration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::CalculateAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CalculateAcceleration");

	Params::ALS_Base_CharacterBP_C_CalculateAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetCapsuleLocationFromBase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   BaseLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::GetCapsuleLocationFromBase(const struct FVector& BaseLocation, double ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetCapsuleLocationFromBase");

	Params::ALS_Base_CharacterBP_C_GetCapsuleLocationFromBase Parms{};

	Parms.BaseLocation = std::move(BaseLocation);
	Parms.ZOffset = ZOffset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetCalpsuleBaseLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::GetCalpsuleBaseLocation(double ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetCalpsuleBaseLocation");

	Params::ALS_Base_CharacterBP_C_GetCalpsuleBaseLocation Parms{};

	Parms.ZOffset = ZOffset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.RightVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         forwardVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         rightVector                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::RightVector(struct FVector* forwardVector, struct FVector* rightVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "RightVector");

	Params::ALS_Base_CharacterBP_C_RightVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (forwardVector != nullptr)
		*forwardVector = std::move(Parms.forwardVector);

	if (rightVector != nullptr)
		*rightVector = std::move(Parms.rightVector);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CapsuleHasRoomCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HeightOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  RadiusOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasRoom                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, double HeightOffset, double RadiusOffset, EDrawDebugTrace DebugType, bool* HasRoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CapsuleHasRoomCheck");

	Params::ALS_Base_CharacterBP_C_CapsuleHasRoomCheck Parms{};

	Parms.Capsule = Capsule;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.HeightOffset = HeightOffset;
	Parms.RadiusOffset = RadiusOffset;
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (HasRoom != nullptr)
		*HasRoom = Parms.HasRoom;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BlendIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::MantleUpdate(double BlendIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleUpdate");

	Params::ALS_Base_CharacterBP_C_MantleUpdate Parms{};

	Parms.BlendIn = BlendIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.DrawDebugShapes
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::DrawDebugShapes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "DrawDebugShapes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.FixDiagonalGamepadValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Y_in                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  X_in                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Y_Out                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 X_Out                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::FixDiagonalGamepadValues(double Y_in, double X_in, double* Y_Out, double* X_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "FixDiagonalGamepadValues");

	Params::ALS_Base_CharacterBP_C_FixDiagonalGamepadValues Parms{};

	Parms.Y_in = Y_in;
	Parms.X_in = X_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Y_Out != nullptr)
		*Y_Out = Parms.Y_Out;

	if (X_Out != nullptr)
		*X_Out = Parms.X_Out;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetPlayerMovementInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector AALS_Base_CharacterBP_C::GetPlayerMovementInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetPlayerMovementInput");

	Params::ALS_Base_CharacterBP_C_GetPlayerMovementInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMantle_TraceSettings&     Trace_Settings                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Vault                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::MantleCheck(const struct FMantle_TraceSettings& Trace_Settings, EDrawDebugTrace DebugType, bool* Vault)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleCheck");

	Params::ALS_Base_CharacterBP_C_MantleCheck Parms{};

	Parms.Trace_Settings = std::move(Trace_Settings);
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (Vault != nullptr)
		*Vault = Parms.Vault;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CalculateGroundedRotationRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double AALS_Base_CharacterBP_C::CalculateGroundedRotationRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CalculateGroundedRotationRate");

	Params::ALS_Base_CharacterBP_C_CalculateGroundedRotationRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetActorLocationAndRotation(UpdateTarget)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSweep                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bTeleport                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult*                      SweepHitResult                                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool AALS_Base_CharacterBP_C::SetActorLocationAndRotation_UpdateTarget_(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetActorLocationAndRotation(UpdateTarget)");

	Params::ALS_Base_CharacterBP_C_SetActorLocationAndRotation_UpdateTarget_ Parms{};

	Parms.NewLocation = std::move(NewLocation);
	Parms.NewRotation = std::move(NewRotation);
	Parms.bSweep = bSweep;
	Parms.bTeleport = bTeleport;

	UObject::ProcessEvent(Func, &Parms);

	if (SweepHitResult != nullptr)
		*SweepHitResult = std::move(Parms.SweepHitResult);

	return Parms.ReturnValue;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.LimitRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AimYawMin                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AimYawMax                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::LimitRotation(double AimYawMin, double AimYawMax, double InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "LimitRotation");

	Params::ALS_Base_CharacterBP_C_LimitRotation Parms{};

	Parms.AimYawMin = AimYawMin;
	Parms.AimYawMax = AimYawMax;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.AddToCharacterRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  DeltaRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void AALS_Base_CharacterBP_C::AddToCharacterRotation(const struct FRotator& DeltaRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "AddToCharacterRotation");

	Params::ALS_Base_CharacterBP_C_AddToCharacterRotation Parms{};

	Parms.DeltaRotation = std::move(DeltaRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CanSprint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   CanSprint_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::CanSprint(bool* CanSprint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CanSprint");

	Params::ALS_Base_CharacterBP_C_CanSprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanSprint_0 != nullptr)
		*CanSprint_0 = Parms.CanSprint_0;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetActualGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EALS_Gait                               AllowedGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait*                              ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::GetActualGait(EALS_Gait AllowedGait, EALS_Gait* ActualGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetActualGait");

	Params::ALS_Base_CharacterBP_C_GetActualGait Parms{};

	Parms.AllowedGait = AllowedGait;

	UObject::ProcessEvent(Func, &Parms);

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetAllowedGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EALS_Gait*                              AllowedGait                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::GetAllowedGait(EALS_Gait* AllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetAllowedGait");

	Params::ALS_Base_CharacterBP_C_GetAllowedGait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllowedGait != nullptr)
		*AllowedGait = Parms.AllowedGait;
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.GetTargetMovementSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FMovementSettings*               MovementSettings                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::GetTargetMovementSettings(struct FMovementSettings* MovementSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "GetTargetMovementSettings");

	Params::ALS_Base_CharacterBP_C_GetTargetMovementSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovementSettings != nullptr)
		*MovementSettings = std::move(Parms.MovementSettings);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateDynamicMovementSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               AllowedGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::UpdateDynamicMovementSettings(EALS_Gait AllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateDynamicMovementSettings");

	Params::ALS_Base_CharacterBP_C_UpdateDynamicMovementSettings Parms{};

	Parms.AllowedGait = AllowedGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateCharacterMovement
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::UpdateCharacterMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateCharacterMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetMovementModel
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::SetMovementModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetMovementModel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SmoothCharacterRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// double                                  TargetInterpSpeed_Const_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ActorInterpSpeed_Smooth_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::SmoothCharacterRotation(const struct FRotator& Target, double TargetInterpSpeed_Const_, double ActorInterpSpeed_Smooth_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SmoothCharacterRotation");

	Params::ALS_Base_CharacterBP_C_SmoothCharacterRotation Parms{};

	Parms.Target = std::move(Target);
	Parms.TargetInterpSpeed_Const_ = TargetInterpSpeed_Const_;
	Parms.ActorInterpSpeed_Smooth_ = ActorInterpSpeed_Smooth_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateInAirRotation
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::UpdateInAirRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateInAirRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.UpdateGroudedRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::UpdateGroudedRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "UpdateGroudedRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.CacheValues
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::CacheValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "CacheValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SetEssentialValues
// (Public, BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::SetEssentialValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SetEssentialValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.PlayerMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsForwardAxis                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::PlayerMovementInput(bool IsForwardAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "PlayerMovementInput");

	Params::ALS_Base_CharacterBP_C_PlayerMovementInput Parms{};

	Parms.IsForwardAxis = IsForwardAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleTimeline__FinishedFunc
// (BlueprintEvent)

void AALS_Base_CharacterBP_C::MantleTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.MantleTimeline__UpdateFunc
// (BlueprintEvent)

void AALS_Base_CharacterBP_C::MantleTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "MantleTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_LeanRight_K2Node_InputActionEvent_27
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_LeanRight_K2Node_InputActionEvent_27(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_LeanRight_K2Node_InputActionEvent_27");

	Params::ALS_Base_CharacterBP_C_InpActEvt_LeanRight_K2Node_InputActionEvent_27 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_LeanRight_K2Node_InputActionEvent_26
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_LeanRight_K2Node_InputActionEvent_26(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_LeanRight_K2Node_InputActionEvent_26");

	Params::ALS_Base_CharacterBP_C_InpActEvt_LeanRight_K2Node_InputActionEvent_26 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_LeanLeft_K2Node_InputActionEvent_25
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_LeanLeft_K2Node_InputActionEvent_25(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_LeanLeft_K2Node_InputActionEvent_25");

	Params::ALS_Base_CharacterBP_C_InpActEvt_LeanLeft_K2Node_InputActionEvent_25 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_LeanLeft_K2Node_InputActionEvent_24
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_LeanLeft_K2Node_InputActionEvent_24(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_LeanLeft_K2Node_InputActionEvent_24");

	Params::ALS_Base_CharacterBP_C_InpActEvt_LeanLeft_K2Node_InputActionEvent_24 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_SwitchLight_K2Node_InputActionEvent_23
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_SwitchLight_K2Node_InputActionEvent_23(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_SwitchLight_K2Node_InputActionEvent_23");

	Params::ALS_Base_CharacterBP_C_InpActEvt_SwitchLight_K2Node_InputActionEvent_23 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_SwitchLight_K2Node_InputActionEvent_22
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_SwitchLight_K2Node_InputActionEvent_22(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_SwitchLight_K2Node_InputActionEvent_22");

	Params::ALS_Base_CharacterBP_C_InpActEvt_SwitchLight_K2Node_InputActionEvent_22 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Interact_K2Node_InputActionEvent_21
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Interact_K2Node_InputActionEvent_21(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Interact_K2Node_InputActionEvent_21");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Interact_K2Node_InputActionEvent_21 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Jump_K2Node_InputActionEvent_20
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Jump_K2Node_InputActionEvent_20(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Jump_K2Node_InputActionEvent_20");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Jump_K2Node_InputActionEvent_20 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Jump_K2Node_InputActionEvent_19
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Jump_K2Node_InputActionEvent_19(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Jump_K2Node_InputActionEvent_19");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Jump_K2Node_InputActionEvent_19 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Crouch_K2Node_InputActionEvent_18
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Crouch_K2Node_InputActionEvent_18(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Crouch_K2Node_InputActionEvent_18");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Crouch_K2Node_InputActionEvent_18 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Crouch_K2Node_InputActionEvent_17
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Crouch_K2Node_InputActionEvent_17(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Crouch_K2Node_InputActionEvent_17");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Crouch_K2Node_InputActionEvent_17 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Walk_K2Node_InputActionEvent_16
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Walk_K2Node_InputActionEvent_16(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Walk_K2Node_InputActionEvent_16");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Walk_K2Node_InputActionEvent_16 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Walk_K2Node_InputActionEvent_15
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Walk_K2Node_InputActionEvent_15(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Walk_K2Node_InputActionEvent_15");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Walk_K2Node_InputActionEvent_15 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Sprint_K2Node_InputActionEvent_14
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Sprint_K2Node_InputActionEvent_14(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Sprint_K2Node_InputActionEvent_14");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Sprint_K2Node_InputActionEvent_14 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Sprint_K2Node_InputActionEvent_13
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Sprint_K2Node_InputActionEvent_13(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Sprint_K2Node_InputActionEvent_13");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Sprint_K2Node_InputActionEvent_13 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Aim_K2Node_InputActionEvent_12
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Aim_K2Node_InputActionEvent_12(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Aim_K2Node_InputActionEvent_12");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Aim_K2Node_InputActionEvent_12 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Aim_K2Node_InputActionEvent_11
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Aim_K2Node_InputActionEvent_11(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Aim_K2Node_InputActionEvent_11");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Aim_K2Node_InputActionEvent_11 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Fire_K2Node_InputActionEvent_10
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Fire_K2Node_InputActionEvent_10(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Fire_K2Node_InputActionEvent_10");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Fire_K2Node_InputActionEvent_10 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Fire_K2Node_InputActionEvent_9
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Fire_K2Node_InputActionEvent_9(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Fire_K2Node_InputActionEvent_9");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Fire_K2Node_InputActionEvent_9 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Reload_K2Node_InputActionEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Reload_K2Node_InputActionEvent_8(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Reload_K2Node_InputActionEvent_8");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Reload_K2Node_InputActionEvent_8 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_SwitchToPrimary_K2Node_InputActionEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_SwitchToPrimary_K2Node_InputActionEvent_7(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_SwitchToPrimary_K2Node_InputActionEvent_7");

	Params::ALS_Base_CharacterBP_C_InpActEvt_SwitchToPrimary_K2Node_InputActionEvent_7 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_SwitchToSecondary_K2Node_InputActionEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_SwitchToSecondary_K2Node_InputActionEvent_6(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_SwitchToSecondary_K2Node_InputActionEvent_6");

	Params::ALS_Base_CharacterBP_C_InpActEvt_SwitchToSecondary_K2Node_InputActionEvent_6 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Charge_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Charge_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Charge_K2Node_InputActionEvent_5");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Charge_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_Charge_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_Charge_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_Charge_K2Node_InputActionEvent_4");

	Params::ALS_Base_CharacterBP_C_InpActEvt_Charge_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_MeleeAttack_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_MeleeAttack_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_MeleeAttack_K2Node_InputActionEvent_3");

	Params::ALS_Base_CharacterBP_C_InpActEvt_MeleeAttack_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_MeleeAttack_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_MeleeAttack_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_MeleeAttack_K2Node_InputActionEvent_2");

	Params::ALS_Base_CharacterBP_C_InpActEvt_MeleeAttack_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_MeleeAttack_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_MeleeAttack_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_MeleeAttack_K2Node_InputActionEvent_1");

	Params::ALS_Base_CharacterBP_C_InpActEvt_MeleeAttack_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.InpActEvt_MeleeAttack_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::InpActEvt_MeleeAttack_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "InpActEvt_MeleeAttack_K2Node_InputActionEvent_0");

	Params::ALS_Base_CharacterBP_C_InpActEvt_MeleeAttack_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Down_K2Node_InputAxisEvent_7
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Down_K2Node_InputAxisEvent_7(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Down_K2Node_InputAxisEvent_7");

	Params::ALS_Base_CharacterBP_C_Down_K2Node_InputAxisEvent_7 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Backwards_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Backwards_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Backwards_K2Node_InputAxisEvent_0");

	Params::ALS_Base_CharacterBP_C_Backwards_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.FlyingDownMovement
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::FlyingDownMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "FlyingDownMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.FlyingUpMovement
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::FlyingUpMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "FlyingUpMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SmoothCameraInput_UpDown
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::SmoothCameraInput_UpDown(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SmoothCameraInput_UpDown");

	Params::ALS_Base_CharacterBP_C_SmoothCameraInput_UpDown Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.SmoothCameraInput_LeftRight
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::SmoothCameraInput_LeftRight(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "SmoothCameraInput_LeftRight");

	Params::ALS_Base_CharacterBP_C_SmoothCameraInput_LeftRight Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.AimOFF
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::AimOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "AimOFF");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "K2_OnStartCrouch");

	Params::ALS_Base_CharacterBP_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "K2_OnEndCrouch");

	Params::ALS_Base_CharacterBP_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "K2_OnMovementModeChanged");

	Params::ALS_Base_CharacterBP_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnJumped
// (Event, Public, BlueprintEvent)

void AALS_Base_CharacterBP_C::OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnJumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FHitResult&                Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void AALS_Base_CharacterBP_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "OnLanded");

	Params::ALS_Base_CharacterBP_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Breakfall Event
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Breakfall_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Breakfall Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Roll Event
// (BlueprintCallable, BlueprintEvent)

void AALS_Base_CharacterBP_C::Roll_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Roll Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Left_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Left_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Left_K2Node_InputAxisEvent_1");

	Params::ALS_Base_CharacterBP_C_Left_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_MovementState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_MovementState(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_MovementState");

	Params::ALS_Base_CharacterBP_C_BPI_Set_MovementState Parms{};

	Parms.NewMovementState = NewMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_MovementAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_MovementAction(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_MovementAction");

	Params::ALS_Base_CharacterBP_C_BPI_Set_MovementAction Parms{};

	Parms.NewMovementAction = NewMovementAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_RotationMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_RotationMode(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_RotationMode");

	Params::ALS_Base_CharacterBP_C_BPI_Set_RotationMode Parms{};

	Parms.NewRotationMode = NewRotationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_Gait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_Gait(EALS_Gait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_Gait");

	Params::ALS_Base_CharacterBP_C_BPI_Set_Gait Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_ViewMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_ViewMode(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_ViewMode");

	Params::ALS_Base_CharacterBP_C_BPI_Set_ViewMode Parms{};

	Parms.NewViewMode = NewViewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_OverlayState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_OverlayState(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_OverlayState");

	Params::ALS_Base_CharacterBP_C_BPI_Set_OverlayState Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.BPI_Set_LeanState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELeanState                              NewLeanState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::BPI_Set_LeanState(ELeanState NewLeanState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "BPI_Set_LeanState");

	Params::ALS_Base_CharacterBP_C_BPI_Set_LeanState Parms{};

	Parms.NewLeanState = NewLeanState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Right_K2Node_InputAxisEvent_3
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Right_K2Node_InputAxisEvent_3(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Right_K2Node_InputAxisEvent_3");

	Params::ALS_Base_CharacterBP_C_Right_K2Node_InputAxisEvent_3 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ALS_Base_CharacterBP.ALS_Base_CharacterBP_C.Down_K2Node_InputAxisEvent_2
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void AALS_Base_CharacterBP_C::Down_K2Node_InputAxisEvent_2(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ALS_Base_CharacterBP_C", "Down_K2Node_InputAxisEvent_2");

	Params::ALS_Base_CharacterBP_C_Down_K2Node_InputAxisEvent_2 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}

}

