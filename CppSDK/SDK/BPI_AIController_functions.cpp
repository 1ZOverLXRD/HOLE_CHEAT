#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AIController

#include "Basic.hpp"

#include "BPI_AIController_classes.hpp"
#include "BPI_AIController_parameters.hpp"


namespace SDK
{

// Function BPI_AIController.BPI_AIController_C.GetAIStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_NPCLogicPattern*                     LogicPattern                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_CombatType*                          CombatType                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ShootingLevel*                       ShootingLevel                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AIController_C::GetAIStatus(EN_NPCLogicPattern* LogicPattern, EN_CombatType* CombatType, EN_ShootingLevel* ShootingLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_AIController_C", "GetAIStatus");

	Params::BPI_AIController_C_GetAIStatus Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (LogicPattern != nullptr)
		*LogicPattern = Parms.LogicPattern;

	if (CombatType != nullptr)
		*CombatType = Parms.CombatType;

	if (ShootingLevel != nullptr)
		*ShootingLevel = Parms.ShootingLevel;
}


// Function BPI_AIController.BPI_AIController_C.OnDamage_Known
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   AttackerLocation                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AIController_C::OnDamage_Known(const struct FVector& AttackerLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_AIController_C", "OnDamage_Known");

	Params::BPI_AIController_C_OnDamage_Known Parms{};

	Parms.AttackerLocation = std::move(AttackerLocation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_AIController.BPI_AIController_C.RefreshAITask
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_AIController_C::RefreshAITask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_AIController_C", "RefreshAITask");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_AIController.BPI_AIController_C.SendDeadEvent
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_AIController_C::SendDeadEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_AIController_C", "SendDeadEvent");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_AIController.BPI_AIController_C.SetAIStatus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_NPCLogicPattern                      LogicPattern                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_CombatType                           CombatType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ShootingLevel                        ShootingLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_MoveTaskName                         FirstMoveTask                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_NPCRole                              RoleType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_AIController_C::SetAIStatus(EN_NPCLogicPattern LogicPattern, EN_CombatType CombatType, EN_ShootingLevel ShootingLevel, EN_MoveTaskName FirstMoveTask, EN_NPCRole RoleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_AIController_C", "SetAIStatus");

	Params::BPI_AIController_C_SetAIStatus Parms{};

	Parms.LogicPattern = LogicPattern;
	Parms.CombatType = CombatType;
	Parms.ShootingLevel = ShootingLevel;
	Parms.FirstMoveTask = FirstMoveTask;
	Parms.RoleType = RoleType;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

