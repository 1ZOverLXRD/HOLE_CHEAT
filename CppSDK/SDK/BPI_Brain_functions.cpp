#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Brain

#include "Basic.hpp"

#include "BPI_Brain_classes.hpp"
#include "BPI_Brain_parameters.hpp"


namespace SDK
{

// Function BPI_Brain.BPI_Brain_C.BoltCatchRelease
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::BoltCatchRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "BoltCatchRelease");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.ChamberAction
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::ChamberAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "ChamberAction");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.ChangeMoveSpeed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               MoveSpeed                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::ChangeMoveSpeed(EALS_Gait MoveSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "ChangeMoveSpeed");

	Params::BPI_Brain_C_ChangeMoveSpeed Parms{};

	Parms.MoveSpeed = MoveSpeed;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.FireOFF
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::FireOFF()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "FireOFF");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.FireON
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_GunFirePattern                       GunFirePattern                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::FireON(EN_GunFirePattern GunFirePattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "FireON");

	Params::BPI_Brain_C_FireON Parms{};

	Parms.GunFirePattern = GunFirePattern;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.GetCanTaskExecute
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanExecute                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::GetCanTaskExecute(bool* CanExecute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "GetCanTaskExecute");

	Params::BPI_Brain_C_GetCanTaskExecute Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanExecute != nullptr)
		*CanExecute = Parms.CanExecute;
}


// Function BPI_Brain.BPI_Brain_C.GetCombatMoveStyle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait*                              CombatMoveStyle                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::GetCombatMoveStyle(EALS_Gait* CombatMoveStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "GetCombatMoveStyle");

	Params::BPI_Brain_C_GetCombatMoveStyle Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CombatMoveStyle != nullptr)
		*CombatMoveStyle = Parms.CombatMoveStyle;
}


// Function BPI_Brain.BPI_Brain_C.GetFocusTargetActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor**                          FocusTargetActor                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::GetFocusTargetActor(class AActor** FocusTargetActor, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "GetFocusTargetActor");

	Params::BPI_Brain_C_GetFocusTargetActor Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (FocusTargetActor != nullptr)
		*FocusTargetActor = Parms.FocusTargetActor;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_Brain.BPI_Brain_C.GetNeedUpdateTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   NeedUpdateMoveTask                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   NeedUpdateCombatTask                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::GetNeedUpdateTask(bool* NeedUpdateMoveTask, bool* NeedUpdateCombatTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "GetNeedUpdateTask");

	Params::BPI_Brain_C_GetNeedUpdateTask Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (NeedUpdateMoveTask != nullptr)
		*NeedUpdateMoveTask = Parms.NeedUpdateMoveTask;

	if (NeedUpdateCombatTask != nullptr)
		*NeedUpdateCombatTask = Parms.NeedUpdateCombatTask;
}


// Function BPI_Brain.BPI_Brain_C.GetSearchSetting
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         SearchPosition                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait*                              SearchingMoveStyle                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::GetSearchSetting(struct FVector* SearchPosition, EALS_Gait* SearchingMoveStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "GetSearchSetting");

	Params::BPI_Brain_C_GetSearchSetting Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (SearchPosition != nullptr)
		*SearchPosition = std::move(Parms.SearchPosition);

	if (SearchingMoveStyle != nullptr)
		*SearchingMoveStyle = Parms.SearchingMoveStyle;
}


// Function BPI_Brain.BPI_Brain_C.GetTask
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMTask_Base_C**                   MoveTask                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UCTask_Base_C**                   CombatTask                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::GetTask(class UMTask_Base_C** MoveTask, class UCTask_Base_C** CombatTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "GetTask");

	Params::BPI_Brain_C_GetTask Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (MoveTask != nullptr)
		*MoveTask = Parms.MoveTask;

	if (CombatTask != nullptr)
		*CombatTask = Parms.CombatTask;
}


// Function BPI_Brain.BPI_Brain_C.GetWaitPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         WaitPosition                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::GetWaitPosition(struct FVector* WaitPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "GetWaitPosition");

	Params::BPI_Brain_C_GetWaitPosition Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (WaitPosition != nullptr)
		*WaitPosition = std::move(Parms.WaitPosition);
}


// Function BPI_Brain.BPI_Brain_C.InitializeBrain
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AAI_NPCBase_C*                    AIController                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBPC_AiDepthScaner_C*             AiDepthScaner                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EN_MoveTaskName                         FirstMoveTask                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::InitializeBrain(class AAI_NPCBase_C* AIController, class UBPC_AiDepthScaner_C* AiDepthScaner, EN_MoveTaskName FirstMoveTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "InitializeBrain");

	Params::BPI_Brain_C_InitializeBrain Parms{};

	Parms.AIController = AIController;
	Parms.AiDepthScaner = AiDepthScaner;
	Parms.FirstMoveTask = FirstMoveTask;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.IsDeadBrain
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsDead                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::IsDeadBrain(bool* IsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "IsDeadBrain");

	Params::BPI_Brain_C_IsDeadBrain Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsDead != nullptr)
		*IsDead = Parms.IsDead;
}


// Function BPI_Brain.BPI_Brain_C.MeleeAttack
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::MeleeAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "MeleeAttack");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.ReloadAmmo
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::ReloadAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "ReloadAmmo");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.ResetComponentParam
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_NPCLogicPattern                      LogicPattern                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_CombatType                           CombatType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ShootingLevel                        ShootingLevel                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_NPCRole                              RoleType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::ResetComponentParam(EN_NPCLogicPattern LogicPattern, EN_CombatType CombatType, EN_ShootingLevel ShootingLevel, EN_NPCRole RoleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "ResetComponentParam");

	Params::BPI_Brain_C_ResetComponentParam Parms{};

	Parms.LogicPattern = LogicPattern;
	Parms.CombatType = CombatType;
	Parms.ShootingLevel = ShootingLevel;
	Parms.RoleType = RoleType;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.SendDeadEvent
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::SendDeadEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "SendDeadEvent");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.SetFoundActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    isFoundActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           FoundActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::SetFoundActor(bool isFoundActor, class AActor* FoundActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "SetFoundActor");

	Params::BPI_Brain_C_SetFoundActor Parms{};

	Parms.isFoundActor = isFoundActor;
	Parms.FoundActor = FoundActor;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.SetHearingInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HeardSomething                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HearingLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::SetHearingInfo(bool HeardSomething, const struct FVector& HearingLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "SetHearingInfo");

	Params::BPI_Brain_C_SetHearingInfo Parms{};

	Parms.HeardSomething = HeardSomething;
	Parms.HearingLocation = std::move(HearingLocation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.SetOnDamage
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   EventLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::SetOnDamage(const struct FVector& EventLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "SetOnDamage");

	Params::BPI_Brain_C_SetOnDamage Parms{};

	Parms.EventLocation = std::move(EventLocation);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.StopTaskExecute
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::StopTaskExecute()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "StopTaskExecute");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.UpdateBrainData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::UpdateBrainData(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "UpdateBrainData");

	Params::BPI_Brain_C_UpdateBrainData Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Brain.BPI_Brain_C.UpdateFocusActorLocationMemory
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_Brain_C::UpdateFocusActorLocationMemory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "UpdateFocusActorLocationMemory");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_Brain.BPI_Brain_C.UpdateFocusLocation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Brain_C::UpdateFocusLocation(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Brain_C", "UpdateFocusLocation");

	Params::BPI_Brain_C_UpdateFocusLocation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

