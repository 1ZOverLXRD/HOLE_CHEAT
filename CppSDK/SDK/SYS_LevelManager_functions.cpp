#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SYS_LevelManager

#include "Basic.hpp"

#include "SYS_LevelManager_classes.hpp"
#include "SYS_LevelManager_parameters.hpp"


namespace SDK
{

// Function SYS_LevelManager.SYS_LevelManager_C.AdjustRate
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<TSoftClassPtr<class UClass>, double>&Rate                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// TMap<TSoftClassPtr<class UClass>, double>*AdjustRate_0                                           (Parm, OutParm)

void ASYS_LevelManager_C::AdjustRate(const TMap<TSoftClassPtr<class UClass>, double>& Rate, TMap<TSoftClassPtr<class UClass>, double>* AdjustRate_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "AdjustRate");

	Params::SYS_LevelManager_C_AdjustRate Parms{};

	Parms.Rate = std::move(Rate);

	UObject::ProcessEvent(Func, &Parms);

	if (AdjustRate_0 != nullptr)
		*AdjustRate_0 = std::move(Parms.AdjustRate_0);
}


// Function SYS_LevelManager.SYS_LevelManager_C.CheckTotalWeaponLight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanLightON                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::CheckTotalWeaponLight(bool* CanLightON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "CheckTotalWeaponLight");

	Params::SYS_LevelManager_C_CheckTotalWeaponLight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanLightON != nullptr)
		*CanLightON = Parms.CanLightON;
}


// Function SYS_LevelManager.SYS_LevelManager_C.CountTime
// (BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::CountTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "CountTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.CountWeaponLight
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::CountWeaponLight(int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "CountWeaponLight");

	Params::SYS_LevelManager_C_CountWeaponLight Parms{};

	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DownAllNPC
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::DownAllNPC()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DownAllNPC");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DropBlueprint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             NPCRowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::DropBlueprint(class FName NPCRowName, const struct FVector& KillLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DropBlueprint");

	Params::SYS_LevelManager_C_DropBlueprint Parms{};

	Parms.NPCRowName = NPCRowName;
	Parms.KillLocation = std::move(KillLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DropCash_SetAmount
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Cash                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DropLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::DropCash_SetAmount(int32 Cash, const struct FVector& DropLocation, const struct FVector& KillDirection, const struct FVector& HitPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DropCash_SetAmount");

	Params::SYS_LevelManager_C_DropCash_SetAmount Parms{};

	Parms.Cash = Cash;
	Parms.DropLocation = std::move(DropLocation);
	Parms.KillDirection = std::move(KillDirection);
	Parms.HitPosition = std::move(HitPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DropCashItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHeadShotKill                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NPCRowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ShootingLevel                        NPCShootingLevel                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::DropCashItem(bool IsHeadShotKill, const struct FVector& KillLocation, const struct FVector& KillDirection, const struct FVector& HitPosition, class FName NPCRowName, EN_ShootingLevel NPCShootingLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DropCashItem");

	Params::SYS_LevelManager_C_DropCashItem Parms{};

	Parms.IsHeadShotKill = IsHeadShotKill;
	Parms.KillLocation = std::move(KillLocation);
	Parms.KillDirection = std::move(KillDirection);
	Parms.HitPosition = std::move(HitPosition);
	Parms.NPCRowName = NPCRowName;
	Parms.NPCShootingLevel = NPCShootingLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DropData_SetAmount
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Cash                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DropLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::DropData_SetAmount(int32 Cash, const struct FVector& DropLocation, const struct FVector& KillDirection, const struct FVector& HitPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DropData_SetAmount");

	Params::SYS_LevelManager_C_DropData_SetAmount Parms{};

	Parms.Cash = Cash;
	Parms.DropLocation = std::move(DropLocation);
	Parms.KillDirection = std::move(KillDirection);
	Parms.HitPosition = std::move(HitPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DropDataItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHeadShotKill                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NPCRowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ShootingLevel                        NPCShootingLevel                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::DropDataItem(bool IsHeadShotKill, const struct FVector& KillLocation, const struct FVector& KillDirection, const struct FVector& HitPosition, class FName NPCRowName, EN_ShootingLevel NPCShootingLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DropDataItem");

	Params::SYS_LevelManager_C_DropDataItem Parms{};

	Parms.IsHeadShotKill = IsHeadShotKill;
	Parms.KillLocation = std::move(KillLocation);
	Parms.KillDirection = std::move(KillDirection);
	Parms.HitPosition = std::move(HitPosition);
	Parms.NPCRowName = NPCRowName;
	Parms.NPCShootingLevel = NPCShootingLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DropOnceItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   KillLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::DropOnceItem(const struct FVector& KillLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DropOnceItem");

	Params::SYS_LevelManager_C_DropOnceItem Parms{};

	Parms.KillLocation = std::move(KillLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.DropTaskItem
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHeadShot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NPCRowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::DropTaskItem(bool IsHeadShot, const struct FVector& KillLocation, class FName NPCRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "DropTaskItem");

	Params::SYS_LevelManager_C_DropTaskItem Parms{};

	Parms.IsHeadShot = IsHeadShot;
	Parms.KillLocation = std::move(KillLocation);
	Parms.NPCRowName = NPCRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.ExecuteUbergraph_SYS_LevelManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::ExecuteUbergraph_SYS_LevelManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "ExecuteUbergraph_SYS_LevelManager");

	Params::SYS_LevelManager_C_ExecuteUbergraph_SYS_LevelManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.GetAllHole
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::GetAllHole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "GetAllHole");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.GetCurrentTimeSecond
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Secconds                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::GetCurrentTimeSecond(double* Secconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "GetCurrentTimeSecond");

	Params::SYS_LevelManager_C_GetCurrentTimeSecond Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Secconds != nullptr)
		*Secconds = Parms.Secconds;
}


// Function SYS_LevelManager.SYS_LevelManager_C.GetHoleLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         HoleLocation                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::GetHoleLocation(struct FVector* HoleLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "GetHoleLocation");

	Params::SYS_LevelManager_C_GetHoleLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HoleLocation != nullptr)
		*HoleLocation = std::move(Parms.HoleLocation);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializeByDB
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializeByDB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializeByDB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializeEnemySpawner
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializeEnemySpawner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializeEnemySpawner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializeFridgeSpawner
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializeFridgeSpawner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializeFridgeSpawner");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializeHomeFacility
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializeHomeFacility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializeHomeFacility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializeNPCSpawnSystem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializeNPCSpawnSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializeNPCSpawnSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializeOnceItemDropSystem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializeOnceItemDropSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializeOnceItemDropSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializePlayerEquipWeapon
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializePlayerEquipWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializePlayerEquipWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializePlayerSkill
// (Private, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializePlayerSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializePlayerSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.InitializeTaskItem
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::InitializeTaskItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "InitializeTaskItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.KillCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHeadShotKill                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   KillDirection                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             NPCRowName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ShootingLevel                        SootingLevel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsAddKillLog                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::KillCount(bool IsHeadShotKill, const struct FVector& HitPosition, const struct FVector& KillLocation, const struct FVector& KillDirection, class FName NPCRowName, EN_ShootingLevel SootingLevel, int32 Hit, bool IsAddKillLog)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "KillCount");

	Params::SYS_LevelManager_C_KillCount Parms{};

	Parms.IsHeadShotKill = IsHeadShotKill;
	Parms.HitPosition = std::move(HitPosition);
	Parms.KillLocation = std::move(KillLocation);
	Parms.KillDirection = std::move(KillDirection);
	Parms.NPCRowName = NPCRowName;
	Parms.SootingLevel = SootingLevel;
	Parms.Hit = Hit;
	Parms.IsAddKillLog = IsAddKillLog;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.LateSetup
// (BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::LateSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "LateSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.LoadCurrentAmmo
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::LoadCurrentAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "LoadCurrentAmmo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.MakeSpawnerAndFactionMap
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// uint8                                   MaxSpawnAmount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::MakeSpawnerAndFactionMap(uint8 MaxSpawnAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "MakeSpawnerAndFactionMap");

	Params::SYS_LevelManager_C_MakeSpawnerAndFactionMap Parms{};

	Parms.MaxSpawnAmount = MaxSpawnAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.NextLevelNoRsltUI
// (BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::NextLevelNoRsltUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "NextLevelNoRsltUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.ObjectDestroyCount
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ObjectRowName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DestroyLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   DestroyDirection                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HiitPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsHeadShot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::ObjectDestroyCount(class FName ObjectRowName, const struct FVector& DestroyLocation, const struct FVector& DestroyDirection, const struct FVector& HiitPosition, bool IsHeadShot, int32 Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "ObjectDestroyCount");

	Params::SYS_LevelManager_C_ObjectDestroyCount Parms{};

	Parms.ObjectRowName = ObjectRowName;
	Parms.DestroyLocation = std::move(DestroyLocation);
	Parms.DestroyDirection = std::move(DestroyDirection);
	Parms.HiitPosition = std::move(HiitPosition);
	Parms.IsHeadShot = IsHeadShot;
	Parms.Hit = Hit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.Open_ResultsUI
// (BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::Open_ResultsUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "Open_ResultsUI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.OpenResults
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGameOver                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::OpenResults(bool IsGameOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "OpenResults");

	Params::SYS_LevelManager_C_OpenResults Parms{};

	Parms.IsGameOver = IsGameOver;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.ReBeginPlay
// (BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::ReBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "ReBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ASYS_LevelManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "ReceiveTick");

	Params::SYS_LevelManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.RespawnFridge
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::RespawnFridge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "RespawnFridge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.SelectNPCSpawnData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Faction                              Faction                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::SelectNPCSpawnData(EN_Faction Faction, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "SelectNPCSpawnData");

	Params::SYS_LevelManager_C_SelectNPCSpawnData Parms{};

	Parms.Faction = Faction;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function SYS_LevelManager.SYS_LevelManager_C.SelectNPCSpawnData_OLD
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Faction                              Faction                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::SelectNPCSpawnData_OLD(EN_Faction Faction, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "SelectNPCSpawnData_OLD");

	Params::SYS_LevelManager_C_SelectNPCSpawnData_OLD Parms{};

	Parms.Faction = Faction;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function SYS_LevelManager.SYS_LevelManager_C.SetupHole
// (Private, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::SetupHole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "SetupHole");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.SpawnItemBox
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::SpawnItemBox()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "SpawnItemBox");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.SpawnNavItem
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::SpawnNavItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "SpawnNavItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.SpawnPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::SpawnPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "SpawnPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.SpawnTaskItems
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::SpawnTaskItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "SpawnTaskItems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.StartNavigation
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::StartNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "StartNavigation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.StartObjectEvent
// (Public, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::StartObjectEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "StartObjectEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.StartRush
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::StartRush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "StartRush");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.StopNavigation
// (Private, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::StopNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "StopNavigation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.UpdateEnemySpawner
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::UpdateEnemySpawner(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "UpdateEnemySpawner");

	Params::SYS_LevelManager_C_UpdateEnemySpawner Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.UpdateFridge
// (Public, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::UpdateFridge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "UpdateFridge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.UpdateNavigation
// (Private, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::UpdateNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "UpdateNavigation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.UpdateNPCLimit
// (Public, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::UpdateNPCLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "UpdateNPCLimit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.UpdateNPCSpawnDataList
// (Private, BlueprintCallable, BlueprintEvent)

void ASYS_LevelManager_C::UpdateNPCSpawnDataList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "UpdateNPCSpawnDataList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SYS_LevelManager.SYS_LevelManager_C.UpdateNPCSpawnDataListByTime
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentTime_Second                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::UpdateNPCSpawnDataListByTime(int32 CurrentTime_Second)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "UpdateNPCSpawnDataListByTime");

	Params::SYS_LevelManager_C_UpdateNPCSpawnDataListByTime Parms{};

	Parms.CurrentTime_Second = CurrentTime_Second;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SYS_LevelManager.SYS_LevelManager_C.UpdateNPCSpawnSystem
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ASYS_LevelManager_C::UpdateNPCSpawnSystem(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SYS_LevelManager_C", "UpdateNPCSpawnSystem");

	Params::SYS_LevelManager_C_UpdateNPCSpawnSystem Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

