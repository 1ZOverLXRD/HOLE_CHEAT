#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_PlayerCameraConfig

#include "Basic.hpp"

#include "BPI_PlayerCameraConfig_classes.hpp"
#include "BPI_PlayerCameraConfig_parameters.hpp"


namespace SDK
{

// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetBrightness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Brightness                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetBrightness(double Brightness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetBrightness");

	Params::BPI_PlayerCameraConfig_C_SetBrightness Parms{};

	Parms.Brightness = Brightness;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetCameraShake
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CameraShake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetCameraShake(double CameraShake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetCameraShake");

	Params::BPI_PlayerCameraConfig_C_SetCameraShake Parms{};

	Parms.CameraShake = CameraShake;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetCapture2D
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetCapture2D(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetCapture2D");

	Params::BPI_PlayerCameraConfig_C_SetCapture2D Parms{};

	Parms.Enable = Enable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetDGI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetDGI(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetDGI");

	Params::BPI_PlayerCameraConfig_C_SetDGI Parms{};

	Parms.Enable = Enable;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetDisableControlAxisRotationInLean
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DisableControlAxisRotationInLean                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetDisableControlAxisRotationInLean(bool DisableControlAxisRotationInLean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetDisableControlAxisRotationInLean");

	Params::BPI_PlayerCameraConfig_C_SetDisableControlAxisRotationInLean Parms{};

	Parms.DisableControlAxisRotationInLean = DisableControlAxisRotationInLean;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetEnableWeaponScroll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    EnableWeaponScroll                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetEnableWeaponScroll(bool EnableWeaponScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetEnableWeaponScroll");

	Params::BPI_PlayerCameraConfig_C_SetEnableWeaponScroll Parms{};

	Parms.EnableWeaponScroll = EnableWeaponScroll;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetFOV
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   FOV                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetFOV(int32 FOV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetFOV");

	Params::BPI_PlayerCameraConfig_C_SetFOV Parms{};

	Parms.FOV = FOV;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetInvertVerticalLook
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InvertVerticalLook                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetInvertVerticalLook(bool InvertVerticalLook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetInvertVerticalLook");

	Params::BPI_PlayerCameraConfig_C_SetInvertVerticalLook Parms{};

	Parms.InvertVerticalLook = InvertVerticalLook;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetInvertWeaponScroll
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InvertWeaponScroll                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetInvertWeaponScroll(bool InvertWeaponScroll)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetInvertWeaponScroll");

	Params::BPI_PlayerCameraConfig_C_SetInvertWeaponScroll Parms{};

	Parms.InvertWeaponScroll = InvertWeaponScroll;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetLookDeadzone
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LookDeadzone                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetLookDeadzone(double LookDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetLookDeadzone");

	Params::BPI_PlayerCameraConfig_C_SetLookDeadzone Parms{};

	Parms.LookDeadzone = LookDeadzone;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetMouseSmoothing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    MouseSmoothing                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetMouseSmoothing(bool MouseSmoothing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetMouseSmoothing");

	Params::BPI_PlayerCameraConfig_C_SetMouseSmoothing Parms{};

	Parms.MouseSmoothing = MouseSmoothing;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetMovementDeadzone
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MovementDeadzone                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetMovementDeadzone(double MovementDeadzone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetMovementDeadzone");

	Params::BPI_PlayerCameraConfig_C_SetMovementDeadzone Parms{};

	Parms.MovementDeadzone = MovementDeadzone;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetResponseCurve
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ResponseCurve                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetResponseCurve(double ResponseCurve)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetResponseCurve");

	Params::BPI_PlayerCameraConfig_C_SetResponseCurve Parms{};

	Parms.ResponseCurve = ResponseCurve;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetRetroEffect
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    RetroEffect                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetRetroEffect(bool RetroEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetRetroEffect");

	Params::BPI_PlayerCameraConfig_C_SetRetroEffect Parms{};

	Parms.RetroEffect = RetroEffect;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetSensitivity
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetSensitivity(int32 Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetSensitivity");

	Params::BPI_PlayerCameraConfig_C_SetSensitivity Parms{};

	Parms.Sensitivity = Sensitivity;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetSensitivity_ADS
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetSensitivity_ADS(int32 Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetSensitivity_ADS");

	Params::BPI_PlayerCameraConfig_C_SetSensitivity_ADS Parms{};

	Parms.Sensitivity = Sensitivity;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetSensitivity_ADS_Scope2x
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetSensitivity_ADS_Scope2x(int32 Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetSensitivity_ADS_Scope2x");

	Params::BPI_PlayerCameraConfig_C_SetSensitivity_ADS_Scope2x Parms{};

	Parms.Sensitivity = Sensitivity;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetSensitivity_ADS_Scope4x
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Sensitivity                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetSensitivity_ADS_Scope4x(int32 Sensitivity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetSensitivity_ADS_Scope4x");

	Params::BPI_PlayerCameraConfig_C_SetSensitivity_ADS_Scope4x Parms{};

	Parms.Sensitivity = Sensitivity;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetToggleAim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleAim                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetToggleAim(bool ToggleAim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetToggleAim");

	Params::BPI_PlayerCameraConfig_C_SetToggleAim Parms{};

	Parms.ToggleAim = ToggleAim;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetToggleCrouch
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleCrouch                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetToggleCrouch(bool ToggleCrouch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetToggleCrouch");

	Params::BPI_PlayerCameraConfig_C_SetToggleCrouch Parms{};

	Parms.ToggleCrouch = ToggleCrouch;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetToggleLean
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleLean                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetToggleLean(bool ToggleLean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetToggleLean");

	Params::BPI_PlayerCameraConfig_C_SetToggleLean Parms{};

	Parms.ToggleLean = ToggleLean;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetToggleSprint
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleSprint                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetToggleSprint(bool ToggleSprint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetToggleSprint");

	Params::BPI_PlayerCameraConfig_C_SetToggleSprint Parms{};

	Parms.ToggleSprint = ToggleSprint;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_PlayerCameraConfig.BPI_PlayerCameraConfig_C.SetToggleWalk
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ToggleWalk                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_PlayerCameraConfig_C::SetToggleWalk(bool ToggleWalk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_PlayerCameraConfig_C", "SetToggleWalk");

	Params::BPI_PlayerCameraConfig_C_SetToggleWalk Parms{};

	Parms.ToggleWalk = ToggleWalk;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

