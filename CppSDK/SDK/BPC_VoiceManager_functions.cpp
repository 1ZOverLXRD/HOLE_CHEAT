#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_VoiceManager

#include "Basic.hpp"

#include "BPC_VoiceManager_classes.hpp"
#include "BPC_VoiceManager_parameters.hpp"


namespace SDK
{

// Function BPC_VoiceManager.BPC_VoiceManager_C.GetVoiceText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EN_VoiceTextDataCategory                Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            Text                                                   (Parm, OutParm)

void UBPC_VoiceManager_C::GetVoiceText(EN_VoiceTextDataCategory Category, class FText* Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "GetVoiceText");

	Params::BPC_VoiceManager_C_GetVoiceText Parms{};

	Parms.Category = Category;

	UObject::ProcessEvent(Func, &Parms);

	if (Text != nullptr)
		*Text = std::move(Parms.Text);
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.EndWord
// (Private, BlueprintCallable, BlueprintEvent)

void UBPC_VoiceManager_C::EndWord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "EndWord");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.NextWord
// (Private, BlueprintCallable, BlueprintEvent)

void UBPC_VoiceManager_C::NextWord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "NextWord");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.WordMapper
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    InWord                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EN_VoiceWord*                           OutWord                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_VoiceManager_C::WordMapper(const class FString& InWord, EN_VoiceWord* OutWord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "WordMapper");

	Params::BPC_VoiceManager_C_WordMapper Parms{};

	Parms.InWord = std::move(InWord);

	UObject::ProcessEvent(Func, &Parms);

	if (OutWord != nullptr)
		*OutWord = Parms.OutWord;
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.PlayWord
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPC_VoiceManager_C::PlayWord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "PlayWord");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.StopWord
// (Private, BlueprintCallable, BlueprintEvent)

void UBPC_VoiceManager_C::StopWord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "StopWord");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.StopTalk
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_VoiceManager_C::StopTalk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "StopTalk");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.StartTalk
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// double                                  VolumeMultiplier_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TalkSpeedMultiplier_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_VoiceTextDataCategory                Category                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsDeadVoice                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_VoiceManager_C::StartTalk(const class FText& Text, double VolumeMultiplier_0, double TalkSpeedMultiplier_0, EN_VoiceTextDataCategory Category, bool IsDeadVoice)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "StartTalk");

	Params::BPC_VoiceManager_C_StartTalk Parms{};

	Parms.Text = std::move(Text);
	Parms.VolumeMultiplier_0 = VolumeMultiplier_0;
	Parms.TalkSpeedMultiplier_0 = TalkSpeedMultiplier_0;
	Parms.Category = Category;
	Parms.IsDeadVoice = IsDeadVoice;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_VoiceManager.BPC_VoiceManager_C.InitializeVoiceManager
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_VoiceType                            VoiceType_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_VoiceManager_C::InitializeVoiceManager(EN_VoiceType VoiceType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_VoiceManager_C", "InitializeVoiceManager");

	Params::BPC_VoiceManager_C_InitializeVoiceManager Parms{};

	Parms.VoiceType_0 = VoiceType_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

