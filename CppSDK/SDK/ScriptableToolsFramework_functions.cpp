#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ScriptableToolsFramework

#include "Basic.hpp"

#include "ScriptableToolsFramework_classes.hpp"
#include "ScriptableToolsFramework_parameters.hpp"


namespace SDK
{

// Function ScriptableToolsFramework.ScriptableInteractiveTool.AddLineSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolLineSet*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolLineSet* UScriptableInteractiveTool::AddLineSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "AddLineSet");

	Params::ScriptableInteractiveTool_AddLineSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.AddLogMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)
// bool                                    bHighlighted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::AddLogMessage(const class FText& Message, bool bHighlighted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "AddLogMessage");

	Params::ScriptableInteractiveTool_AddLogMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.bHighlighted = bHighlighted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.AddPointSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolPointSet*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolPointSet* UScriptableInteractiveTool::AddPointSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "AddPointSet");

	Params::ScriptableInteractiveTool_AddPointSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.AddPropertySetOfType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UScriptableInteractiveToolPropertySet>PropertySetType                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EToolsFrameworkOutcomePins*             Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::AddPropertySetOfType(TSubclassOf<class UScriptableInteractiveToolPropertySet> PropertySetType, const class FString& Identifier, EToolsFrameworkOutcomePins* Outcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "AddPropertySetOfType");

	Params::ScriptableInteractiveTool_AddPropertySetOfType Parms{};

	Parms.PropertySetType = PropertySetType;
	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.AddTriangleSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolTriangleSet*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolTriangleSet* UScriptableInteractiveTool::AddTriangleSet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "AddTriangleSet");

	Params::ScriptableInteractiveTool_AddTriangleSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.ClearOverlayWidget
// (Final, Native, Public, BlueprintCallable)

void UScriptableInteractiveTool::ClearOverlayWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "ClearOverlayWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.ClearUserMessages
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bHelpMessage                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bWarningMessage                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::ClearUserMessages(bool bHelpMessage, bool bWarningMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "ClearUserMessages");

	Params::ScriptableInteractiveTool_ClearUserMessages Parms{};

	Parms.bHelpMessage = bHelpMessage;
	Parms.bWarningMessage = bWarningMessage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.CreateTRSGizmo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                InitialTransform                                       (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FScriptableToolGizmoOptions&GizmoOptions                                           (Parm, NoDestructor, NativeAccessSpecifierPublic)
// EToolsFrameworkOutcomePins*             Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::CreateTRSGizmo(const class FString& Identifier, const struct FTransform& InitialTransform, const struct FScriptableToolGizmoOptions& GizmoOptions, EToolsFrameworkOutcomePins* Outcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "CreateTRSGizmo");

	Params::ScriptableInteractiveTool_CreateTRSGizmo Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.InitialTransform = std::move(InitialTransform);
	Parms.GizmoOptions = std::move(GizmoOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.DestroyTRSGizmo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EToolsFrameworkOutcomePins*             Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::DestroyTRSGizmo(const class FString& Identifier, EToolsFrameworkOutcomePins* Outcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "DestroyTRSGizmo");

	Params::ScriptableInteractiveTool_DestroyTRSGizmo Parms{};

	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.DisplayUserHelpMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::DisplayUserHelpMessage(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "DisplayUserHelpMessage");

	Params::ScriptableInteractiveTool_DisplayUserHelpMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.DisplayUserWarningMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      Message                                                (Parm, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::DisplayUserWarningMessage(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "DisplayUserWarningMessage");

	Params::ScriptableInteractiveTool_DisplayUserWarningMessage Parms{};

	Parms.Message = std::move(Message);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.ForcePropertySetUpdateByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::ForcePropertySetUpdateByName(const class FString& Identifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "ForcePropertySetUpdateByName");

	Params::ScriptableInteractiveTool_ForcePropertySetUpdateByName Parms{};

	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.GetGizmoTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UScriptableInteractiveTool::GetGizmoTransform(const class FString& Identifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "GetGizmoTransform");

	Params::ScriptableInteractiveTool_GetGizmoTransform Parms{};

	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.GetToolWorld
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWorld* UScriptableInteractiveTool::GetToolWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "GetToolWorld");

	Params::ScriptableInteractiveTool_GetToolWorld Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnGizmoTransformChanged
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// const class FString&                    GizmoIdentifier                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                NewTransform                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::OnGizmoTransformChanged(const class FString& GizmoIdentifier, const struct FTransform& NewTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnGizmoTransformChanged");

	Params::ScriptableInteractiveTool_OnGizmoTransformChanged Parms{};

	Parms.GizmoIdentifier = std::move(GizmoIdentifier);
	Parms.NewTransform = std::move(NewTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnGizmoTransformStateChange
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// const class FString&                    GizmoIdentifier                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                CurrentTransform                                       (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptableToolGizmoStateChangeType     ChangeType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::OnGizmoTransformStateChange(const class FString& GizmoIdentifier, const struct FTransform& CurrentTransform, EScriptableToolGizmoStateChangeType ChangeType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnGizmoTransformStateChange");

	Params::ScriptableInteractiveTool_OnGizmoTransformStateChange Parms{};

	Parms.GizmoIdentifier = std::move(GizmoIdentifier);
	Parms.CurrentTransform = std::move(CurrentTransform);
	Parms.ChangeType = ChangeType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnScriptDrawHUD
// (Event, Public, BlueprintEvent)
// Parameters:
// class UScriptableTool_HUDAPI*           DrawHUDAPI                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::OnScriptDrawHUD(class UScriptableTool_HUDAPI* DrawHUDAPI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnScriptDrawHUD");

	Params::ScriptableInteractiveTool_OnScriptDrawHUD Parms{};

	Parms.DrawHUDAPI = DrawHUDAPI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnScriptRender
// (Event, Public, BlueprintEvent)
// Parameters:
// class UScriptableTool_RenderAPI*        RenderAPI                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::OnScriptRender(class UScriptableTool_RenderAPI* RenderAPI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnScriptRender");

	Params::ScriptableInteractiveTool_OnScriptRender Parms{};

	Parms.RenderAPI = RenderAPI;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnScriptSetup
// (Event, Public, BlueprintEvent)

void UScriptableInteractiveTool::OnScriptSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnScriptSetup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnScriptShutdown
// (Event, Public, BlueprintEvent)
// Parameters:
// EToolShutdownType                       ShutdownType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::OnScriptShutdown(EToolShutdownType ShutdownType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnScriptShutdown");

	Params::ScriptableInteractiveTool_OnScriptShutdown Parms{};

	Parms.ShutdownType = ShutdownType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnScriptTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::OnScriptTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnScriptTick");

	Params::ScriptableInteractiveTool_OnScriptTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.RemovePropertySetByName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EToolsFrameworkOutcomePins*             Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::RemovePropertySetByName(const class FString& Identifier, EToolsFrameworkOutcomePins* Outcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "RemovePropertySetByName");

	Params::ScriptableInteractiveTool_RemovePropertySetByName Parms{};

	Parms.Identifier = std::move(Identifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.RequestToolShutdown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAccept                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowUserPopupMessage                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      UserMessage                                            (Parm, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::RequestToolShutdown(bool bAccept, bool bShowUserPopupMessage, const class FText& UserMessage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "RequestToolShutdown");

	Params::ScriptableInteractiveTool_RequestToolShutdown Parms{};

	Parms.bAccept = bAccept;
	Parms.bShowUserPopupMessage = bShowUserPopupMessage;
	Parms.UserMessage = std::move(UserMessage);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.RestorePropertySetSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveKey                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::RestorePropertySetSettings(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& SaveKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "RestorePropertySetSettings");

	Params::ScriptableInteractiveTool_RestorePropertySetSettings Parms{};

	Parms.PropertySet = PropertySet;
	Parms.SaveKey = std::move(SaveKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.SavePropertySetSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveKey                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::SavePropertySetSettings(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& SaveKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "SavePropertySetSettings");

	Params::ScriptableInteractiveTool_SavePropertySetSettings Parms{};

	Parms.PropertySet = PropertySet;
	Parms.SaveKey = std::move(SaveKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.SetGizmoTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                NewTransform                                           (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUndoable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::SetGizmoTransform(const class FString& Identifier, const struct FTransform& NewTransform, bool bUndoable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "SetGizmoTransform");

	Params::ScriptableInteractiveTool_SetGizmoTransform Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.NewTransform = std::move(NewTransform);
	Parms.bUndoable = bUndoable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.SetGizmoVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::SetGizmoVisible(const class FString& Identifier, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "SetGizmoVisible");

	Params::ScriptableInteractiveTool_SetGizmoVisible Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.SetOverlayWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMakeDraggable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::SetOverlayWidget(class UUserWidget* Widget, bool bMakeDraggable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "SetOverlayWidget");

	Params::ScriptableInteractiveTool_SetOverlayWidget Parms{};

	Parms.Widget = Widget;
	Parms.bMakeDraggable = bMakeDraggable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.SetPropertySetVisibleByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Identifier                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableInteractiveTool::SetPropertySetVisibleByName(const class FString& Identifier, bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "SetPropertySetVisibleByName");

	Params::ScriptableInteractiveTool_SetPropertySetVisibleByName Parms{};

	Parms.Identifier = std::move(Identifier);
	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchBoolProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, bool bNewValue)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchBoolProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, bool bNewValue)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchBoolProperty");

	Params::ScriptableInteractiveTool_WatchBoolProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchEnumProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, uint8 NewValue)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchEnumProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, uint8 NewValue)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchEnumProperty");

	Params::ScriptableInteractiveTool_WatchEnumProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchFloatProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, double NewValue)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchFloatProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, double NewValue)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchFloatProperty");

	Params::ScriptableInteractiveTool_WatchFloatProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchIntProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, int32 NewValue)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchIntProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, int32 NewValue)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchIntProperty");

	Params::ScriptableInteractiveTool_WatchIntProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchNameProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, class FName NewValue)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchNameProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, class FName NewValue)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchNameProperty");

	Params::ScriptableInteractiveTool_WatchNameProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchObjectProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, class UObject* NewValue)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchObjectProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, class UObject* NewValue)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchObjectProperty");

	Params::ScriptableInteractiveTool_WatchObjectProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchProperty");

	Params::ScriptableInteractiveTool_WatchProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.WatchStringProperty
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UScriptableInteractiveToolPropertySet*PropertySet                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const class FString& NewValue)>&OnModified                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveToolPropertySet*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveToolPropertySet* UScriptableInteractiveTool::WatchStringProperty(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const TDelegate<void(class UScriptableInteractiveToolPropertySet* PropertySet, const class FString& PropertyName, const class FString& NewValue)>& OnModified)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "WatchStringProperty");

	Params::ScriptableInteractiveTool_WatchStringProperty Parms{};

	Parms.PropertySet = PropertySet;
	Parms.PropertyName = std::move(PropertyName);
	Parms.OnModified = OnModified;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.GetDefaultLineSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UScriptableToolLineSet*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolLineSet* UScriptableInteractiveTool::GetDefaultLineSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "GetDefaultLineSet");

	Params::ScriptableInteractiveTool_GetDefaultLineSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.GetDefaultPointSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UScriptableToolPointSet*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolPointSet* UScriptableInteractiveTool::GetDefaultPointSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "GetDefaultPointSet");

	Params::ScriptableInteractiveTool_GetDefaultPointSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.GetDefaultTriangleSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UScriptableToolTriangleSet*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolTriangleSet* UScriptableInteractiveTool::GetDefaultTriangleSet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "GetDefaultTriangleSet");

	Params::ScriptableInteractiveTool_GetDefaultTriangleSet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.GetToolTargets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UToolTarget*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UToolTarget*> UScriptableInteractiveTool::GetToolTargets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "GetToolTargets");

	Params::ScriptableInteractiveTool_GetToolTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveTool.OnScriptCanAccept
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableInteractiveTool::OnScriptCanAccept() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveTool", "OnScriptCanAccept");

	Params::ScriptableInteractiveTool_OnScriptCanAccept Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.GetActiveModifiers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FScriptableToolModifierStates    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FScriptableToolModifierStates UScriptableClickDragTool::GetActiveModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "GetActiveModifiers");

	Params::ScriptableClickDragTool_GetActiveModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnDragBegin
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           StartPosition                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableClickDragTool::OnDragBegin(const struct FInputDeviceRay& StartPosition, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnDragBegin");

	Params::ScriptableClickDragTool_OnDragBegin Parms{};

	Parms.StartPosition = std::move(StartPosition);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnDragEnd
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           EndPosition                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableClickDragTool::OnDragEnd(const struct FInputDeviceRay& EndPosition, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnDragEnd");

	Params::ScriptableClickDragTool_OnDragEnd Parms{};

	Parms.EndPosition = std::move(EndPosition);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnDragSequenceCancelled
// (Native, Event, Public, BlueprintEvent)

void UScriptableClickDragTool::OnDragSequenceCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnDragSequenceCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnDragUpdatePosition
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           NewPosition                                            (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableClickDragTool::OnDragUpdatePosition(const struct FInputDeviceRay& NewPosition, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnDragUpdatePosition");

	Params::ScriptableClickDragTool_OnDragUpdatePosition Parms{};

	Parms.NewPosition = std::move(NewPosition);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnHoverBegin
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           HoverPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableClickDragTool::OnHoverBegin(const struct FInputDeviceRay& HoverPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnHoverBegin");

	Params::ScriptableClickDragTool_OnHoverBegin Parms{};

	Parms.HoverPos = std::move(HoverPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnHoverEnd
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableClickDragTool::OnHoverEnd(const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnHoverEnd");

	Params::ScriptableClickDragTool_OnHoverEnd Parms{};

	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnHoverHitTest
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           HoverPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInputRayHit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInputRayHit UScriptableClickDragTool::OnHoverHitTest(const struct FInputDeviceRay& HoverPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnHoverHitTest");

	Params::ScriptableClickDragTool_OnHoverHitTest Parms{};

	Parms.HoverPos = std::move(HoverPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.OnHoverUpdate
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           HoverPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableClickDragTool::OnHoverUpdate(const struct FInputDeviceRay& HoverPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "OnHoverUpdate");

	Params::ScriptableClickDragTool_OnHoverUpdate Parms{};

	Parms.HoverPos = std::move(HoverPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.TestIfCanBeginClickDrag
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           ClickPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInputRayHit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInputRayHit UScriptableClickDragTool::TestIfCanBeginClickDrag(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "TestIfCanBeginClickDrag");

	Params::ScriptableClickDragTool_TestIfCanBeginClickDrag Parms{};

	Parms.ClickPos = std::move(ClickPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.InActiveClickDrag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableClickDragTool::InActiveClickDrag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "InActiveClickDrag");

	Params::ScriptableClickDragTool_InActiveClickDrag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.InActiveHover
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableClickDragTool::InActiveHover() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "InActiveHover");

	Params::ScriptableClickDragTool_InActiveHover Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.IsAltDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableClickDragTool::IsAltDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "IsAltDown");

	Params::ScriptableClickDragTool_IsAltDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.IsCtrlDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableClickDragTool::IsCtrlDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "IsCtrlDown");

	Params::ScriptableClickDragTool_IsCtrlDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableClickDragTool.IsShiftDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableClickDragTool::IsShiftDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableClickDragTool", "IsShiftDown");

	Params::ScriptableClickDragTool_IsShiftDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableTool_RenderAPI.DrawLine
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthBias                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDepthTested                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableTool_RenderAPI*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableTool_RenderAPI* UScriptableTool_RenderAPI::DrawLine(const struct FVector& Start, const struct FVector& End, const struct FLinearColor& Color, float Thickness, float DepthBias, bool bDepthTested)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableTool_RenderAPI", "DrawLine");

	Params::ScriptableTool_RenderAPI_DrawLine Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Color = std::move(Color);
	Parms.Thickness = Thickness;
	Parms.DepthBias = DepthBias;
	Parms.bDepthTested = bDepthTested;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableTool_RenderAPI.DrawRectWidthHeightXY
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FTransform&                Transform                                              (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LineThickness                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DepthBias                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDepthTested                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCentered                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableTool_RenderAPI*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableTool_RenderAPI* UScriptableTool_RenderAPI::DrawRectWidthHeightXY(const struct FTransform& Transform, double Width, double Height, const struct FLinearColor& Color, float LineThickness, float DepthBias, bool bDepthTested, bool bCentered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableTool_RenderAPI", "DrawRectWidthHeightXY");

	Params::ScriptableTool_RenderAPI_DrawRectWidthHeightXY Parms{};

	Parms.Transform = std::move(Transform);
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Color = std::move(Color);
	Parms.LineThickness = LineThickness;
	Parms.DepthBias = DepthBias;
	Parms.bDepthTested = bDepthTested;
	Parms.bCentered = bCentered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableTool_HUDAPI.DrawTextArrayAtLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            Strings                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCentered                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShiftRowsY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableTool_HUDAPI*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableTool_HUDAPI* UScriptableTool_HUDAPI::DrawTextArrayAtLocation(const struct FVector& Location, const TArray<class FString>& Strings, const struct FLinearColor& Color, bool bCentered, float ShiftRowsY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableTool_HUDAPI", "DrawTextArrayAtLocation");

	Params::ScriptableTool_HUDAPI_DrawTextArrayAtLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.Strings = std::move(Strings);
	Parms.Color = std::move(Color);
	Parms.bCentered = bCentered;
	Parms.ShiftRowsY = ShiftRowsY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableTool_HUDAPI.DrawTextAtLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bCentered                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ShiftRowsY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableTool_HUDAPI*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableTool_HUDAPI* UScriptableTool_HUDAPI::DrawTextAtLocation(const struct FVector& Location, const class FString& String, const struct FLinearColor& Color, bool bCentered, float ShiftRowsY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableTool_HUDAPI", "DrawTextAtLocation");

	Params::ScriptableTool_HUDAPI_DrawTextAtLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.String = std::move(String);
	Parms.Color = std::move(Color);
	Parms.bCentered = bCentered;
	Parms.ShiftRowsY = ShiftRowsY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableTool_HUDAPI.GetCanvasLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       CanvasLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableTool_HUDAPI*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableTool_HUDAPI* UScriptableTool_HUDAPI::GetCanvasLocation(const struct FVector& Location, struct FVector2D* CanvasLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableTool_HUDAPI", "GetCanvasLocation");

	Params::ScriptableTool_HUDAPI_GetCanvasLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CanvasLocation != nullptr)
		*CanvasLocation = std::move(Parms.CanvasLocation);

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableInteractiveToolPropertySet.GetOwningTool
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// EToolsFrameworkOutcomePins*             Outcome                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UScriptableInteractiveTool*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableInteractiveTool* UScriptableInteractiveToolPropertySet::GetOwningTool(EToolsFrameworkOutcomePins* Outcome)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableInteractiveToolPropertySet", "GetOwningTool");

	Params::ScriptableInteractiveToolPropertySet_GetOwningTool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Outcome != nullptr)
		*Outcome = Parms.Outcome;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableToolsUtilityLibrary.MakeInputRayHit
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  HitDepth                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OptionalHitObject                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInputRayHit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInputRayHit UScriptableToolsUtilityLibrary::MakeInputRayHit(double HitDepth, class UObject* OptionalHitObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ScriptableToolsUtilityLibrary", "MakeInputRayHit");

	Params::ScriptableToolsUtilityLibrary_MakeInputRayHit Parms{};

	Parms.HitDepth = HitDepth;
	Parms.OptionalHitObject = OptionalHitObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableToolsUtilityLibrary.MakeInputRayHit_MaxDepth
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputRayHit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInputRayHit UScriptableToolsUtilityLibrary::MakeInputRayHit_MaxDepth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ScriptableToolsUtilityLibrary", "MakeInputRayHit_MaxDepth");

	Params::ScriptableToolsUtilityLibrary_MakeInputRayHit_MaxDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableToolsUtilityLibrary.MakeInputRayHit_Miss
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FInputRayHit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInputRayHit UScriptableToolsUtilityLibrary::MakeInputRayHit_Miss()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ScriptableToolsUtilityLibrary", "MakeInputRayHit_Miss");

	Params::ScriptableToolsUtilityLibrary_MakeInputRayHit_Miss Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddClickDragBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>CanBeginClickDragSequence                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnClickPress                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceRay& DragPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnClickDrag                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceRay& ReleasePos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnClickRelease                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnTerminateDragSequence                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptableToolMouseButton              MouseButton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateModifiersDuringDrag                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddClickDragBehavior(const TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> CanBeginClickDragSequence, const TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnClickPress, const TDelegate<void(const struct FInputDeviceRay& DragPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnClickDrag, const TDelegate<void(const struct FInputDeviceRay& ReleasePos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnClickRelease, const TDelegate<void(const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnTerminateDragSequence, const TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, int32 CapturePriority, EScriptableToolMouseButton MouseButton, bool bUpdateModifiersDuringDrag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddClickDragBehavior");

	Params::ScriptableModularBehaviorTool_AddClickDragBehavior Parms{};

	Parms.CanBeginClickDragSequence = CanBeginClickDragSequence;
	Parms.OnClickPress = OnClickPress;
	Parms.OnClickDrag = OnClickDrag;
	Parms.OnClickRelease = OnClickRelease;
	Parms.OnTerminateDragSequence = OnTerminateDragSequence;
	Parms.CaptureCheck = CaptureCheck;
	Parms.CapturePriority = CapturePriority;
	Parms.MouseButton = MouseButton;
	Parms.bUpdateModifiersDuringDrag = bUpdateModifiersDuringDrag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddDoubleClickBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)>IfHitByClick                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnHitByClick                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptableToolMouseButton              MouseButton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHitTestOnRelease                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddDoubleClickBehavior(const TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)> IfHitByClick, const TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnHitByClick, const TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, int32 CapturePriority, EScriptableToolMouseButton MouseButton, bool bHitTestOnRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddDoubleClickBehavior");

	Params::ScriptableModularBehaviorTool_AddDoubleClickBehavior Parms{};

	Parms.IfHitByClick = IfHitByClick;
	Parms.OnHitByClick = OnHitByClick;
	Parms.CaptureCheck = CaptureCheck;
	Parms.CapturePriority = CapturePriority;
	Parms.MouseButton = MouseButton;
	Parms.bHitTestOnRelease = bHitTestOnRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddMouseHoverBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)>BeginHoverSequenceHitTest                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)>OnBeginHover                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)>OnUpdateHover                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnEndHover                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceState& InputDeviceState)>HoverCaptureCheck                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddMouseHoverBehavior(TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)> BeginHoverSequenceHitTest, TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)> OnBeginHover, TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)> OnUpdateHover, TDelegate<void()> OnEndHover, const TDelegate<void(const struct FInputDeviceState& InputDeviceState)> HoverCaptureCheck, int32 CapturePriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddMouseHoverBehavior");

	Params::ScriptableModularBehaviorTool_AddMouseHoverBehavior Parms{};

	Parms.BeginHoverSequenceHitTest = BeginHoverSequenceHitTest;
	Parms.OnBeginHover = OnBeginHover;
	Parms.OnUpdateHover = OnUpdateHover;
	Parms.OnEndHover = OnEndHover;
	Parms.HoverCaptureCheck = HoverCaptureCheck;
	Parms.CapturePriority = CapturePriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddMouseWheelBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FInputDeviceRay& CurrentPos)>TestShouldRespondToMouseWheel                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)>OnMouseWheelScrollUp                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)>OnMouseWheelScrollDown                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddMouseWheelBehavior(TDelegate<void(const struct FInputDeviceRay& CurrentPos)> TestShouldRespondToMouseWheel, TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)> OnMouseWheelScrollUp, TDelegate<void(const struct FInputDeviceRay& CurrentPos, const struct FScriptableToolModifierStates& Modifiers)> OnMouseWheelScrollDown, TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, int32 CapturePriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddMouseWheelBehavior");

	Params::ScriptableModularBehaviorTool_AddMouseWheelBehavior Parms{};

	Parms.TestShouldRespondToMouseWheel = TestShouldRespondToMouseWheel;
	Parms.OnMouseWheelScrollUp = OnMouseWheelScrollUp;
	Parms.OnMouseWheelScrollDown = OnMouseWheelScrollDown;
	Parms.CaptureCheck = CaptureCheck;
	Parms.CapturePriority = CapturePriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddMultiClickSequenceBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnBeginSequencePreview                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)>CanBeginClickSequence                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnBeginClickSequence                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnNextSequencePreview                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnNextSequenceClick                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnTerminateClickSequence                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       RequestAbortClickSequence                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceState& InputDeviceState)>HoverCaptureCheck                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptableToolMouseButton              MouseButton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddMultiClickSequenceBehavior(TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnBeginSequencePreview, TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)> CanBeginClickSequence, TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnBeginClickSequence, TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnNextSequencePreview, TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnNextSequenceClick, TDelegate<void(const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnTerminateClickSequence, TDelegate<void()> RequestAbortClickSequence, TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, const TDelegate<void(const struct FInputDeviceState& InputDeviceState)> HoverCaptureCheck, int32 CapturePriority, EScriptableToolMouseButton MouseButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddMultiClickSequenceBehavior");

	Params::ScriptableModularBehaviorTool_AddMultiClickSequenceBehavior Parms{};

	Parms.OnBeginSequencePreview = OnBeginSequencePreview;
	Parms.CanBeginClickSequence = CanBeginClickSequence;
	Parms.OnBeginClickSequence = OnBeginClickSequence;
	Parms.OnNextSequencePreview = OnNextSequencePreview;
	Parms.OnNextSequenceClick = OnNextSequenceClick;
	Parms.OnTerminateClickSequence = OnTerminateClickSequence;
	Parms.RequestAbortClickSequence = RequestAbortClickSequence;
	Parms.CaptureCheck = CaptureCheck;
	Parms.HoverCaptureCheck = HoverCaptureCheck;
	Parms.CapturePriority = CapturePriority;
	Parms.MouseButton = MouseButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddMultiKeyInputBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)>OnKeyPressed                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)>OnKeyReleased                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FKey>&              Keys                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    bRequireAllKeys                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddMultiKeyInputBehavior(TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)> OnKeyPressed, TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)> OnKeyReleased, const TArray<struct FKey>& Keys, bool bRequireAllKeys, const TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, int32 CapturePriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddMultiKeyInputBehavior");

	Params::ScriptableModularBehaviorTool_AddMultiKeyInputBehavior Parms{};

	Parms.OnKeyPressed = OnKeyPressed;
	Parms.OnKeyReleased = OnKeyReleased;
	Parms.Keys = std::move(Keys);
	Parms.bRequireAllKeys = bRequireAllKeys;
	Parms.CaptureCheck = CaptureCheck;
	Parms.CapturePriority = CapturePriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddSingleClickBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)>IfHitByClick                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnHitByClick                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptableToolMouseButton              MouseButton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHitTestOnRelease                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddSingleClickBehavior(const TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)> IfHitByClick, const TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnHitByClick, const TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, int32 CapturePriority, EScriptableToolMouseButton MouseButton, bool bHitTestOnRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddSingleClickBehavior");

	Params::ScriptableModularBehaviorTool_AddSingleClickBehavior Parms{};

	Parms.IfHitByClick = IfHitByClick;
	Parms.OnHitByClick = OnHitByClick;
	Parms.CaptureCheck = CaptureCheck;
	Parms.CapturePriority = CapturePriority;
	Parms.MouseButton = MouseButton;
	Parms.bHitTestOnRelease = bHitTestOnRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddSingleClickOrDragBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)>IfHitByClick                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnHitByClick                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>CanBeginClickDragSequence                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnClickPress                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& DragPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnClickDrag                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceRay& ReleasePos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnClickRelease                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)>OnTerminateDragSequence                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScriptableToolMouseButton              MouseButton                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBeginDragIfClickTargetNotHit                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ClickDistanceThreshold                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddSingleClickOrDragBehavior(TDelegate<void(const struct FInputDeviceRay& ClickPos, EScriptableToolMouseButton MouseButton)> IfHitByClick, TDelegate<void(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnHitByClick, TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> CanBeginClickDragSequence, TDelegate<void(const struct FInputDeviceRay& PressPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnClickPress, TDelegate<void(const struct FInputDeviceRay& DragPos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnClickDrag, TDelegate<void(const struct FInputDeviceRay& ReleasePos, const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnClickRelease, TDelegate<void(const struct FScriptableToolModifierStates& Modifiers, EScriptableToolMouseButton MouseButton)> OnTerminateDragSequence, TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, int32 CapturePriority, EScriptableToolMouseButton MouseButton, bool bBeginDragIfClickTargetNotHit, float ClickDistanceThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddSingleClickOrDragBehavior");

	Params::ScriptableModularBehaviorTool_AddSingleClickOrDragBehavior Parms{};

	Parms.IfHitByClick = IfHitByClick;
	Parms.OnHitByClick = OnHitByClick;
	Parms.CanBeginClickDragSequence = CanBeginClickDragSequence;
	Parms.OnClickPress = OnClickPress;
	Parms.OnClickDrag = OnClickDrag;
	Parms.OnClickRelease = OnClickRelease;
	Parms.OnTerminateDragSequence = OnTerminateDragSequence;
	Parms.CaptureCheck = CaptureCheck;
	Parms.CapturePriority = CapturePriority;
	Parms.MouseButton = MouseButton;
	Parms.bBeginDragIfClickTargetNotHit = bBeginDragIfClickTargetNotHit;
	Parms.ClickDistanceThreshold = ClickDistanceThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.AddSingleKeyInputBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)>OnKeyPressed                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)>OnKeyReleased                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(const struct FInputDeviceState& InputDeviceState)>CaptureCheck                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CapturePriority                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableModularBehaviorTool::AddSingleKeyInputBehavior(TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)> OnKeyPressed, TDelegate<void(const struct FKey& Key, const struct FScriptableToolModifierStates& Modifiers)> OnKeyReleased, const struct FKey& Key, const TDelegate<void(const struct FInputDeviceState& InputDeviceState)> CaptureCheck, int32 CapturePriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "AddSingleKeyInputBehavior");

	Params::ScriptableModularBehaviorTool_AddSingleKeyInputBehavior Parms{};

	Parms.OnKeyPressed = OnKeyPressed;
	Parms.OnKeyReleased = OnKeyReleased;
	Parms.Key = std::move(Key);
	Parms.CaptureCheck = CaptureCheck;
	Parms.CapturePriority = CapturePriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.GetActiveModifiers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FScriptableToolModifierStates    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FScriptableToolModifierStates UScriptableModularBehaviorTool::GetActiveModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "GetActiveModifiers");

	Params::ScriptableModularBehaviorTool_GetActiveModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.IsAltDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableModularBehaviorTool::IsAltDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "IsAltDown");

	Params::ScriptableModularBehaviorTool_IsAltDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.IsCtrlDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableModularBehaviorTool::IsCtrlDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "IsCtrlDown");

	Params::ScriptableModularBehaviorTool_IsCtrlDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableModularBehaviorTool.IsShiftDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableModularBehaviorTool::IsShiftDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableModularBehaviorTool", "IsShiftDown");

	Params::ScriptableModularBehaviorTool_IsShiftDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.GetActiveModifiers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FScriptableToolModifierStates    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FScriptableToolModifierStates UScriptableSingleClickTool::GetActiveModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "GetActiveModifiers");

	Params::ScriptableSingleClickTool_GetActiveModifiers Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.OnHitByClick
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           ClickPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableSingleClickTool::OnHitByClick(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "OnHitByClick");

	Params::ScriptableSingleClickTool_OnHitByClick Parms{};

	Parms.ClickPos = std::move(ClickPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.OnHoverBegin
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           HoverPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableSingleClickTool::OnHoverBegin(const struct FInputDeviceRay& HoverPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "OnHoverBegin");

	Params::ScriptableSingleClickTool_OnHoverBegin Parms{};

	Parms.HoverPos = std::move(HoverPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.OnHoverEnd
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UScriptableSingleClickTool::OnHoverEnd(const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "OnHoverEnd");

	Params::ScriptableSingleClickTool_OnHoverEnd Parms{};

	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.OnHoverHitTest
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           HoverPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInputRayHit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInputRayHit UScriptableSingleClickTool::OnHoverHitTest(const struct FInputDeviceRay& HoverPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "OnHoverHitTest");

	Params::ScriptableSingleClickTool_OnHoverHitTest Parms{};

	Parms.HoverPos = std::move(HoverPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.OnHoverUpdate
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           HoverPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableSingleClickTool::OnHoverUpdate(const struct FInputDeviceRay& HoverPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "OnHoverUpdate");

	Params::ScriptableSingleClickTool_OnHoverUpdate Parms{};

	Parms.HoverPos = std::move(HoverPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.TestIfHitByClick
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FInputDeviceRay&           ClickPos                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FScriptableToolModifierStates&Modifiers                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FInputRayHit                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInputRayHit UScriptableSingleClickTool::TestIfHitByClick(const struct FInputDeviceRay& ClickPos, const struct FScriptableToolModifierStates& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "TestIfHitByClick");

	Params::ScriptableSingleClickTool_TestIfHitByClick Parms{};

	Parms.ClickPos = std::move(ClickPos);
	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.InActiveHover
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableSingleClickTool::InActiveHover() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "InActiveHover");

	Params::ScriptableSingleClickTool_InActiveHover Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.IsAltDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableSingleClickTool::IsAltDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "IsAltDown");

	Params::ScriptableSingleClickTool_IsAltDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.IsCtrlDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableSingleClickTool::IsCtrlDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "IsCtrlDown");

	Params::ScriptableSingleClickTool_IsCtrlDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableSingleClickTool.IsShiftDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UScriptableSingleClickTool::IsShiftDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableSingleClickTool", "IsShiftDown");

	Params::ScriptableSingleClickTool_IsShiftDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.CustomScriptableToolBuilder.OnCanBuildTool
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// const TArray<class AActor*>&            SelectedActors                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class UActorComponent*>&   SelectedComponents                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCustomScriptableToolBuilder::OnCanBuildTool(const TArray<class AActor*>& SelectedActors, const TArray<class UActorComponent*>& SelectedComponents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomScriptableToolBuilder", "OnCanBuildTool");

	Params::CustomScriptableToolBuilder_OnCanBuildTool Parms{};

	Parms.SelectedActors = std::move(SelectedActors);
	Parms.SelectedComponents = std::move(SelectedComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.CustomScriptableToolBuilder.OnSetupTool
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// class UScriptableInteractiveTool*       Tool                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class AActor*>&            SelectedActors                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<class UActorComponent*>&   SelectedComponents                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCustomScriptableToolBuilder::OnSetupTool(class UScriptableInteractiveTool* Tool, const TArray<class AActor*>& SelectedActors, const TArray<class UActorComponent*>& SelectedComponents) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomScriptableToolBuilder", "OnSetupTool");

	Params::CustomScriptableToolBuilder_OnSetupTool Parms{};

	Parms.Tool = Tool;
	Parms.SelectedActors = std::move(SelectedActors);
	Parms.SelectedComponents = std::move(SelectedComponents);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTargetRequirements.BuildToolTargetRequirements
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<class UClass*>&            RequirementInterfaces                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class UScriptableToolTargetRequirements*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolTargetRequirements* UScriptableToolTargetRequirements::BuildToolTargetRequirements(const TArray<class UClass*>& RequirementInterfaces)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ScriptableToolTargetRequirements", "BuildToolTargetRequirements");

	Params::ScriptableToolTargetRequirements_BuildToolTargetRequirements Parms{};

	Parms.RequirementInterfaces = std::move(RequirementInterfaces);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ToolTargetScriptableToolBuilder.GetToolTargetRequirements
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UScriptableToolTargetRequirements*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolTargetRequirements* UToolTargetScriptableToolBuilder::GetToolTargetRequirements() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToolTargetScriptableToolBuilder", "GetToolTargetRequirements");

	Params::ToolTargetScriptableToolBuilder_GetToolTargetRequirements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ToolTargetScriptableToolBuilder.OnSetupTool
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UScriptableInteractiveTool*       Tool                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UToolTargetScriptableToolBuilder::OnSetupTool(class UScriptableInteractiveTool* Tool) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToolTargetScriptableToolBuilder", "OnSetupTool");

	Params::ToolTargetScriptableToolBuilder_OnSetupTool Parms{};

	Parms.Tool = Tool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLine.SetLineColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLine::SetLineColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLine", "SetLineColor");

	Params::ScriptableToolLine_SetLineColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLine.SetLineDepthBias
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DepthBias                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLine::SetLineDepthBias(float DepthBias)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLine", "SetLineDepthBias");

	Params::ScriptableToolLine_SetLineDepthBias Parms{};

	Parms.DepthBias = DepthBias;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLine.SetLineEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLine::SetLineEnd(const struct FVector& End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLine", "SetLineEnd");

	Params::ScriptableToolLine_SetLineEnd Parms{};

	Parms.End = std::move(End);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLine.SetLineEndPoints
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   End                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLine::SetLineEndPoints(const struct FVector& Start, const struct FVector& End)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLine", "SetLineEndPoints");

	Params::ScriptableToolLine_SetLineEndPoints Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLine.SetLineStart
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLine::SetLineStart(const struct FVector& Start)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLine", "SetLineStart");

	Params::ScriptableToolLine_SetLineStart Parms{};

	Parms.Start = std::move(Start);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLine.SetLineThickness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLine::SetLineThickness(float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLine", "SetLineThickness");

	Params::ScriptableToolLine_SetLineThickness Parms{};

	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLineSet.AddLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolLine*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolLine* UScriptableToolLineSet::AddLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLineSet", "AddLine");

	Params::ScriptableToolLineSet_AddLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableToolLineSet.RemoveAllLines
// (Final, Native, Public, BlueprintCallable)

void UScriptableToolLineSet::RemoveAllLines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLineSet", "RemoveAllLines");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLineSet.RemoveLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolLine*              Line                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLineSet::RemoveLine(class UScriptableToolLine* Line)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLineSet", "RemoveLine");

	Params::ScriptableToolLineSet_RemoveLine Parms{};

	Parms.Line = Line;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLineSet.SetAllLinesColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLineSet::SetAllLinesColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLineSet", "SetAllLinesColor");

	Params::ScriptableToolLineSet_SetAllLinesColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolLineSet.SetAllLinesThickness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolLineSet::SetAllLinesThickness(float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolLineSet", "SetAllLinesThickness");

	Params::ScriptableToolLineSet_SetAllLinesThickness Parms{};

	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPoint.SetPointColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolPoint::SetPointColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPoint", "SetPointColor");

	Params::ScriptableToolPoint_SetPointColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPoint.SetPointDepthBias
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DepthBias                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolPoint::SetPointDepthBias(float DepthBias)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPoint", "SetPointDepthBias");

	Params::ScriptableToolPoint_SetPointDepthBias Parms{};

	Parms.DepthBias = DepthBias;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPoint.SetPointPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolPoint::SetPointPosition(const struct FVector& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPoint", "SetPointPosition");

	Params::ScriptableToolPoint_SetPointPosition Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPoint.SetPointSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolPoint::SetPointSize(float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPoint", "SetPointSize");

	Params::ScriptableToolPoint_SetPointSize Parms{};

	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPointSet.AddPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolPoint*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolPoint* UScriptableToolPointSet::AddPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPointSet", "AddPoint");

	Params::ScriptableToolPointSet_AddPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableToolPointSet.RemoveAllPoints
// (Final, Native, Public, BlueprintCallable)

void UScriptableToolPointSet::RemoveAllPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPointSet", "RemoveAllPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPointSet.RemovePoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolPoint*             Point                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolPointSet::RemovePoint(class UScriptableToolPoint* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPointSet", "RemovePoint");

	Params::ScriptableToolPointSet_RemovePoint Parms{};

	Parms.Point = Point;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPointSet.SetAllPointsColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolPointSet::SetAllPointsColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPointSet", "SetAllPointsColor");

	Params::ScriptableToolPointSet_SetAllPointsColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolPointSet.SetAllPointsSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolPointSet::SetAllPointsSize(float Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolPointSet", "SetAllPointsSize");

	Params::ScriptableToolPointSet_SetAllPointsSize Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangle.SetTriangleColors
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangle::SetTriangleColors(const struct FColor& A, const struct FColor& B, const struct FColor& C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangle", "SetTriangleColors");

	Params::ScriptableToolTriangle_SetTriangleColors Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangle.SetTriangleMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangle::SetTriangleMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangle", "SetTriangleMaterial");

	Params::ScriptableToolTriangle_SetTriangleMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangle.SetTriangleNormals
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangle::SetTriangleNormals(const struct FVector& A, const struct FVector& B, const struct FVector& C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangle", "SetTriangleNormals");

	Params::ScriptableToolTriangle_SetTriangleNormals Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangle.SetTrianglePoints
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangle::SetTrianglePoints(const struct FVector& A, const struct FVector& B, const struct FVector& C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangle", "SetTrianglePoints");

	Params::ScriptableToolTriangle_SetTrianglePoints Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangle.SetTriangleUVs
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangle::SetTriangleUVs(const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& C)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangle", "SetTriangleUVs");

	Params::ScriptableToolTriangle_SetTriangleUVs Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolQuad.SetQuadColors
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolQuad::SetQuadColors(const struct FColor& A, const struct FColor& B, const struct FColor& C, const struct FColor& D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolQuad", "SetQuadColors");

	Params::ScriptableToolQuad_SetQuadColors Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);
	Parms.D = std::move(D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolQuad.SetQuadMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolQuad::SetQuadMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolQuad", "SetQuadMaterial");

	Params::ScriptableToolQuad_SetQuadMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolQuad.SetQuadNormals
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolQuad::SetQuadNormals(const struct FVector& A, const struct FVector& B, const struct FVector& C, const struct FVector& D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolQuad", "SetQuadNormals");

	Params::ScriptableToolQuad_SetQuadNormals Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);
	Parms.D = std::move(D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolQuad.SetQuadPoints
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolQuad::SetQuadPoints(const struct FVector& A, const struct FVector& B, const struct FVector& C, const struct FVector& D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolQuad", "SetQuadPoints");

	Params::ScriptableToolQuad_SetQuadPoints Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);
	Parms.D = std::move(D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolQuad.SetQuadUVs
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 C                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 D                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolQuad::SetQuadUVs(const struct FVector2D& A, const struct FVector2D& B, const struct FVector2D& C, const struct FVector2D& D)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolQuad", "SetQuadUVs");

	Params::ScriptableToolQuad_SetQuadUVs Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.C = std::move(C);
	Parms.D = std::move(D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangleSet.AddQuad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolQuad*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolQuad* UScriptableToolTriangleSet::AddQuad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangleSet", "AddQuad");

	Params::ScriptableToolTriangleSet_AddQuad Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableToolTriangleSet.AddTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolTriangle*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UScriptableToolTriangle* UScriptableToolTriangleSet::AddTriangle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangleSet", "AddTriangle");

	Params::ScriptableToolTriangleSet_AddTriangle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function ScriptableToolsFramework.ScriptableToolTriangleSet.RemoveAllFaces
// (Final, Native, Public, BlueprintCallable)

void UScriptableToolTriangleSet::RemoveAllFaces()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangleSet", "RemoveAllFaces");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangleSet.RemoveQuad
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolQuad*              Quad                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangleSet::RemoveQuad(class UScriptableToolQuad* Quad)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangleSet", "RemoveQuad");

	Params::ScriptableToolTriangleSet_RemoveQuad Parms{};

	Parms.Quad = Quad;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangleSet.RemoveTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UScriptableToolTriangle*          Triangle                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangleSet::RemoveTriangle(class UScriptableToolTriangle* Triangle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangleSet", "RemoveTriangle");

	Params::ScriptableToolTriangleSet_RemoveTriangle Parms{};

	Parms.Triangle = Triangle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangleSet.SetAllTrianglesColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangleSet::SetAllTrianglesColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangleSet", "SetAllTrianglesColor");

	Params::ScriptableToolTriangleSet_SetAllTrianglesColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function ScriptableToolsFramework.ScriptableToolTriangleSet.SetAllTrianglesMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UScriptableToolTriangleSet::SetAllTrianglesMaterial(class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScriptableToolTriangleSet", "SetAllTrianglesMaterial");

	Params::ScriptableToolTriangleSet_SetAllTrianglesMaterial Parms{};

	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

