#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPC_WeaponManager

#include "Basic.hpp"

#include "BPC_WeaponManager_classes.hpp"
#include "BPC_WeaponManager_parameters.hpp"


namespace SDK
{

// Function BPC_WeaponManager.BPC_WeaponManager_C.CancelBoltCatchRelease
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::CancelBoltCatchRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "CancelBoltCatchRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetBarrelHeat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 BarrelHeat                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 BarrelHeat_Normalized                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetBarrelHeat(double* BarrelHeat, double* BarrelHeat_Normalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetBarrelHeat");

	Params::BPC_WeaponManager_C_GetBarrelHeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BarrelHeat != nullptr)
		*BarrelHeat = Parms.BarrelHeat;

	if (BarrelHeat_Normalized != nullptr)
		*BarrelHeat_Normalized = Parms.BarrelHeat_Normalized;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SetBarrelHeat
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_WeaponBase_C*                 Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  BarrelHeat                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  BarrelHeat_Normalized                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::SetBarrelHeat(class ABP_WeaponBase_C* Weapon, double BarrelHeat, double BarrelHeat_Normalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SetBarrelHeat");

	Params::BPC_WeaponManager_C_SetBarrelHeat Parms{};

	Parms.Weapon = Weapon;
	Parms.BarrelHeat = BarrelHeat;
	Parms.BarrelHeat_Normalized = BarrelHeat_Normalized;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.CancelChamberAction
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::CancelChamberAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "CancelChamberAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetCanAim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanAim                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetCanAim(bool* CanAim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetCanAim");

	Params::BPC_WeaponManager_C_GetCanAim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanAim != nullptr)
		*CanAim = Parms.CanAim;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_OpenShellCarrier
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_OpenShellCarrier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_OpenShellCarrier");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetADSParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_ScopeMagnification*                  LensMagnificationFactor                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetADSParameter(EN_ScopeMagnification* LensMagnificationFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetADSParameter");

	Params::BPC_WeaponManager_C_GetADSParameter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LensMagnificationFactor != nullptr)
		*LensMagnificationFactor = Parms.LensMagnificationFactor;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SetHandAttachSetting
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAttachRightHand                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::SetHandAttachSetting(bool IsAttachRightHand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SetHandAttachSetting");

	Params::BPC_WeaponManager_C_SetHandAttachSetting Parms{};

	Parms.IsAttachRightHand = IsAttachRightHand;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SetVisibiliry
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::SetVisibiliry(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SetVisibiliry");

	Params::BPC_WeaponManager_C_SetVisibiliry Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SetShootingTimer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Timer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::SetShootingTimer(class AActor* Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SetShootingTimer");

	Params::BPC_WeaponManager_C_SetShootingTimer Parms{};

	Parms.Timer = Timer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetWeaponLightState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsON                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetWeaponLightState(bool* IsON)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetWeaponLightState");

	Params::BPC_WeaponManager_C_GetWeaponLightState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsON != nullptr)
		*IsON = Parms.IsON;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.CallGunStopped
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::CallGunStopped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "CallGunStopped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetLightMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_IconMode*                            LightMode                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetLightMode(EN_IconMode* LightMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetLightMode");

	Params::BPC_WeaponManager_C_GetLightMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LightMode != nullptr)
		*LightMode = Parms.LightMode;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetFireMode
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_IconMode*                            Safety                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_IconMode*                            SemiAuto                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_IconMode*                            FullAuto                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetFireMode(EN_IconMode* Safety, EN_IconMode* SemiAuto, EN_IconMode* FullAuto)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetFireMode");

	Params::BPC_WeaponManager_C_GetFireMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Safety != nullptr)
		*Safety = Parms.Safety;

	if (SemiAuto != nullptr)
		*SemiAuto = Parms.SemiAuto;

	if (FullAuto != nullptr)
		*FullAuto = Parms.FullAuto;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.CheckWeaponObjIsLoaded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::CheckWeaponObjIsLoaded(bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "CheckWeaponObjIsLoaded");

	Params::BPC_WeaponManager_C_CheckWeaponObjIsLoaded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SetAllCurrentAmmo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EWeaponSelector, struct FStr_CurrentAmmo>&CurrentAmmo                                            (BlueprintVisible, BlueprintReadOnly, Parm)

void UBPC_WeaponManager_C::SetAllCurrentAmmo(const TMap<EWeaponSelector, struct FStr_CurrentAmmo>& CurrentAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SetAllCurrentAmmo");

	Params::BPC_WeaponManager_C_SetAllCurrentAmmo Parms{};

	Parms.CurrentAmmo = std::move(CurrentAmmo);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetAllCurrentAmmo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<EWeaponSelector, struct FStr_CurrentAmmo>*CurrentAmmo                                            (Parm, OutParm)

void UBPC_WeaponManager_C::GetAllCurrentAmmo(TMap<EWeaponSelector, struct FStr_CurrentAmmo>* CurrentAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetAllCurrentAmmo");

	Params::BPC_WeaponManager_C_GetAllCurrentAmmo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentAmmo != nullptr)
		*CurrentAmmo = std::move(Parms.CurrentAmmo);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.RefreshWeaponSpec
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::RefreshWeaponSpec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "RefreshWeaponSpec");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ChangeEquipWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector                         WeaponSlot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::ChangeEquipWeapon(EWeaponSelector WeaponSlot, class UClass* Weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ChangeEquipWeapon");

	Params::BPC_WeaponManager_C_ChangeEquipWeapon Parms{};

	Parms.WeaponSlot = WeaponSlot;
	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.CancelReload
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::CancelReload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "CancelReload");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_InsertShell_End
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_InsertShell_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_InsertShell_End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_InsertShell_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_InsertShell_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_InsertShell_Begin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_TakeNewShell
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_TakeNewShell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_TakeNewShell");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Chambering_BoltCatchRelease
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Chambering_BoltCatchRelease()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Chambering_BoltCatchRelease");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetCurrentGunIsCharging
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsCharging                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetCurrentGunIsCharging(bool* IsCharging)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetCurrentGunIsCharging");

	Params::BPC_WeaponManager_C_GetCurrentGunIsCharging Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCharging != nullptr)
		*IsCharging = Parms.IsCharging;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_InsertMag_End
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_InsertMag_End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_InsertMag_End");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_InsertMag_Begin
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_InsertMag_Begin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_InsertMag_Begin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_InsertMag_Block
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_InsertMag_Block()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_InsertMag_Block");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_TakeNewMag
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_TakeNewMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_TakeNewMag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_DetachMag
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_DetachMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_DetachMag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Notify_Reload_DropMag
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Notify_Reload_DropMag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Notify_Reload_DropMag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.BoltReleaseTimer
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::BoltReleaseTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "BoltReleaseTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetChargingHand_LocationRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_WeaponManager_C::GetChargingHand_LocationRotation(struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetChargingHand_LocationRotation");

	Params::BPC_WeaponManager_C_GetChargingHand_LocationRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.BoltReleaseAnim
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::BoltReleaseAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "BoltReleaseAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.BoltPullAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::BoltPullAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "BoltPullAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.BoltCatchReleaseAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_WeaponBase_C*                 Weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float*                                  Delay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::BoltCatchReleaseAnim(class ABP_WeaponBase_C* Weapon, float* Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "BoltCatchReleaseAnim");

	Params::BPC_WeaponManager_C_BoltCatchReleaseAnim Parms{};

	Parms.Weapon = Weapon;

	UObject::ProcessEvent(Func, &Parms);

	if (Delay != nullptr)
		*Delay = Parms.Delay;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetHandIK_LocationRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPC_WeaponManager_C::GetHandIK_LocationRotation(double DeltaTime, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetHandIK_LocationRotation");

	Params::BPC_WeaponManager_C_GetHandIK_LocationRotation Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ChamberAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTriggerReleased                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_ChamberActionSelector                SelectorForNPC                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::ChamberAction(bool IsTriggerReleased, EN_ChamberActionSelector SelectorForNPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ChamberAction");

	Params::BPC_WeaponManager_C_ChamberAction Parms{};

	Parms.IsTriggerReleased = IsTriggerReleased;
	Parms.SelectorForNPC = SelectorForNPC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetCurrentAmmoNum
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  AmmoInChamber                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  AmmoInMagazine                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsJamming                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetCurrentAmmoNum(int32* AmmoInChamber, int32* AmmoInMagazine, bool* IsJamming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetCurrentAmmoNum");

	Params::BPC_WeaponManager_C_GetCurrentAmmoNum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AmmoInChamber != nullptr)
		*AmmoInChamber = Parms.AmmoInChamber;

	if (AmmoInMagazine != nullptr)
		*AmmoInMagazine = Parms.AmmoInMagazine;

	if (IsJamming != nullptr)
		*IsJamming = Parms.IsJamming;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ClearAllWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::ClearAllWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ClearAllWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SwitchFireMode
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::SwitchFireMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SwitchFireMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.AllOffWeaponLight
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::AllOffWeaponLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "AllOffWeaponLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SwitchWeaponLight
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::SwitchWeaponLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SwitchWeaponLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Destroy Damage Area
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::Destroy_Damage_Area()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Destroy Damage Area");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetStateManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBPC_StateManager_C**             StateManager                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetStateManager(class UBPC_StateManager_C** StateManager, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetStateManager");

	Params::BPC_WeaponManager_C_GetStateManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StateManager != nullptr)
		*StateManager = Parms.StateManager;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.SlashAnim
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float*                                  Delay                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::SlashAnim(float* Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "SlashAnim");

	Params::BPC_WeaponManager_C_SlashAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Delay != nullptr)
		*Delay = Parms.Delay;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetBulletSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 BulletSpeed                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetBulletSpeed(double* BulletSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetBulletSpeed");

	Params::BPC_WeaponManager_C_GetBulletSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BulletSpeed != nullptr)
		*BulletSpeed = Parms.BulletSpeed;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.CheckCurrentWeaponInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsEmptyAmmo                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsChamberEmpty                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   NowReloading                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltChargingPullEnd                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltChargingPushEnd                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBolt_Slide_Stopped                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsJamming                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsHalfLessAmmo                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsFullAmmo                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::CheckCurrentWeaponInfo(bool* IsEmptyAmmo, bool* IsChamberEmpty, bool* NowReloading, bool* IsBoltChargingPullEnd, bool* IsBoltChargingPushEnd, bool* IsBolt_Slide_Stopped, bool* IsJamming, bool* IsHalfLessAmmo, bool* IsFullAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "CheckCurrentWeaponInfo");

	Params::BPC_WeaponManager_C_CheckCurrentWeaponInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsEmptyAmmo != nullptr)
		*IsEmptyAmmo = Parms.IsEmptyAmmo;

	if (IsChamberEmpty != nullptr)
		*IsChamberEmpty = Parms.IsChamberEmpty;

	if (NowReloading != nullptr)
		*NowReloading = Parms.NowReloading;

	if (IsBoltChargingPullEnd != nullptr)
		*IsBoltChargingPullEnd = Parms.IsBoltChargingPullEnd;

	if (IsBoltChargingPushEnd != nullptr)
		*IsBoltChargingPushEnd = Parms.IsBoltChargingPushEnd;

	if (IsBolt_Slide_Stopped != nullptr)
		*IsBolt_Slide_Stopped = Parms.IsBolt_Slide_Stopped;

	if (IsJamming != nullptr)
		*IsJamming = Parms.IsJamming;

	if (IsHalfLessAmmo != nullptr)
		*IsHalfLessAmmo = Parms.IsHalfLessAmmo;

	if (IsFullAmmo != nullptr)
		*IsFullAmmo = Parms.IsFullAmmo;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Gun Recoil
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Recoil_Horizontal                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Recoil_Vertical                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::Gun_Recoil(double Recoil_Horizontal, double Recoil_Vertical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Gun Recoil");

	Params::BPC_WeaponManager_C_Gun_Recoil Parms{};

	Parms.Recoil_Horizontal = Recoil_Horizontal;
	Parms.Recoil_Vertical = Recoil_Vertical;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ReloadAnim
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::ReloadAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ReloadAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ReloadWeapon
// (Public, BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::ReloadWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ReloadWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetWeaponMotionState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponMotionState*                     WeaponMotionState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetWeaponMotionState(EWeaponMotionState* WeaponMotionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetWeaponMotionState");

	Params::BPC_WeaponManager_C_GetWeaponMotionState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponMotionState != nullptr)
		*WeaponMotionState = Parms.WeaponMotionState;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.UseCurrentWeapon
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTriggerReleased                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::UseCurrentWeapon(bool IsTriggerReleased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "UseCurrentWeapon");

	Params::BPC_WeaponManager_C_UseCurrentWeapon Parms{};

	Parms.IsTriggerReleased = IsTriggerReleased;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Get ADS Location
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         ADSLocation                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 ADSPoint                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::Get_ADS_Location(struct FVector* ADSLocation, class USceneComponent** ADSPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Get ADS Location");

	Params::BPC_WeaponManager_C_Get_ADS_Location Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ADSLocation != nullptr)
		*ADSLocation = std::move(Parms.ADSLocation);

	if (ADSPoint != nullptr)
		*ADSPoint = Parms.ADSPoint;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetCurrentWeaponFireModeType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_FireModeType*                        FireModeType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsBoltOpen                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetCurrentWeaponFireModeType(bool* Success, EN_FireModeType* FireModeType, bool* IsBoltOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetCurrentWeaponFireModeType");

	Params::BPC_WeaponManager_C_GetCurrentWeaponFireModeType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (FireModeType != nullptr)
		*FireModeType = Parms.FireModeType;

	if (IsBoltOpen != nullptr)
		*IsBoltOpen = Parms.IsBoltOpen;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GetCurrentWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_WeaponBase_C**                CurrentWeapon                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GetCurrentWeapon(class ABP_WeaponBase_C** CurrentWeapon, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GetCurrentWeapon");

	Params::BPC_WeaponManager_C_GetCurrentWeapon Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentWeapon != nullptr)
		*CurrentWeapon = Parms.CurrentWeapon;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.GenerateWeapon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PrimaryWeapon                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           SecondaryWeapon                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           MeleeWeapon                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Primary_WCSD_ForNPC                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Secondary_WCSD_ForNPC                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Melee_WCSD_ForNPC                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::GenerateWeapon(class UClass* PrimaryWeapon, class UClass* SecondaryWeapon, class UClass* MeleeWeapon, class UClass* Primary_WCSD_ForNPC, class UClass* Secondary_WCSD_ForNPC, class UClass* Melee_WCSD_ForNPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "GenerateWeapon");

	Params::BPC_WeaponManager_C_GenerateWeapon Parms{};

	Parms.PrimaryWeapon = PrimaryWeapon;
	Parms.SecondaryWeapon = SecondaryWeapon;
	Parms.MeleeWeapon = MeleeWeapon;
	Parms.Primary_WCSD_ForNPC = Primary_WCSD_ForNPC;
	Parms.Secondary_WCSD_ForNPC = Secondary_WCSD_ForNPC;
	Parms.Melee_WCSD_ForNPC = Melee_WCSD_ForNPC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Switch Weapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EWeaponSelector                         NewWeapon                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isReset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsSwitched                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::Switch_Weapon(EWeaponSelector NewWeapon, bool isReset, bool* IsSwitched)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Switch Weapon");

	Params::BPC_WeaponManager_C_Switch_Weapon Parms{};

	Parms.NewWeapon = NewWeapon;
	Parms.isReset = isReset;

	UObject::ProcessEvent(Func, &Parms);

	if (IsSwitched != nullptr)
		*IsSwitched = Parms.IsSwitched;
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.Initialize Weapon Manager
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AALS_Base_CharacterBP_C*          BaseCharacter_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  WeaponLocation_Back_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  WeaponLocation_RF_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  WeaponLocation_BackWaist_0                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  WeaponLocation_EquipMelee_0                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent*                  HeldObjectRoot                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EWeaponSelector                         CurrentWeapon_ForPlayer                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           PrimaryWeapon_WCSD_ForNPC                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           SecondaryWeapon_WCSD_ForNPC                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           MeleeWeapon_WCSD_ForNPC                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           PrimaryWeapon_ForPlayer                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           SecondaryWeapon_ForPlayer                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           MeleeWeapon_ForPlayer                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::Initialize_Weapon_Manager(class AALS_Base_CharacterBP_C* BaseCharacter_0, class USceneComponent* WeaponLocation_Back_0, class USceneComponent* WeaponLocation_RF_0, class USceneComponent* WeaponLocation_BackWaist_0, class USceneComponent* WeaponLocation_EquipMelee_0, class USceneComponent* HeldObjectRoot, EWeaponSelector CurrentWeapon_ForPlayer, class UClass* PrimaryWeapon_WCSD_ForNPC, class UClass* SecondaryWeapon_WCSD_ForNPC, class UClass* MeleeWeapon_WCSD_ForNPC, class UClass* PrimaryWeapon_ForPlayer, class UClass* SecondaryWeapon_ForPlayer, class UClass* MeleeWeapon_ForPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "Initialize Weapon Manager");

	Params::BPC_WeaponManager_C_Initialize_Weapon_Manager Parms{};

	Parms.BaseCharacter_0 = BaseCharacter_0;
	Parms.WeaponLocation_Back_0 = WeaponLocation_Back_0;
	Parms.WeaponLocation_RF_0 = WeaponLocation_RF_0;
	Parms.WeaponLocation_BackWaist_0 = WeaponLocation_BackWaist_0;
	Parms.WeaponLocation_EquipMelee_0 = WeaponLocation_EquipMelee_0;
	Parms.HeldObjectRoot = HeldObjectRoot;
	Parms.CurrentWeapon_ForPlayer = CurrentWeapon_ForPlayer;
	Parms.PrimaryWeapon_WCSD_ForNPC = PrimaryWeapon_WCSD_ForNPC;
	Parms.SecondaryWeapon_WCSD_ForNPC = SecondaryWeapon_WCSD_ForNPC;
	Parms.MeleeWeapon_WCSD_ForNPC = MeleeWeapon_WCSD_ForNPC;
	Parms.PrimaryWeapon_ForPlayer = PrimaryWeapon_ForPlayer;
	Parms.SecondaryWeapon_ForPlayer = SecondaryWeapon_ForPlayer;
	Parms.MeleeWeapon_ForPlayer = MeleeWeapon_ForPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ShootingTimerBindEvent
// (BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::ShootingTimerBindEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ShootingTimerBindEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ShootingTimerCountEvent
// (BlueprintCallable, BlueprintEvent)

void UBPC_WeaponManager_C::ShootingTimerCountEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ShootingTimerCountEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BPC_WeaponManager.BPC_WeaponManager_C.ExecuteUbergraph_BPC_WeaponManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPC_WeaponManager_C::ExecuteUbergraph_BPC_WeaponManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPC_WeaponManager_C", "ExecuteUbergraph_BPC_WeaponManager");

	Params::BPC_WeaponManager_C_ExecuteUbergraph_BPC_WeaponManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

