#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Gun

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "EN_IconMode_structs.hpp"
#include "EN_SelectedFireMode_structs.hpp"
#include "EN_FireModeType_structs.hpp"
#include "EN_GunMotionState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_Gun.BPI_Gun_C
// 0x0000 (0x0000 - 0x0000)
class IBPI_Gun_C final
{
public:
	void BoltCatchReleaseCancel();
	void Chambering_BoltChatchRelease();
	void ChargeBolt(bool IsTriggerReleased);
	void ClearMagazine();
	void Fire(bool IsTriggerReleased);
	void GetADSLocation(struct FVector* ADSLocation, class USceneComponent** ADSPoint);
	void GetBulletSpeedInChamber(double* BulletSpeed);
	void GetCanReload(bool* CanReload);
	void GetChargingHandPoint(struct FVector* Location, struct FRotator* Rotation);
	void GetCurrentAmmoInfo(int32* AmmoInChamber, int32* AmmoInMagazine, bool* IsJamming, int32* MagazineCapacity);
	void GetFireModeInfo(EN_SelectedFireMode* CurrentMode, EN_FireModeType* FireModeType);
	void GetGunMotionInfo(bool* IsPulledTrigger, bool* IsFiring, bool* IsBolt_Slide_Stopped, bool* IsBoltCharging, bool* IsBoltChargingPullEnd, bool* IsBoltChargingPushEnd, bool* IsReloading, bool* IsBoltOpen, bool* IsBoltCatchRelease);
	void GetGunMotionState(EN_GunMotionState* GunMotionState);
	void GetLightMode(EN_IconMode* LightMode);
	void GetReloadSpeedMultiplier(double* ReloadSpeedMultiplier);
	void GetShellNumInHand(int32* ShellNum);
	void GetWeaponLightState(bool* IsON);
	void OpenShellCarrier();
	void RefreshGunSpec();
	void Reload_Start();
	void ReloadCancel();
	void ReloadMag_DetachMag();
	void ReloadMag_DropMag();
	void ReloadMag_InsertMag_Begin();
	void ReloadMag_InsertMag_Block();
	void ReloadMag_InsertMag_End();
	void ReloadMag_TakeNewMag();
	void ReloadShell_InsertShell_Begin();
	void ReloadShell_InsertShell_End();
	void ReloadShell_TakeNewShell();
	void SetIsBoltCharging(bool IsBoltCharging);
	void SetMotionInfoByBoltCatchRelease(bool IsBoltCatchRelease);
	void SetupCurrentAmmo(int32 ChamberAmmo, int32 MagazineAmmo);
	void SwitchFireMode();
	void SwitchWeaponLight();

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BPI_Gun_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BPI_Gun_C")
	}
	static class IBPI_Gun_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_Gun_C>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IBPI_Gun_C;

}

