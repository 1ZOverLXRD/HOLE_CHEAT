#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FocusLocator

#include "Basic.hpp"

#include "BP_FocusLocator_classes.hpp"
#include "BP_FocusLocator_parameters.hpp"


namespace SDK
{

// Function BP_FocusLocator.BP_FocusLocator_C.CalcFocusLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         NewCurrentLocation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FocusLocator_C::CalcFocusLocation(double DeltaSeconds, struct FVector* NewCurrentLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "CalcFocusLocation");

	Params::BP_FocusLocator_C_CalcFocusLocation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);

	if (NewCurrentLocation != nullptr)
		*NewCurrentLocation = std::move(Parms.NewCurrentLocation);
}


// Function BP_FocusLocator.BP_FocusLocator_C.ExecuteUbergraph_BP_FocusLocator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FocusLocator_C::ExecuteUbergraph_BP_FocusLocator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "ExecuteUbergraph_BP_FocusLocator");

	Params::BP_FocusLocator_C_ExecuteUbergraph_BP_FocusLocator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FocusLocator.BP_FocusLocator_C.GetCurrentFocusLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         FocusLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FocusLocator_C::GetCurrentFocusLocation(struct FVector* FocusLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "GetCurrentFocusLocation");

	Params::BP_FocusLocator_C_GetCurrentFocusLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FocusLocation != nullptr)
		*FocusLocation = std::move(Parms.FocusLocation);
}


// Function BP_FocusLocator.BP_FocusLocator_C.InitializeFocusLocator
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  BaseFocusSpeed                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           BrainActor_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_FocusLocator_C::InitializeFocusLocator(double BaseFocusSpeed, class AActor* BrainActor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "InitializeFocusLocator");

	Params::BP_FocusLocator_C_InitializeFocusLocator Parms{};

	Parms.BaseFocusSpeed = BaseFocusSpeed;
	Parms.BrainActor_0 = BrainActor_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FocusLocator.BP_FocusLocator_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_FocusLocator_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FocusLocator.BP_FocusLocator_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FocusLocator_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "ReceiveTick");

	Params::BP_FocusLocator_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FocusLocator.BP_FocusLocator_C.SendFocusData
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FocusTargetLocation                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EN_LocatorMoveMode                      FocusMoveMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  FluctuationFactor_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FocusLocator_C::SendFocusData(const struct FVector& FocusTargetLocation, EN_LocatorMoveMode FocusMoveMode, double FluctuationFactor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "SendFocusData");

	Params::BP_FocusLocator_C_SendFocusData Parms{};

	Parms.FocusTargetLocation = std::move(FocusTargetLocation);
	Parms.FocusMoveMode = FocusMoveMode;
	Parms.FluctuationFactor_0 = FluctuationFactor_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FocusLocator.BP_FocusLocator_C.SetLookForwardMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLookForwardMode_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FocusLocator_C::SetLookForwardMode(bool IsLookForwardMode_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FocusLocator_C", "SetLookForwardMode");

	Params::BP_FocusLocator_C_SetLookForwardMode Parms{};

	Parms.IsLookForwardMode_0 = IsLookForwardMode_0;

	UObject::ProcessEvent(Func, &Parms);
}

}

