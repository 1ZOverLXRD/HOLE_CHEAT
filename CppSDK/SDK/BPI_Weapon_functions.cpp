#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Weapon

#include "Basic.hpp"

#include "BPI_Weapon_classes.hpp"
#include "BPI_Weapon_parameters.hpp"


namespace SDK
{

// Function BPI_Weapon.BPI_Weapon_C.GetCurrentSightIsScope
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsScope                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weapon_C::GetCurrentSightIsScope(bool* IsScope)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Weapon_C", "GetCurrentSightIsScope");

	Params::BPI_Weapon_C_GetCurrentSightIsScope Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsScope != nullptr)
		*IsScope = Parms.IsScope;
}


// Function BPI_Weapon.BPI_Weapon_C.GetCurrentSightMagnification
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 LensMagnificationFactor                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weapon_C::GetCurrentSightMagnification(double* LensMagnificationFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Weapon_C", "GetCurrentSightMagnification");

	Params::BPI_Weapon_C_GetCurrentSightMagnification Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (LensMagnificationFactor != nullptr)
		*LensMagnificationFactor = Parms.LensMagnificationFactor;
}


// Function BPI_Weapon.BPI_Weapon_C.GetMainHandLocationRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         RelativeLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        RelativeRotation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_Weapon_C::GetMainHandLocationRotation(struct FVector* RelativeLocation, struct FRotator* RelativeRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Weapon_C", "GetMainHandLocationRotation");

	Params::BPI_Weapon_C_GetMainHandLocationRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (RelativeLocation != nullptr)
		*RelativeLocation = std::move(Parms.RelativeLocation);

	if (RelativeRotation != nullptr)
		*RelativeRotation = std::move(Parms.RelativeRotation);
}


// Function BPI_Weapon.BPI_Weapon_C.UseWeapon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTriggerReleased                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Weapon_C::UseWeapon(bool IsTriggerReleased, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Weapon_C", "UseWeapon");

	Params::BPI_Weapon_C_UseWeapon Parms{};

	Parms.IsTriggerReleased = IsTriggerReleased;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}

}

