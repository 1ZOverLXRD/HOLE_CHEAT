#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FaceMaskBase

#include "Basic.hpp"

#include "BP_FaceMaskBase_classes.hpp"
#include "BP_FaceMaskBase_parameters.hpp"


namespace SDK
{

// Function BP_FaceMaskBase.BP_FaceMaskBase_C.BulletHitEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   HitLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HitDamage                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  HitStunPower                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Damage                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Stun                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Time                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DoT_Interval                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPenetrated                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             HitBoneName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   AttackLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           ShooterActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPhysicalSurface                        HitSurfaceType                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMultipleShot                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ShotID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AmmoRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FaceMaskBase_C::BulletHitEvent(const struct FVector& HitLocation, const struct FVector& HitDirection, double HitDamage, double HitStunPower, double DoT_Damage, double DoT_Stun, double DoT_Time, double DoT_Interval, bool IsPenetrated, class FName HitBoneName, const struct FVector& AttackLocation, class AActor* ShooterActor, EPhysicalSurface HitSurfaceType, bool IsMultipleShot, class FName ShotID, class FName AmmoRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FaceMaskBase_C", "BulletHitEvent");

	Params::BP_FaceMaskBase_C_BulletHitEvent Parms{};

	Parms.HitLocation = std::move(HitLocation);
	Parms.HitDirection = std::move(HitDirection);
	Parms.HitDamage = HitDamage;
	Parms.HitStunPower = HitStunPower;
	Parms.DoT_Damage = DoT_Damage;
	Parms.DoT_Stun = DoT_Stun;
	Parms.DoT_Time = DoT_Time;
	Parms.DoT_Interval = DoT_Interval;
	Parms.IsPenetrated = IsPenetrated;
	Parms.HitBoneName = HitBoneName;
	Parms.AttackLocation = std::move(AttackLocation);
	Parms.ShooterActor = ShooterActor;
	Parms.HitSurfaceType = HitSurfaceType;
	Parms.IsMultipleShot = IsMultipleShot;
	Parms.ShotID = ShotID;
	Parms.AmmoRowName = AmmoRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FaceMaskBase.BP_FaceMaskBase_C.DetachMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHeadShot                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitDirection                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   HitPosition                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FaceMaskBase_C::DetachMask(bool IsHeadShot, int32 Hit, const struct FVector& HitDirection, const struct FVector& HitPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FaceMaskBase_C", "DetachMask");

	Params::BP_FaceMaskBase_C_DetachMask Parms{};

	Parms.IsHeadShot = IsHeadShot;
	Parms.Hit = Hit;
	Parms.HitDirection = std::move(HitDirection);
	Parms.HitPosition = std::move(HitPosition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FaceMaskBase.BP_FaceMaskBase_C.DoTEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Stun                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AttackerRowName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AmmoRowName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FaceMaskBase_C::DoTEvent(double Damage, double Stun, class FName AttackerRowName, class FName AmmoRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FaceMaskBase_C", "DoTEvent");

	Params::BP_FaceMaskBase_C_DoTEvent Parms{};

	Parms.Damage = Damage;
	Parms.Stun = Stun;
	Parms.AttackerRowName = AttackerRowName;
	Parms.AmmoRowName = AmmoRowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FaceMaskBase.BP_FaceMaskBase_C.ExecuteUbergraph_BP_FaceMaskBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FaceMaskBase_C::ExecuteUbergraph_BP_FaceMaskBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FaceMaskBase_C", "ExecuteUbergraph_BP_FaceMaskBase");

	Params::BP_FaceMaskBase_C_ExecuteUbergraph_BP_FaceMaskBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FaceMaskBase.BP_FaceMaskBase_C.Init_Tag
// (BlueprintCallable, BlueprintEvent)

void ABP_FaceMaskBase_C::Init_Tag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FaceMaskBase_C", "Init_Tag");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FaceMaskBase.BP_FaceMaskBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_FaceMaskBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FaceMaskBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}

}

