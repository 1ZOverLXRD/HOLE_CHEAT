#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_GameInstance

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "EN_DisplayResolution_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "EN_Faction_structs.hpp"
#include "EN_GunPartsCategory_structs.hpp"
#include "WeaponSelector_structs.hpp"
#include "EN_WeaponPartsCategory_structs.hpp"
#include "EN_WindowMode_structs.hpp"
#include "EN_FPSLimit_structs.hpp"
#include "EN_Language_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_GameInstance.BPI_GameInstance_C
// 0x0000 (0x0000 - 0x0000)
class IBPI_GameInstance_C final
{
public:
	void ApplyConfigData();
	void ApplyConfigData_Audio(uint8 Master, uint8 BGM, uint8 SE, uint8 UI);
	void ApplyConfigData_Control(int32 Sensitivity, int32 Sensitivity_ADS, int32 Sensitivity_ADS_Scope2x, int32 Sensitivity_ADS_Scope4x, bool InvertVerticalLook, bool ToggleSprint, bool ToggleWalk, bool ToggleAim, bool ToggleCrouch, bool ToggleLean, bool EnableWeaponScroll, bool InvertWeaponScroll, bool MouseSmoothing, bool DisableControlAxisRotationInLean, double GP_MovementDeadzone, double GP_LookDeadzone, double GP_ResponseCurve);
	void ApplyConfigData_Game(EN_Language Language, bool SendPlayData);
	void ApplyConfigData_Graphics(EN_WindowMode WindowMode, EN_DisplayResolution DisplayResolution, double Brightness, int32 FOV, EN_FPSLimit FPSLimit, bool RetroEffect, double CameraShake, bool VSync, bool DGI);
	void ApplyConfigData_UI(bool Crosshair, uint8 TaskIcon, uint8 HUDMode);
	void ApplyKeymapData_Gamepad(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap_Gamepad, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap_Gamepad);
	void ApplyKeymapData_KBM(const TMap<class FName, struct FStr_ActionKeymap>& ActionKeyMap, const TMap<class FName, struct FStr_AxisKeymap>& AxisKeyMap);
	void CheckGameSaveDataIsLoaded(bool* IsLoaded);
	void GetAAOLForFunctionLibrary(bool* AimAngleOutLog);
	void GetActionKeyDisplayName(const struct FStr_ActionKeymap& Key, class FName* Name_0);
	void GetAllEventProgress(TMap<class FName, int32>* EventProgress, bool* Success);
	void GetAllOnceItemDropRateFromDB(TMap<class FName, double>* AllOnceItemData, bool* Success);
	void GetAllSkillNameFromDB(TArray<class FName>* SkillRowName);
	void GetAllWeaponNameAndCategoryFromDB(bool* Success, TMap<class FName, struct FStr_WeaponNameAndSubCategory>* AllData);
	void GetAmmoSpecDataFromDB(class FName AmmoRowName, struct FStr_AmmoData* AmmoData, bool* Success);
	void GetArmorPointData(EPhysicalSurface SurfaceType, int32* ArmorPoint);
	void GetCashItemDataFromDB(class FName CashItemRowName, bool* Success, struct FStr_CashItemData* CashItemData);
	void GetColorTeamMode(bool* IsColorTeamMode);
	void GetConfigData_All(class USGO_ConfigData_C** ConfigData);
	void GetConfigData_Game(uint8* Language, bool* SendPlayData);
	void GetConfigData_UI(bool* EnableCrosshair, uint8* TaskIcon, uint8* HUDMode);
	void GetDataItemDataFromDB(class FName DataItemRowName, bool* Success, struct FStr_DataItemData* DataItemData);
	void GetDebugFocusRender(bool* IsDebug);
	void GetDefaultConfigData(TMap<class FName, bool>* DefaultBool, TMap<class FName, uint8>* DefaultByte, TMap<class FName, int32>* DefaultInteger, TMap<class FName, double>* DefaultFloat);
	void GetDefaultKeymapData(TMap<class FName, struct FStr_AxisKeymap>* DefaultAxis_KBM, TMap<class FName, struct FStr_ActionKeymap>* DefaultAction_KBM, TMap<class FName, struct FStr_AxisKeymap>* DefaultAxis_GP, TMap<class FName, struct FStr_ActionKeymap>* DefaultAction_GP);
	void GetDiscDataFromDB(class FName DiscRowName, bool* Success, struct FStr_DiscType* DiscData);
	void GetDLSForFunctionLibrary(struct FStr_DebugLogSetting* DebugLogSetting);
	void GetEventProgress(class FName EventName, int32* Progress);
	void GetFactionalRelationShip(EN_Faction SelfFaction, EN_Faction OtherFaction, bool* IsFrendry);
	void GetFridgeDataFromDB(class FName FridgeRowName, struct FStr_FridgeData* FridgeData, bool* Success);
	void GetFTSForFunctionLibrary(bool* FireTrace, bool* BulletSpeed);
	void GetGunBaseSpecFromDB(class FName WeaponRowName, struct FStr_GunSpecData* GunBaseSpec, bool* Success);
	void GetGunPartsDataByCategoryFromDB(class FName WeaponRowName, EN_GunPartsCategory PartsCategory, TArray<class FName>* GunPartsRowNames, bool* Success);
	void GetGunPartsDataFromDB(class FName GunPartsRowName, struct FStr_GunPartsData* GunPartsData, bool* Success);
	void GetHitDamageMultiplierData(EPhysicalSurface HitSurfaceType, bool IsArmorPenetrated, double* DamageMultiplier);
	void GetHitStunDamageMultiplierData(EPhysicalSurface HitSurface, double* Multiplier);
	void GetHomeFacilityDataFromDB(class FName FacilityRowName, struct FStr_HomeFacilityData* FacilityData, bool* Success);
	void GetInputKeyByActionName(class FName ActionName, struct FStr_ActionKeymap* Key, bool* Success);
	void GetInputKeyIconMode(bool* IsGamepadMode);
	void GetIsReturnToTitle(bool* IsReturnToTitle);
	void GetKeyIconFromDB(const struct FKey& Key, class UTexture** Icon, bool* Success);
	void GetKeymapData_All(class USGO_KeymapData_C** KeymapData);
	void GetLevelDataImageFromDB(class FName AreaRowName, class UTexture2D** Image, bool* Success);
	void GetLevelNameFromDB(class FName AreaRowName, class FText* Name_0, bool* Success);
	void GetLockedWeaponPartsOnlyUnlockedWeapon(TArray<class FName>* WeaponPartsRowNames, bool* Success);
	void GetMeleeBaseSpecFromDB(class FName WeaponRowName, struct FStr_MeleeBaseSpecData* BaseSpec, bool* Success);
	void GetMeleePartsDataFromDB(class FName MeleePartsRowName, struct FStr_MeleePartsData* MeleePartsData, bool* Success);
	void GetNewTaskFromDB(class FName* NewTaskRowName, bool* IsRepeatTask, bool* Success);
	void GetNPCAutoMantle(bool* IsAutoMantle);
	void GetNPCDataFromDB(class FName NPCRowName, bool* Success, struct FStr_NPCData* NPC_Data);
	void GetNPCTaskViewMode(bool* IsEnable);
	void GetObjectDataFromDB(class FName ObjectRowName, struct FStr_ObjectData* ObjectData, bool* Success);
	void GetOnceItemDataFromDB(class FName OnceItemRowName, bool* Success, struct FStr_OnceItemData* OnceItemData);
	void GetPrototypeConfigData(bool* CameraShake);
	void GetRaytraceGropIDsFromGameInstance(int32* ID);
	void GetReward(const struct FStr_TaskReward& Reward);
	void GetSaveData_AreaUnlockData(TSet<class FName>* AreaUnlocked);
	void GetSaveData_ClearTaskCount(class FName TaskID, int32* Count);
	void GetSaveData_CurrentAmmo(TMap<EWeaponSelector, struct FStr_CurrentAmmo>* CurrentAmmo, bool* Success);
	void GetSaveData_CurrentTask(TMap<uint8, struct FStr_TaskCardState>* Task, bool* Success);
	void GetSaveData_CurrentTaskItems(class FName TaskItemRowName, int32* Amount);
	void GetSaveData_CurrentWeapon(EWeaponSelector* CurrentWeaponSelector);
	void GetSaveData_EquipWeaponData(TMap<EWeaponSelector, class FName>* WeaponData);
	void GetSaveData_IsClearedAllTask(bool* IsAllClear);
	void GetSaveData_IsUnlockedShopItem(class FName SkillRowName, bool* IsUnlocked);
	void GetSaveData_IsUnlockedWeaponPartsBlueprint(class FName WeaponPartsRowName, bool* IsUnlocked);
	void GetSaveData_PlayerStats(int32* Cash, int32* Data, TMap<class FName, int32>* Disc);
	void GetSaveData_PurchasedWeaponParts(TSet<class FName>* WeaponPartsRowName, bool* Success);
	void GetSaveData_RoomKeyUnlockData(class FName KeyName, bool* IsUnlocked);
	void GetSaveData_SkillLevel_Activated(class FName SkillRowName, bool* Success, int32* SkillLv);
	void GetSaveData_SkillLevel_Unlocked(class FName SkillRowName, bool* Success, int32* SkillLv);
	void GetSaveData_SkillLevel_UnlockedAll(TMap<class FName, int32>* Skill, bool* Success);
	void GetSaveData_UnlockGunIDList(TArray<class FName>* GunRowName, bool* Success);
	void GetSaveData_UnlockGunIDList_Length(int32* Length);
	void GetSaveData_UnlockWeapon(class FName WeaponRowName, bool* IsUnlock);
	void GetSaveData_WeaponCustomMetaData(class FName WeaponRowName, bool* Success, struct FStr_WeaponCustomMetaData* WeaponCustomMetaData);
	void GetSaveData_WeaponCustomSaveData(class FName WeaponRowName, bool* Success, struct FStr_WeaponCustomSaveData_Temp* WeaponCustomSaveData);
	void GetSkillDataFromDB(class FName RowName, bool* Success, struct FStr_SkillData* SkillData);
	void GetTaskDataFromDB(class FName TaskRowName, struct FStr_TaskData* TaskData, bool* Success);
	void GetTaskItemDataFromDB(class FName TaskItemRowName, struct FStr_TaskItemData* TaskItemData, bool* Success);
	void GetUIColor(struct FLinearColor* PrimaryColor, struct FLinearColor* SecondaryColor, struct FLinearColor* TextActiveColor, struct FLinearColor* TextDeactiveColor, struct FLinearColor* RejectColor);
	void GetWeaponDataFromDB(class FName RowName, bool* Success, struct FStr_WeaponData* WeaponData);
	void GetWeaponPartsDataFromDB(class FName WeaponPartsRowName, EN_WeaponPartsCategory* WeaponPartsCategory, struct FStr_GunPartsData* GunPartsData, struct FStr_MeleePartsData* MeleePartsData, bool* Success);
	void HandOverTaskItem(const TMap<class FName, int32>& RequireItem);
	void InitializeRaytraceGroupID();
	void ResetSaveData();
	void ResetSaveData_PlayerStats();
	void SaveSaveData_All(bool* Success);
	void SendPlayData_GameEnd();
	void SendPlayData_GameStart();
	void SendPlayData_Initialize();
	void SendPlayData_Result(const struct FStr_SendPlayData_Result& ResultData);
	void SetColorTeamMode(bool IsColorTeamMode);
	void SetEventProgress(class FName EventName, int32 Progress);
	void SetInputKeyIconMode(bool IsGamapadMode);
	void SetIsReturnToTitle(bool IsReturnToTitle);
	void SetSaveData_AddAllPurchasedWeaponParts();
	void SetSaveData_AddClearTaskCounts(class FName Task);
	void SetSaveData_AddPurchasedWeaponParts(const TArray<class FName>& WeaponPartsRowName);
	void SetSaveData_CurrentAmmo(const TMap<EWeaponSelector, struct FStr_CurrentAmmo>& CurrentAmmo);
	void SetSaveData_CurrentTask(const TMap<uint8, struct FStr_TaskCardState>& CurrentTask);
	void SetSaveData_CurrentTaskItems(class FName TaskItemRowName, int32 Amount);
	void SetSaveData_CurrentWeapon();
	void SetSaveData_EquipWeaponData();
	void SetSaveData_PlayerStats(int32 Cash, int32 Data, const TMap<class FName, int32>& Disc);
	void SetSaveData_SkillLevel_Activated(class FName SkillRowName, int32 SkillLv);
	void SetSaveData_SkillLevel_Unlocked(class FName SkillRowName, int32 SkillLv);
	void SetSaveData_UnlockedAllWeaponPartsBlueprint();
	void SetSaveData_UnlockedWeaponPartsBlueprint(class FName PartsRowName);
	void SetSaveData_UnlockWeapon(class FName WeaponRowName, bool IsUnlock);
	void SetSaveData_WeaponCustomSaveData(class FName WeaponRowName, const struct FStr_WeaponCustomSaveData_Temp& WeaponCustomSaveData, bool* Success);
	void SetShopMachine(class AActor* Machine);
	void TempApply_Graphics_Brightness(double Brightness);
	void TempApply_Graphics_FOV(int32 FieldOfView);
	void TempApply_Graphics_RetroEffect(bool RetroEffect);
	void UseCash(int32 Cash, bool* Success);
	void UseData(int32 Data, bool* Success);
	void UseDisc(const struct FStr_DiscType_Amount& Disc, bool* Success);

public:
	static class UClass* StaticClass()
	{
		BP_STATIC_CLASS_IMPL("BPI_GameInstance_C")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"BPI_GameInstance_C")
	}
	static class IBPI_GameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_GameInstance_C>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IBPI_GameInstance_C;

}

