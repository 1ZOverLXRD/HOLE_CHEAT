#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_Character

#include "Basic.hpp"

#include "BPI_Character_classes.hpp"
#include "BPI_Character_parameters.hpp"


namespace SDK
{

// Function BPI_Character.BPI_Character_C.GetBodyPartsLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_BodyPartsName                        Parts                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetBodyPartsLocation(EN_BodyPartsName Parts, struct FVector* Location, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_C", "GetBodyPartsLocation");

	Params::BPI_Character_C_GetBodyPartsLocation Parms{};

	Parms.Parts = Parts;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BPI_Character.BPI_Character_C.GetFaction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EN_Faction*                             Faction                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetFaction(EN_Faction* Faction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_C", "GetFaction");

	Params::BPI_Character_C_GetFaction Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Faction != nullptr)
		*Faction = Parms.Faction;
}


// Function BPI_Character.BPI_Character_C.GetHP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 HP                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 MaxHP                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetHP(double* HP, double* MaxHP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_C", "GetHP");

	Params::BPI_Character_C_GetHP Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (HP != nullptr)
		*HP = Parms.HP;

	if (MaxHP != nullptr)
		*MaxHP = Parms.MaxHP;
}


// Function BPI_Character.BPI_Character_C.GetIsIndoor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsIndoor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::GetIsIndoor(bool* IsIndoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_C", "GetIsIndoor");

	Params::BPI_Character_C_GetIsIndoor Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (IsIndoor != nullptr)
		*IsIndoor = Parms.IsIndoor;
}


// Function BPI_Character.BPI_Character_C.HealHP
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::HealHP(double HealAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_C", "HealHP");

	Params::BPI_Character_C_HealHP Parms{};

	Parms.HealAmount = HealAmount;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_Character.BPI_Character_C.SetIsIndoor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsIndoor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_Character_C::SetIsIndoor(bool IsIndoor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_Character_C", "SetIsIndoor");

	Params::BPI_Character_C_SetIsIndoor Parms{};

	Parms.IsIndoor = IsIndoor;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

